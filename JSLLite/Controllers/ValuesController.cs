
using Busy2184;
using ESCommon;
using JSL_LITE.Models;
using JSLLite.Models;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Http;
using System.Xml;
using System.Xml.Serialization;

//http://103.25.128.155/SFAApi/CatalogImages/
//http://103.207.64.9:99/SFA/CatalogImages/

namespace JSL_LITE.Controllers

{
    //[EnableCors(origins: "*", headers: "*", methods: "*")]
    //[EnableCors(origins: "*", headers: "*", methods: "*")]
    public class ValuesController : ApiController
    {

        public List<string> GetImagesForItem(string itemId)
        {
            List<string> imagePaths = new List<string>();

            // Use HostingEnvironment.MapPath to get the physical path to the Images folder
            string rootFolder = HostingEnvironment.MapPath("~/Images");

            // Construct the path to the folder where images for the item are stored
            string itemFolderPath = Path.Combine(rootFolder, itemId);

            // Check if the directory exists
            if (Directory.Exists(itemFolderPath))
            {
                // Get all image files (you can filter by specific file types if needed)
                var imageFiles = Directory.GetFiles(itemFolderPath);

                // Generate relative paths for the images to be used in the view
                foreach (var filePath in imageFiles)
                {
                    string relativePath = Url.Content(Path.Combine("~/Images", itemId, Path.GetFileName(filePath)));
                    imagePaths.Add(relativePath);
                }
            }

            return imagePaths;
        }

        [HttpGet]
        public dynamic ItemDetails(string itemId)
        {
            var images = GetImagesForItem(itemId);

            // Pass the images to the view
            return images;
        }


        int Provider = clsMain.MyInt(ConfigurationManager.AppSettings["Provider"]);
        string BusyPath = ConfigurationManager.AppSettings["BusyPath"];
        string BusyDataPath = ConfigurationManager.AppSettings["BusyDataPath"];
        string ServerName = ConfigurationManager.AppSettings["ServerName"];
        string SUserName = ConfigurationManager.AppSettings["SUserName"];
        string SPassword = ConfigurationManager.AppSettings["SPassword"];
        string CompCode = ConfigurationManager.AppSettings["CompCode"];

        [HttpGet]
        public bool ValidateURL()
        {
            return true;
        }

        [HttpGet]
        [Route("api/image/{type}/{name}")]
        public List<string> GetImagesName(string type, string name)
        {
            if (string.IsNullOrEmpty(name))
            {
                return new List<string>(); // Return an empty list if the name is null or empty
            }

            string rootPath = HostingEnvironment.MapPath($"~/images/{type}");
            if (rootPath == null || !Directory.Exists(rootPath))
            {
                return new List<string>(); // Return an empty list if the directory doesn't exist
            }

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };

            var images = Directory.GetFiles(rootPath)
                                  .Where(file => allowedExtensions.Contains(Path.GetExtension(file).ToLower()) &&
                                                 Path.GetFileNameWithoutExtension(file)
                                                     .IndexOf(name, System.StringComparison.OrdinalIgnoreCase) >= 0)
                                  .Select(Path.GetFileName)
                                  .ToList();

            return images; // Return the list of image file names
        }

        [HttpGet]
        [Route("api/image/{type}/{name}")]
        public List<string> GetMultipleImagesPath(string type, string baseName)
        {
            if (string.IsNullOrEmpty(baseName))
            {
                return new List<string>(); // Return an empty list if the base name is null or empty
            }

            // Get the root path for the images
            string rootPath = HostingEnvironment.MapPath($"~/images/{type}");
            if (rootPath == null || !Directory.Exists(rootPath))
            {
                return new List<string>(); // Return an empty list if the directory doesn't exist
            }

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            var imagePaths = new List<string>();

            // Escape special characters in the base name and build regex pattern
            var escapedBaseName = Regex.Escape(baseName.Trim());
            var regexPattern = new Regex(@"^" + escapedBaseName + @"(-\d+)?\.(jpg|jpeg|png|gif)$", RegexOptions.IgnoreCase);

            Console.WriteLine("Regex Pattern: " + regexPattern); // Debug output

            // Get all files in the directory
            var allFiles = Directory.GetFiles(rootPath);

            // Base URL: local or server
            string baseUrl = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority);

            // Iterate over each file and check if it matches the base name with optional suffixes
            foreach (var file in allFiles)
            {
                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file);
                var fileExtension = Path.GetExtension(file).ToLower();

                Console.WriteLine("Checking File: " + file); // Debug output
                Console.WriteLine("File Name Without Extension: " + fileNameWithoutExtension); // Debug output

                // Check if the file has an allowed extension
                if (allowedExtensions.Contains(fileExtension))
                {
                    // Check if the file name matches the base pattern
                    if (regexPattern.IsMatch(fileNameWithoutExtension + fileExtension))
                    {
                        // Construct the URL for the image
                        string relativePath = $"~/images/{type}/{Path.GetFileName(file)}";
                        string fullPath = baseUrl + VirtualPathUtility.ToAbsolute(relativePath).Replace("~", "");

                        Console.WriteLine("Matched Image Path: " + fullPath); // Debug output
                        imagePaths.Add(fullPath); // Add the URL to the list of image paths
                    }
                }
            }

            // Sort the image paths
            imagePaths = imagePaths
                .OrderBy(path =>
                {
                    var fileName = Path.GetFileNameWithoutExtension(path);
                    var match = Regex.Match(fileName, @"^" + escapedBaseName + @"(-(\d+))?$");
                    var suffix = match.Groups[2].Value;
                    // Return 0 for the base image, and the numeric suffix for others
                    return string.IsNullOrEmpty(suffix) ? 0 : int.Parse(suffix);
                })
                .ToList();

            return imagePaths; // Return the list of image paths
        }

        [HttpGet]
        [Route("api/image/{type}/{name}")]
        public string GetSingleImagePath(string type, string baseName)
        {
            if (string.IsNullOrEmpty(baseName))
            {
                return null; // Return null if the base name is null or empty
            }

            // Get the root path for the images
            string rootPath = HostingEnvironment.MapPath($"~/images/{type}");
            if (string.IsNullOrEmpty(rootPath) || !Directory.Exists(rootPath))
            {
                return null; // Return null if the directory doesn't exist
            }

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };

            // Escape special characters in the base name and build regex pattern
            var escapedBaseName = Regex.Escape(baseName.Trim());
            var regexPattern = new Regex(@"^" + escapedBaseName + @"\.(jpg|jpeg|png|gif)$", RegexOptions.IgnoreCase);

            // Get all files in the directory
            var allFiles = Directory.GetFiles(rootPath);

            // Base URL: local or server
            string baseUrl = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority);

            // Iterate over each file and check if it exactly matches the base name
            foreach (var file in allFiles)
            {
                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file);
                var fileExtension = Path.GetExtension(file).ToLower();

                // Check if the file has an allowed extension
                if (allowedExtensions.Contains(fileExtension))
                {
                    // Check if the file name exactly matches the base pattern
                    if (regexPattern.IsMatch(fileNameWithoutExtension + fileExtension))
                    {
                        // Construct the URL for the image
                        string relativePath = $"~/images/{type}/{Path.GetFileName(file)}";
                        string fullPath = baseUrl + VirtualPathUtility.ToAbsolute(relativePath).Replace("~", "");

                        return fullPath; // Return the URL of the matching image
                    }
                }
            }

            return null; // Return null if no matching image is found
        }

        [HttpGet]
        public dynamic GetMobuleAppLogoURL(string CompCode)
        {
            string LogoFile = "";
            try
            {
                var baseUrl = Request.RequestUri.GetLeftPart(UriPartial.Authority);
                string FldPath = System.Web.Hosting.HostingEnvironment.ApplicationPhysicalPath;
                //string FilePath = FldPath + BannerFolder;
                //DirectoryInfo d = new DirectoryInfo(FilePath);
                //FileInfo[] Files = d.GetFiles("*.*");
                LogoFile = baseUrl + "/Logo/" + CompCode + "/Logo.jpg";

            }
            catch
            {
                return new { Status = 0, Msg = "Failed", Data = "" };
            }
            return new { Status = 1, Msg = "Success", Data = LogoFile };
        }

        [HttpGet]
        public dynamic ValidateUser(string UName, string Pass, string CompCode, string FY)
        {
            User UList = new User(); int Status = 0; string StatusStr = string.Empty; string UType = string.Empty;
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); int UT = 0;
                string sql = string.Empty; DataTable DT1 = new DataTable(); SQLHELPER obj = new SQLHELPER(constr);


                sql = $"SELECT TOP 1 ISNULL(A.[User], '') as [Username],  ISNULL(A.[PWD], '') as [Password],  ISNULL(A.[UType], '') as [UType], ISNULL(A.[MCCode], 0) as MCCode, IsNull(B.[Name], '') as MCName FROM [ESUserMapping] A Left Join Master1 B On A.MCCode = B.Code WHERE A.[User] = '" + UName + "' AND A.[PWD] = '" + Pass + "' ";
                DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    Status = 1; StatusStr = "Valid"; UT = clsMain.MyInt(DT1.Rows[0]["UType"]);
                    UType = UT == 1 ? "Admin" : UT == 2 ? "SalesMan" : UT == 3 ? "Dispatcher" : UT == 4 ? "Godown" : UT == 5 ? "Packing" : "";

                    UList.UserName = clsMain.MyString(DT1.Rows[0]["Username"]);
                    UList.Pwd = clsMain.MyString(DT1.Rows[0]["Password"]);
                    UList.UTCode = clsMain.MyInt(DT1.Rows[0]["UType"]);
                    UList.UTName = clsMain.MyString(UType);
                    UList.MCCode = clsMain.MyInt(DT1.Rows[0]["MCCode"]);
                    UList.MCName = clsMain.MyString(DT1.Rows[0]["MCName"]);

                    //sql = $"SELECT Top 1  0 as Status, '' as Msg, * FROM [ESUserMapping] WHERE [User] = '" + UName + "' ";
                    //DT1 = obj.getTable(sql);
                    //if (DT1 == null )
                    //{
                    //    sql = $"SELECT Top 1 0 as Status, '' as Msg, * FROM [ESUserMapping] WHERE [PWD] = '" + Pass + "'";
                    //    DT3 = obj.getTable(sql);
                    //    if (DT3 == null)
                    //    {
                    //        Status = 0; StatusStr = "Wrong password. Try again or click ‘Forgot password’ to reset it. !";
                    //    }
                    //}
                    //else
                    //{
                    //    Status = 0; StatusStr = "Couldn't find your username and password. !";
                    //}
                }
                else
                {
                    Status = 0; StatusStr = "Couldn't find your username and password. !";
                }

            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = UList, };
            }
            return new { Status = Status, Msg = StatusStr, Data = UList };
        }

        [HttpGet]
        public dynamic GetCountryWiseDetailsList(string CompCode, string FY, int Type, int Code)
        {
            List<UnknowList> UNList = new List<UnknowList>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr); string sql = string.Empty;

                sql = $"Select IsNull([Code], 0) as Code, IsNull([Name], '') as Name From ESJSLCountryMaster Where MasterType = {Type} ";
                if (Code > 0) sql += $"And ParentGrp = {Code} "; sql += "Order By [Name]";

                DataTable DT1 = conobj.getTable(sql);
                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach(DataRow item in DT1.Rows)
                    {
                        UNList.Add(new UnknowList
                        {
                            Code = Convert.ToInt32(item["Code"]),
                            Name = clsMain.MyString(item["Name"])
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }

            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Success", Data = UNList };
        }

        [HttpGet]
        public dynamic GetDashboardTotalQuotationDetails(string CompCode, string FY, string Users)
        {
            List<Dashboard> dash = new List<Dashboard>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER con = new SQLHELPER(constr);

                string sql = $"Select TOP 1 IsNull(UType, 0) as UTCode, (CASE WHEN UType = 1 THEN 'Admin' WHEN UType = 2 THEN 'Salesman' WHEN UType = 3 THEN 'Dispatcher' WHEN UType = 4 THEN 'Godown' WHEN UType = 5 THEN 'Packing' ELSE '' END) as UTName, IsNull(MCCode, 0) as MCCode From ESUserMapping Where [user] = '{Users.Replace("'", "''")}' Group By UType, MCCode";
                DataTable DT = new SQLHELPER(constr).getTable(sql);

                if (DT != null && DT.Rows.Count > 0)
                {
                    int UTCode = Convert.ToInt32(DT.Rows[0]["UTCode"]);
                    string UName = clsMain.MyString(DT.Rows[0]["UTName"]);
                    int MCCode = Convert.ToInt32(DT.Rows[0]["MCCode"]);

                    switch (UTCode) 
                    { 
                        case 1:
                            sql = $"SELECT 'Quotation' AS Name, COUNT(VchCode) AS Value FROM ESJSLTRAN1 WHERE CREATEDBY = '{Users}' UNION ALL SELECT 'Pending Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 1 And CREATEDBY = '{Users}' UNION ALL SELECT 'Completed Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 111 UNION ALL SELECT 'Replacement', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 112 UNION ALL SELECT 'Invoice' , Count(*) FROM ESJSLTRAN1 WHERE QStatus = 112";
                            break;
                        case 2:
                            sql = $"SELECT 'Quotation' AS Name, COUNT(VchCode) AS Value FROM ESJSLTRAN1 WHERE CREATEDBY = '{Users}' UNION ALL SELECT 'Pending Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 1 And CREATEDBY = '{Users}' UNION ALL SELECT 'Completed Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 111 UNION ALL SELECT 'Replacement', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 112 UNION ALL SELECT 'Invoice' , Count(*) FROM ESJSLTRAN1 WHERE QStatus = 112";
                            break;
                        case 3:
                            sql = $"SELECT 'Quotation' AS Name, COUNT(VchCode) AS Value FROM ESJSLTRAN1 WHERE CREATEDBY = '{Users}' UNION ALL SELECT 'Pending Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 1 And CREATEDBY = '{Users}' UNION ALL SELECT 'Completed Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 111 UNION ALL SELECT 'Replacement', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 112 UNION ALL SELECT 'Invoice' , Count(*) FROM ESJSLTRAN1 WHERE QStatus = 112";
                            break;
                        case 4:
                            //sql = $"SELECT 'Pending' as [Name], Count(OrderId) as Value From (Select IsNull(A.[OrderID], 0) As OrderId from ESJSLRefTran A Inner join Master1 B On A.ItemCode = B.Code Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Where B.MasterType = 6 And B.CM6 = {MCCode} And A.RecType = 1 And T1.VchType = 108 And T1.QStatus = 1 Group by A.OrderID Having Sum(A.Qty) >= 0.01) A UNION ALL Select 'Completed' as [Name], Count(VchCode) as Value From ESJSLTRAN1 Where VchType = 109 And I1 = {MCCode}";
                            //sql = $"Select SUM(CASE WHEN A.BQty = 0 THEN 1 ELSE 0 END) AS [Value], 'Pending' as [Name] From (SELECT A.VchCode, A.RefNo, (IsNull(T.TotQty, 0) - (IsNull(TR.TransQty, 0) * (-1))) as BQty FROM (SELECT DISTINCT A.OrderId as VchCode, IsNull(A.[RefNo], '') as RefNo FROM ESJSLRefTran A Inner Join ESJSLTran1 B On A.OrderId = B.VchCode And A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method = 2 And B.[QStatus] = 1 And B.Cancelled <> 1) A LEFT JOIN (SELECT A.VchCode, A.RefNo, SUM(A.TQty) AS TotQty FROM (SELECT A.VchCode, A.RefNo, A.ItemCode, SUM(A.Qty) AS TQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 Where A.Method = 1 AND A.VchType = 108 AND M.CM6 = {MCCode} Group By A.VchCode, A.RefNo, A.ItemCode) A Group By A.VchCode, A.RefNo) T ON A.VchCode = T.VchCode AND A.RefNo = T.RefNo LEFT JOIN (SELECT A.OrderId AS VchCode, A.RefNo, SUM(A.TRQty) AS TransQty FROM (SELECT A.OrderId, A.RefNo, A.ItemCode, SUM(A.Qty) AS TRQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 Where A.Method = 2 AND A.VchType = 108 AND M.CM6 = {MCCode} Group By A.OrderId, A.RefNo, A.ItemCode) A Group By A.OrderId, A.RefNo) TR ON A.VchCode = TR.VchCode AND A.RefNo = TR.RefNo) A " +
                            //      "UNION ALL " +
                            //      $"Select SUM(CASE WHEN A.BQty > 0 THEN 1 ELSE 0 END) AS [Value], 'Completed' as [Name] From (SELECT A.VchCode, A.RefNo, (IsNull(T.TotQty, 0) - (IsNull(TR.TransQty, 0) * (-1))) as BQty FROM (SELECT DISTINCT A.OrderId as VchCode, IsNull(A.[RefNo], '') as RefNo FROM ESJSLRefTran A Inner Join ESJSLTran1 B On A.OrderId = B.VchCode And A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method = 2 And B.[QStatus] = 1 And B.Cancelled <> 1) A LEFT JOIN (SELECT A.VchCode, A.RefNo, SUM(A.TQty) AS TotQty FROM (SELECT A.VchCode, A.RefNo, A.ItemCode, SUM(A.Qty) AS TQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 Where A.Method = 1 AND A.VchType = 108 AND M.CM6 = {MCCode} Group By A.VchCode, A.RefNo, A.ItemCode) A Group By A.VchCode, A.RefNo) T ON A.VchCode = T.VchCode AND A.RefNo = T.RefNo LEFT JOIN (SELECT A.OrderId AS VchCode, A.RefNo, SUM(A.TRQty) AS TransQty FROM (SELECT A.OrderId, A.RefNo, A.ItemCode, SUM(A.Qty) AS TRQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 Where A.Method = 2 AND A.VchType = 108 AND M.CM6 = {MCCode} Group By A.OrderId, A.RefNo, A.ItemCode) A Group By A.OrderId, A.RefNo) TR ON A.VchCode = TR.VchCode AND A.RefNo = TR.RefNo) A ";

                            sql = $"WITH Totals AS (SELECT A.VchCode, A.RefNo, ISNULL(T.TotQty, 0) AS TotQty FROM (SELECT DISTINCT A.OrderId AS VchCode, ISNULL(A.[RefNo], '') AS RefNo FROM ESJSLRefTran A INNER JOIN ESJSLTran1 B ON A.OrderId = B.VchCode AND A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method IN (1,2) AND B.[QStatus] = 1 AND B.Cancelled <> 1) A INNER JOIN (SELECT A.VchCode, A.RefNo, SUM(A.TQty) AS TotQty FROM (SELECT A.VchCode, A.RefNo, A.ItemCode, SUM(A.Qty) AS TQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 WHERE A.Method = 1 AND A.VchType = 108 AND M.CM6 = {MCCode} GROUP BY A.VchCode, A.RefNo, A.ItemCode) A GROUP BY A.VchCode, A.RefNo) T ON A.VchCode = T.VchCode AND A.RefNo = T.RefNo), " +
                                  $"Transfers AS(SELECT A.VchCode, A.RefNo, ISNULL(TR.TransQty, 0) AS TransQty FROM(SELECT DISTINCT A.OrderId AS VchCode, ISNULL(A.[RefNo], '') AS RefNo FROM ESJSLRefTran A INNER JOIN ESJSLTran1 B ON A.OrderId = B.VchCode AND A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method IN (1, 2) AND B.[QStatus] = 1 AND B.Cancelled <> 1) A INNER JOIN(SELECT A.OrderId AS VchCode, A.RefNo, SUM(A.TRQty) AS TransQty FROM (SELECT A.OrderId, A.RefNo, A.ItemCode, (IsNull(SUM(A.Qty), 0) * (-1)) AS TRQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 WHERE A.Method = 2 AND A.VchType = 108 AND M.CM6 = {MCCode} GROUP BY A.OrderId, A.RefNo, A.ItemCode) A GROUP BY A.OrderId, A.RefNo) TR ON A.VchCode = TR.VchCode AND A.RefNo = TR.RefNo)" +
                                  $"SELECT CASE WHEN T.TotQty = ISNULL(Tr.TransQty, 0) THEN 'Completed' ELSE 'Pending' END AS [Name], COUNT(*) As [Value] FROM Totals T LEFT JOIN Transfers Tr ON T.VchCode = Tr.VchCode AND T.RefNo = Tr.RefNo GROUP BY CASE WHEN T.TotQty = (ISNULL(Tr.TransQty, 0)) THEN 'Completed' ELSE 'Pending' END";
                            break;
                        case 5:
                            sql = $"SELECT 'Quotation' AS Name, COUNT(VchCode) AS Value FROM ESJSLTRAN1 WHERE CREATEDBY = '{Users}' UNION ALL SELECT 'Pending Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 1 And CREATEDBY = '{Users}' UNION ALL SELECT 'Completed Orders', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 111 UNION ALL SELECT 'Replacement', COUNT(*) FROM ESJSLTRAN1 WHERE QStatus = 112 UNION ALL SELECT 'Invoice' , Count(*) FROM ESJSLTRAN1 WHERE QStatus = 112";
                            break;
                    }
                    DataTable DT1 = con.getTable(sql);

                    if (DT1 != null && DT1.Rows.Count > 0)
                    {
                        foreach (DataRow item in DT1.Rows)
                        {
                            dash.Add(new Dashboard
                            {
                                Name = item["Name"].ToString().Trim(),
                                Values = clsMain.MyInt(item["Value"])
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = dash };
            }
            return new { Status = 1, Msg = "Success", Data = dash };
        }

        [HttpGet]
        public dynamic GetCategory(string CompCode, string FY)
        {
            List<Category> SPT = new List<Category>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                string sql = ""; //string img = "https://random.imagecdn.app/500/500";

                sql = $"Select Distinct T.I1 as [Code], M1.[Name] From ESAttributesMappingConfig T left Join Master1 M1 On T.I1 = M1.Code Order by M1.Name";
                DataTable DT1 = Provider == 1 ? new OLEDBHELPER(constr).getTable(sql) : new SQLHELPER(constr).getTable(sql);
                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        string images = GetSingleImagePath(Convert.ToString("Categorys"), clsMain.MyString(item["Name"]));

                        Category TM = new Category();
                        TM.Code = clsMain.MyInt(item["Code"]);
                        TM.Name = clsMain.MyString(item["Name"]);
                        TM.Images = images;
                        SPT.Add(TM);
                    }
                }
            }
            catch (Exception err)
            {
                return new { Status = 0, Msg = err.Message.ToString(), Data = SPT };
            }
            return new { Status = 1, Msg = "Success", Data = SPT };
        }

        [HttpGet]
        public dynamic GetProducts(int GrpCode, string CompCode, string FY)
        {
            List<GetProduct> PList = new List<GetProduct>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); //string img = "https://random.imagecdn.app/500/500";
                SQLHELPER obj = new SQLHELPER(constr);
                string SubGrpStr = GrpCode > 0 ? SubGrpStr = GetAllItemSubGroups(GrpCode, constr) : "";

                string sql = $"Select M1.ParentGrp as Code,M2.Name FROM MASTER1 M1 Inner Join Master1 M2 On M1.ParentGrp = M2.Code WHERE M1.MASTERTYPE = 6";
                if (SubGrpStr.Length > 0) sql += $" AND M1.ParentGrp In (" + SubGrpStr + ")";
                sql += $" Group By M1.ParentGrp,M2.Name Order By M2.Name";
                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow grp in DT1.Rows)
                    {
                        int rootCode = Convert.ToInt32(grp["Code"]);
                        string rootName = clsMain.MyString(grp["Name"]);
                        object price = GetProductMinAndMaxPrice(constr, rootCode);
                        JObject priceObject = JObject.FromObject(price);
                        string images = GetSingleImagePath(Convert.ToString("Products"), clsMain.MyString(grp["Name"]));

                        // Find or create the root data object
                        GetProduct rootData = PList.FirstOrDefault(rd => rd.Code == rootCode);
                        if (rootData == null)
                        {
                            rootData = new GetProduct
                            {
                                Code = rootCode,
                                Name = rootName,
                                MinPrice = priceObject["MinPrice"].ToObject<decimal>(),
                                MaxPrice = priceObject["MaxPrice"].ToObject<decimal>(),
                                Images = images,
                                //DataItem = new List<DataItem>()
                                Mendatories = new List<Mendatory>(),
                                NonMendatories = new List<NonMendatory>()
                            };
                            PList.Add(rootData);
                        }

                        SQLHELPER obj1 = new SQLHELPER(constr); string sql1 = string.Empty;
                        //string IGrpStr = GrpCode > 0 ? GrpCode.ToString() + "," + Convert.ToInt32(grp["Code"]).ToString() : Convert.ToInt32(grp["Code"]).ToString(); SubGrpStr = GetAllItemSubGroups(Convert.ToInt32(grp["Code"]), constr); //SubGrpStr.ToString() + "," +
                        string IgrpStr = GetAllParentGroups(Convert.ToInt32(grp["Code"]), constr);

                        sql1 = $"Select A.[SrNo],A.[I2] as ATCode,M1.[Name] as Attribute,A.[I3] as SATCode,M2.[Name] as AttributeVal,A.I4 as AMendatory From (Select B.SrNo,B.I2,E.I3,B.I4 From (Select Top 1 I1 as MIgrpCode," + Convert.ToInt32(grp["Code"]).ToString() + " as IgrpCode from ESAttributesMappingConfig Where I1 in (" + IgrpStr + ") Group By I1) A Inner Join ESAttributesMappingConfig B On A.MIgrpCode = B.I1 Inner Join Master1 M1 On A.IgrpCode = M1.ParentGrp Inner Join ESAttributesMappingConfig E On M1.Code = E.I1 And E.MasterType = 101 And B.[I2] = E.[I2] Where B.[I4] = 1 Group By A.MIgrpCode,B.SrNo,B.I2,E.I3,B.I4 Union All Select B.SrNo,B.I2,M1.Code as I3,B.I4 From (Select Top 1 I1 as MIgrpCode," + Convert.ToInt32(grp["Code"]).ToString() + " as IgrpCode from ESAttributesMappingConfig Where I1 in (" + IgrpStr + ") Group By I1) A Inner Join ESAttributesMappingConfig B On A.MIgrpCode = B.I1 Inner Join ESMaster1 M1 On B.I2 = M1.I1 Where B.I4 = 0 Group By B.SrNo,B.I2,M1.Code,B.I4) A Inner Join ESMaster1 M1 On A.I2 = M1.Code Inner Join ESMaster1 M2 On A.I3 = M2.Code Order By A.SrNo";
                        DataTable DT2 = obj1.getTable(sql1);
                        if (DT2 != null && DT2.Rows.Count > 0)
                        {
                            foreach (DataRow row in DT2.Rows)
                            {
                                string dataItemName = row["Attribute"].ToString();
                                int dataItemCode = Convert.ToInt32(row["ATCode"]);
                                int subDataCode = Convert.ToInt32(row["SATCode"]);
                                string subDataName = row["AttributeVal"].ToString();
                                int AMendatory = clsMain.MyInt(row["AMendatory"]);

                                //// Find or create the data item object
                                //DataItem dataItem = rootData.DataItem.FirstOrDefault(di => di.Code == dataItemCode);
                                //if (dataItem == null)
                                //{
                                //    dataItem = new DataItem
                                //    {
                                //        Code = dataItemCode,
                                //        Name = dataItemName,
                                //        Mendatory = AMendatory,
                                //        SubData = new List<SubData>()
                                //    };
                                //    rootData.DataItem.Add(dataItem);
                                //}

                                if (AMendatory == 1)
                                {
                                    Mendatory mendatory = rootData.Mendatories.FirstOrDefault(di => di.Code == dataItemCode);
                                    if (mendatory == null)
                                    {
                                        mendatory = new Mendatory
                                        {
                                            Code = dataItemCode,
                                            Name = dataItemName,
                                            SubData = new List<SubData>()
                                        };
                                        rootData.Mendatories.Add(mendatory);
                                    }

                                    // Add the sub data object
                                    if (!mendatory.SubData.Any(sd => sd.Code == subDataCode))
                                    {
                                        mendatory.SubData.Add(new SubData
                                        {
                                            Code = subDataCode,
                                            Name = subDataName
                                        });
                                    }
                                }
                                else
                                {
                                    NonMendatory nonMendatory = rootData.NonMendatories.FirstOrDefault(di => di.Code == dataItemCode);
                                    if (nonMendatory == null)
                                    {
                                        nonMendatory = new NonMendatory
                                        {
                                            Code = dataItemCode,
                                            Name = dataItemName,
                                            SubData = new List<SubData>()
                                        };
                                        rootData.NonMendatories.Add(nonMendatory);
                                    }

                                    // Add the sub data object
                                    if (!nonMendatory.SubData.Any(sd => sd.Code == subDataCode))
                                    {
                                        nonMendatory.SubData.Add(new SubData
                                        {
                                            Code = subDataCode,
                                            Name = subDataName
                                        });
                                    }
                                }
                            }
                        }
                    }
                }

            }
            catch (Exception err)
            {
                return new { Status = 0, Msg = err.Message.ToString(), Data = PList };
            }
            return new { Status = 1, Msg = "Success", Data = PList };
        }

        [HttpGet]
        public dynamic GetSearchAllProducts(string CompCode, string FY)
        {
            List<GetSerchProducts> SPLIST = new List<GetSerchProducts>();
            try
            {
                string sql = string.Empty;
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER obj = new SQLHELPER(constr);

                sql = "Select M1.ParentGrp as Code,M2.Name FROM MASTER1 M1 Inner Join Master1 M2 On M1.ParentGrp = M2.Code WHERE M1.MASTERTYPE = 6 Group By M1.ParentGrp,M2.Name Order By M2.Name";
                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow row in DT1.Rows)
                    {
                        //GetSerchProducts SP = new GetSerchProducts();
                        SPLIST.Add(new GetSerchProducts
                        {
                            Code = clsMain.MyInt(row["Code"]),
                            Name = clsMain.MyString(row["Name"])
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = SPLIST };
                }
            }
            catch (Exception ERR)
            {
                return new { Status = 0, Msg = ERR.Message.ToString(), Data = SPLIST };
            }
            return new { Status = 1, Msg = "Success", Data = SPLIST };
        }

        [HttpGet]
        public dynamic GetProductsFilterWise(int IGrpCode, string CompCode, string FY)
        {
            List<GetProductsFiltWise> PList = new List<GetProductsFiltWise>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); //string img = "https://random.imagecdn.app/500/500";
                SQLHELPER obj = new SQLHELPER(constr);
                string IgrpStr = GetAllParentGroups(IGrpCode, constr);
                object price = GetProductMinAndMaxPrice(constr, IGrpCode);
                JObject priceObject = JObject.FromObject(price);
                string igrpname = GetBusyMasterCode2NameIfExist(constr, IGrpCode, 5); 
                var images = GetMultipleImagesPath(Convert.ToString("Products"), clsMain.MyString(igrpname));
                var sizeChartData = GetProductSubAttribute(constr, IGrpCode);
                var sizeCharts = sizeChartData?.Data as List<SizeChart> ?? new List<SizeChart>();

                string sql = $"Select A.[SrNo],A.[I2] as ATCode,M1.[Name] as Attribute,A.[I3] as SATCode,M2.[Name] as AttributeVal,A.I4 as AMendatory From (Select B.SrNo,B.I2,E.I3,B.I4 From (Select Top 1 I1 as MIgrpCode," + IGrpCode + " as IgrpCode from ESAttributesMappingConfig Where I1 in (" + IgrpStr + ") Group By I1) A Inner Join ESAttributesMappingConfig B On A.MIgrpCode = B.I1 Inner Join Master1 M1 On A.IgrpCode = M1.ParentGrp Inner Join ESAttributesMappingConfig E On M1.Code = E.I1 And E.MasterType = 101 And B.[I2] = E.[I2] Where B.[I4] = 1 Group By A.MIgrpCode,B.SrNo,B.I2,E.I3,B.I4 Union All Select B.SrNo,B.I2,M1.Code as I3,B.I4 From (Select Top 1 I1 as MIgrpCode," + IGrpCode + " as IgrpCode from ESAttributesMappingConfig Where I1 in (" + IgrpStr + ") Group By I1) A Inner Join ESAttributesMappingConfig B On A.MIgrpCode = B.I1 Inner Join ESMaster1 M1 On B.I2 = M1.I1 Where B.I4 = 0 Group By B.SrNo,B.I2,M1.Code,B.I4) A Inner Join ESMaster1 M1 On A.I2 = M1.Code Inner Join ESMaster1 M2 On A.I3 = M2.Code Order By A.SrNo";
                //string sql = $"Select A.[SrNo],A.[I2] as ATCode,M1.[Name] as Attribute,A.[I3] as SATCode,M2.[Name] as AttributeVal,A.I4 as AMendatory From (Select B.SrNo,B.I2,E.I3,B.I4 From (Select Top 1 I1 as IgrpCode from ESAttributesMappingConfig Where I1 = {IGrpCode} Group By I1) A Inner Join ESAttributesMappingConfig B On A.IgrpCode = B.I1 Inner Join Master1 M1 On A.IgrpCode = M1.ParentGrp Inner Join ESAttributesMappingConfig E On M1.Code = E.I1 And E.MasterType = 101 And B.[I2] = E.[I2] Where B.[I4] = 1 Group By A.IgrpCode,B.SrNo,B.I2,E.I3,B.I4 Union All Select B.SrNo,B.I2,M1.Code as I3,B.I4 From (Select Top 1 I1 as IgrpCode from ESAttributesMappingConfig Where I1 = {IGrpCode} Group By I1) A Inner Join ESAttributesMappingConfig B On A.IgrpCode = B.I1 Inner Join ESMaster1 M1 On B.I2 = M1.I1 Where B.I4 = 0 Group By B.SrNo,B.I2,M1.Code,B.I4) A Inner Join ESMaster1 M1 On A.I2 = M1.Code Inner Join ESMaster1 M2 On A.I3 = M2.Code Order By A.SrNo";
                DataTable DT2 = obj.getTable(sql);
                if (DT2 != null && DT2.Rows.Count > 0)
                {
                    foreach (DataRow row in DT2.Rows)
                    {
                        int rootCode = Convert.ToInt32(IGrpCode);
                        string dataItemName = row["Attribute"].ToString();
                        int dataItemCode = Convert.ToInt32(row["ATCode"]);
                        int subDataCode = Convert.ToInt32(row["SATCode"]);
                        string subDataName = row["AttributeVal"].ToString();
                        int AMendatory = clsMain.MyInt(row["AMendatory"]);

                        // Find or create the root data object
                        GetProductsFiltWise rootData = PList.FirstOrDefault(rd => rd.Code == rootCode);
                        if (rootData == null)
                        {
                            rootData = new GetProductsFiltWise
                            {
                                Code = rootCode,
                                Name = igrpname,
                                MinPrice = priceObject["MinPrice"].ToObject<decimal>(),
                                MaxPrice = priceObject["MaxPrice"].ToObject<decimal>(),
                                Images = images,
                                SizeCharts = sizeCharts,
                                //DataItem = new List<DataItem>()
                                Mendatories = new List<Mendatory>(),
                                NonMendatories = new List<NonMendatory>()
                            };
                            PList.Add(rootData);
                        }

                        // Find or create the data item object
                        //DataItem dataItem = rootData.DataItem.FirstOrDefault(di => di.Code == dataItemCode);
                        //if (dataItem == null)
                        //{
                        //    dataItem = new DataItem
                        //    {
                        //        Code = dataItemCode,
                        //        Name = dataItemName,
                        //        Mendatory = AMendatory,
                        //        SubData = new List<SubData>()
                        //    };
                        //    rootData.DataItem.Add(dataItem);
                        //}

                        if (AMendatory == 1)
                        {
                            // Find or create the data item object
                            Mendatory mendatories = rootData.Mendatories.FirstOrDefault(di => di.Code == dataItemCode);
                            if (mendatories == null)
                            {
                                mendatories = new Mendatory
                                {
                                    Code = dataItemCode,
                                    Name = dataItemName,
                                    SubData = new List<SubData>()
                                };
                                rootData.Mendatories.Add(mendatories);
                            }

                            // Add the sub data object
                            if (!mendatories.SubData.Any(sd => sd.Code == subDataCode))
                            {
                                mendatories.SubData.Add(new SubData
                                {
                                    Code = subDataCode,
                                    Name = subDataName
                                });
                            }
                        }
                        else
                        {
                            // Find or create the data item object
                            NonMendatory nonMendatory = rootData.NonMendatories.FirstOrDefault(di => di.Code == dataItemCode);
                            if (nonMendatory == null)
                            {
                                nonMendatory = new NonMendatory
                                {
                                    Code = dataItemCode,
                                    Name = dataItemName,
                                    SubData = new List<SubData>()
                                };
                                rootData.NonMendatories.Add(nonMendatory);
                            }

                            // Add the sub data object
                            if (!nonMendatory.SubData.Any(sd => sd.Code == subDataCode))
                            {
                                nonMendatory.SubData.Add(new SubData
                                {
                                    Code = subDataCode,
                                    Name = subDataName
                                });
                            }
                        }
                    }
                }
                else
                {
                    PList.Add(new GetProductsFiltWise
                    {
                        Code = IGrpCode,
                        Name = igrpname,
                        MinPrice = priceObject["MinPrice"].ToObject<decimal>(),
                        MaxPrice = priceObject["MaxPrice"].ToObject<decimal>(),
                        Images = images,
                        SizeCharts = sizeCharts,
                        //DataItem = new List<DataItem>()
                        Mendatories = new List<Mendatory>(),
                        NonMendatories = new List<NonMendatory>()
                    });
                }

            }
            catch (Exception err)
            {
                return new { Status = 0, Msg = err.Message.ToString(), Data = PList };
            }
            return new { Status = 1, Msg = "Success", Data = PList };
        }

        [HttpGet]
        public dynamic GetProductSubAttribute(string constr, int IGrpCode)
        {
            var lsize = new List<SizeChart>();
            try
            {
                string sql = $"select IsNull(A.[I2], 0) as UCode, IsNull(B.[Name], '') as UName, IsNull(A.[M1], '') as Size, IsNull(A.[M2], '') as Box From ESAttributesMappingConfig A Inner Join ESMaster1 B On A.I2 = B.Code Where A.I1 = {IGrpCode} And A.MasterType = 2 Group By A.[I2], B.[Name], A.[M1], A.[M2] Order By B.[Name]";
                DataTable DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        lsize.Add(new SizeChart
                        {
                            WCode = Convert.ToInt32(item["UCode"]),
                            WName = Convert.ToString(item["UName"]).Trim(),
                            Size = Convert.ToString(item["Size"]).Trim(),
                            Box = Convert.ToString(item["Box"]).Trim()
                        });
                    }
                }
            }
            catch
            {

            }
            return new { Data = lsize };
        }

        [HttpPost]
        public dynamic GetProductItemsStock(dynamic filters)
        {
            List<GetItemsDTStock> productList = new List<GetItemsDTStock>();
            try
            {
                JObject filterObject = JObject.FromObject(filters);
                var CompCode = filterObject["CompCode"]?.ToObject<string>();
                var FY = filterObject["FY"]?.ToObject<string>();
                var AccCode = filterObject["AccCode"]?.ToObject<int>();
                string formattedDate = DateTime.Now.ToString("dd-MMM-yyyy");
                //string img = "https://random.imagecdn.app/500/500";
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER obj = new SQLHELPER(constr); int R = 0;
                string OptFld = GetConfigeOptionalField(constr, 1);

                // Get GrpCode from filters
                var grpCode = filterObject["GrpCode"]?.ToObject<int>();
                if (grpCode == null || grpCode == 0) { throw new Exception("GrpCode is required in filters."); }

                // Get HCode and ATCode from filters
                var items = filterObject["Items"]?.ToObject<List<JObject>>();
                if (items == null || items.Count == 0) { throw new Exception("Items are required in filters."); }

                var hCodes = new List<int>();
                var atCodes = new List<int>();

                foreach (var item in items)
                {
                    var hCode = item["HCode"]?.ToObject<int>() ?? 0;
                    var atCode = item["ATCode"]?.ToObject<int>() ?? 0;
                    var mendatory = item["Mendatory"]?.ToObject<int>() ?? 0;

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    if (hCode != null && atCode != null && mendatory != 0)
#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                    {
                        hCodes.Add(Convert.ToInt32(hCode));
                        atCodes.Add(Convert.ToInt32(atCode));
                    }
                }

                if (hCodes.Count == 0 || atCodes.Count == 0) { throw new Exception("Attribute And Subattribute Like 'HCode And ATCode are required' in Items."); }
                string optFldCase = string.IsNullOrEmpty(OptFld) ? "''" : $"CASE WHEN LEN({OptFld}) > 0 THEN M1.{OptFld} ELSE '' END";

                // Build the SQL query
                string sql = $"Select Top 1 A.MasterCode as ItemCode, M.[Name] as ItemName, M.[CM1] as UCode,M2.[Name] as UName, M.[D2] as Price, {optFldCase} as Brand, Sum(A.Qty) as Stock From (Select A.MasterCode, A.D1 as Qty From Folio1 A Where A.MasterType = 6 Union All Select MasterCode1, IsNull(Sum(Value1),0) as Qty From Tran2 A inner Join Master1 B On A.MasterCode1 = B.Code And A.MasterCode2 = B.CM6 Where A.Date <= '{formattedDate}' And A.RecType = 2 Group By MasterCode1) A inner Join Master1 M On A.MasterCode = M.Code Left Join MasterAddressInfo M1 On A.MasterCode = M1.MasterCode Left Join Master1 M2 on M.[CM1] = M2.Code";
                for (int i = 0; i < atCodes.Count; i++) { R++; sql += $" Inner Join ESAttributesMappingConfig E{R} On M.Code = E{R}.I1 AND E{R}.MasterType = 101"; }
                sql += $" Where M.[ParentGrp] = {grpCode}"; R = 0;
                for (int i = 0; i < atCodes.Count; i++) { R++; sql += $" And E{R}.I3 = {atCodes[i]}"; }                                     //sql += $"AND E.I2 IN ({string.Join(",", hCodes)}) AND E.I3 IN ({string.Join(",", atCodes)}) " +
                sql += string.IsNullOrEmpty(OptFld) ? $" Group By A.[MasterCode], M.[Name], M.[CM1],M2.[Name], M.[D2] Order By M.[Name]" : $" Group By A.[MasterCode], M.[Name], M.[CM1],M2.[Name], M.[D2], {OptFld} Order By M.[Name]";

                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow row in DT1.Rows)
                    {
                        var priceDisc = new ItemDiscount(); priceDisc = GetItemCategoryWisePriceAndDiscount(constr, Convert.ToInt32(AccCode), Convert.ToInt32(row["ItemCode"]));
                        var images = GetMultipleImagesPath(Convert.ToString("Items"), clsMain.MyString(row["ItemName"]));

                        productList.Add(new GetItemsDTStock
                        {
                            ItemName = row["ItemName"].ToString(),
                            ItemCode = Convert.ToInt32(row["ItemCode"]),
                            UName = row["UName"].ToString(),
                            UCode = Convert.ToInt32(row["UCode"]),
                            Stock = Convert.ToDecimal(row["Stock"]),
                            Qty = Convert.ToDecimal(1),
                            Images = images ?? new List<string>(),
                            Brand = Convert.ToString(row["Brand"]),
                            ItemDiscounts = priceDisc
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Item Not Found !!!", Data = productList };
                }
            }
            catch (Exception err)
            {
                return new { Status = 0, Msg = err.Message.ToString(), Data = productList };
            }
            return new { Status = 1, Msg = "Success", Data = productList };
        }

        private ItemDiscount GetItemCategoryWisePriceAndDiscount(string Constr, int AccCode, int ItemCode)
        {
            var distPrice = new ItemDiscount();
            try
            {
                string sql = string.Empty;
                if (AccCode == 0)
                {
                    sql = $"Select ISNULL(M2.[D1], 0) as Price, (ISNULL(M2.[D3], 0) - ISNULL(M2.[D3], 0) * ISNULL(M2.[D2], 0) / 100) as MRP, ISNULL(M2.[D2], 0) as Discount From Master1 M1 Inner Join MasterSupport M2 On M1.Code = M2.MasterCode Where M1.MasterType = 6 And M1.Code = {ItemCode} And M2.[I1] = 101 Group By M2.D1, M2.D2, M2.D3";
                }
                else
                {
                    sql = $"SELECT ISNULL(M1.[MasterCode], 0) as ItemCode, ISNULL(M2.[Name], '') as ItemName, ISNULL(M1.[D1], 0) as Price, (ISNULL(M1.[D3], 0) - ISNULL(M1.[D3], 0) * ISNULL(M1.[D2], 0) / 100) as MRP, ISNULL(M1.[D2], 0) as Discount FROM ESJSLCustomer A LEFT JOIN MasterSupport M1 ON M1.MasterCode = {ItemCode} and M1.I1 = CASE WHEN ISNULL(A.CustType, 0) = 1 THEN 101 WHEN ISNULL(A.CustType, 0) = 2 THEN 102 WHEN ISNULL(A.CustType, 0) = 3 THEN 103 ELSE 101 END Inner Join Master1 M2 On M1.MasterCode = M2.Code And M2.MasterType = 6 WHERE M1.MasterCode = {ItemCode} And A.[Code] = {AccCode} Group By M1.[MasterCode], M2.[Name], M1.[D1], M1.[D2], M1.[D3]";
                }
                DataTable DT1 = new SQLHELPER(Constr).getTable(sql);
                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    distPrice.Price = Convert.ToDecimal(DT1.Rows[0]["Price"]);
                    distPrice.MRP = Convert.ToDecimal(DT1.Rows[0]["MRP"]);
                    distPrice.Discount = Convert.ToDouble(DT1.Rows[0]["Discount"]);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching Item Category Wise Price And Discount: " + ex.Message);
            }
            return distPrice;
        }

        [HttpPost]
        public dynamic GetItemCategoryWisePriceAndDiscountList(ListOfItem obj, string CompCode, string FY, int AccCode)
        {
            List<ItemWithDiscount> items = new List<ItemWithDiscount>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                foreach(var item in obj.ItemDetails)
                {
                    var ItemCode = item.ItemCode;

                    if (ItemCode != null)
                    {
                        var priceDisc = new ItemDiscount();
                        priceDisc = GetItemCategoryWisePriceAndDiscount(constr, Convert.ToInt32(AccCode), Convert.ToInt32(ItemCode));

                        items.Add(new ItemWithDiscount
                        {
                            ItemCode = Convert.ToInt32(ItemCode),
                            ItemName = clsMain.MyString(item?.ItemName),
                            ItemDiscount = priceDisc,
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Success", Data = items };
        }

        [HttpGet]
        public dynamic GetBusyBillSundryList(string CompCode, string FY, int Code)
        {
            List<BillSundrylist> lst = new List<BillSundrylist>();
            int IGCode = 0; double IGST = 0; double CGST = 0; double SGST = 0;
            try
            {
                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
                string queryStr = "";
                DataTable table = new DataTable();
                if (Provider == 1)
                {
                    queryStr = "Select iif(isnull(D1),0,D1) as IGST,iif(isnull(D4),0,D4) as CGST,iif(isnull(D5),0,D5) as SGST from Master1 Where Code = " + Code + "";
                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
                }
                else
                {
                    queryStr = "Select isnull(D1,01) as IGST,isnull(D4,0) as CGST,isnull(D5,0) as SGST from Master1 Where Code = " + Code + "";
                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
                }
                if (table != null && table.Rows.Count > 0)
                {
                    IGST = clsMain.MyDouble(table.Rows[0]["IGST"]);
                    CGST = clsMain.MyDouble(table.Rows[0]["CGST"]);
                    SGST = clsMain.MyDouble(table.Rows[0]["SGST"]);
                }
                if (Provider == 1)
                {
                    queryStr = "Select Name, Code,0 as D1,I1 AS BSType ,IIF(I1 = 1, 'Additive', IIF(i1 <> 1, 'Subtractive')) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,IIF(I2 = 1, 'Percentage', IIF(I2 = 0, 'Absoulte Amt', IIF(I2 = 2, 'Per Main Qty', IIF(I2 = 3, 'Per Alt Qty')))) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
                }
                else
                {
                    queryStr = "Select Name,Code,I1 BSType ,(case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
                }
                if (table != null && table.Rows.Count > 0)
                {
                    foreach (DataRow dr1 in table.Rows)
                    {
                        BillSundrylist lstObj = new BillSundrylist();

                        lstObj.Code = clsMain.MyInt(dr1["Code"]);
                        lstObj.Name = clsMain.MyString(dr1["Name"]);
                        lstObj.BSType = clsMain.MyInt(dr1["BSType"]);
                        lstObj.BSTypeName = clsMain.MyString(dr1["BSTypeName"]);
                        lstObj.CalBasis = clsMain.MyInt(dr1["CalBasis"]);
                        lstObj.CalBasisName = clsMain.MyString(dr1["CalBasisName"]);
                        lstObj.AppliedOn = clsMain.MyInt(dr1["AppliedOn"]);
                        lstObj.BSNature = clsMain.MyInt(dr1["BSNature"]);
                        lstObj.BSAmount = 0;
                        lstObj.PercentOperatedOn = 0;
                        if (lstObj.BSNature == 51 || lstObj.BSNature == 52 || lstObj.BSNature == 53)
                        {
                            if (lstObj.BSNature == 51)
                            {
                                if (SGST > 0) { lstObj.BSPercent = SGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
                            }
                            if (lstObj.BSNature == 52)
                            {
                                if (CGST > 0) { lstObj.BSPercent = CGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
                            }
                            if (lstObj.BSNature == 53)
                            {
                                if (IGST > 0) { lstObj.BSPercent = IGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
                            }
                        }

                        else
                        {
                            lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]);
                        }

                        lst.Add(lstObj);
                    }
                }
            }
            catch
            {
                return lst;
            }
            return lst;
        }

        [HttpGet]
        public dynamic GetBusyBillSundryList1(string CompCode, string FY, int Vchtype, int SeriesCode, int Code)
        {
            List<BillSundrylist> lst = new List<BillSundrylist>();
            int IGCode = 0;
            double IGST = 0;
            double CGST = 0;
            double SGST = 0;

            try
            {
                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
                string queryStr = "";
                DataTable table = new DataTable();
                if (Provider == 1)
                {
                    queryStr = "Select iif(isnull(D1),0,D1) as IGST,iif(isnull(D4),0,D4) as CGST,iif(isnull(D5),0,D5) as SGST from Master1 Where Code = " + Code + "";
                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
                }
                else
                {
                    queryStr = "Select isnull(D1,01) as IGST,isnull(D4,0) as CGST,isnull(D5,0) as SGST from Master1 Where Code = " + Code + "";
                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
                }
                if (table != null && table.Rows.Count > 0)
                {
                    IGST = clsMain.MyDouble(table.Rows[0]["IGST"]);
                    CGST = clsMain.MyDouble(table.Rows[0]["CGST"]);
                    SGST = clsMain.MyDouble(table.Rows[0]["SGST"]);
                }

                if (Provider == 1)
                {
                    queryStr = "Select B.Code,B.Name,B.D1,B.BSType,B.BSTypeName,A.D1 as BSPercent,B.CalBasis,B.CalBasisName,B.AppliedOn,B.BSNature From(Select SrNo, MasterCode3, D1 from Tran10 Where Mastercode1 = " + SeriesCode + " And Mastercode2 = " + Code + " And Vchtype = " + Vchtype + ") A Left Join (Select Name, Code,0 as D1,I1 AS BSType ,IIF(I1 = 1, 'Additive', IIF(i1 <> 1, 'Subtractive')) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,IIF(I2 = 1, 'Percentage', IIF(I2 = 0, 'Absoulte Amt', IIF(I2 = 2, 'Per Main Qty', IIF(I2 = 3, 'Per Alt Qty')))) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9) B On A.MasterCode3 = B.Code Order By A.SrNo";
                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
                }
                else
                {
                    queryStr = "Select B.Code,B.Name,B.D1,B.BSType,B.BSTypeName,A.D1 as BSPercent,B.CalBasis,B.CalBasisName,B.AppliedOn,B.BSNature From(Select SrNo, MasterCode3, D1 from Tran10 Where Mastercode1 = " + SeriesCode + " And Mastercode2 = " + Code + " And Vchtype = " + Vchtype + ") A Left Join (Select Name, Code, 0 as D1, I1 BSType, (case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9) B On A.MasterCode3 = B.Code Order By A.SrNo";
                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
                }
                //if (Provider == 1)
                //{
                //    queryStr = "Select Name,Code,I1 BSType ,(case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
                //    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
                //}
                //else
                //{
                //    queryStr = "Select Name,Code,I1 BSType ,(case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
                //    table = new SQLHELPER(ConnectionString).getTable(queryStr);
                //}
                if (table != null && table.Rows.Count > 0)
                {
                    foreach (DataRow dr1 in table.Rows)
                    {
                        BillSundrylist lstObj = new BillSundrylist();

                        lstObj.Code = clsMain.MyInt(dr1["Code"]);
                        lstObj.Name = clsMain.MyString(dr1["Name"]);
                        lstObj.BSType = clsMain.MyInt(dr1["BSType"]);
                        lstObj.BSTypeName = clsMain.MyString(dr1["BSTypeName"]);
                        lstObj.CalBasis = clsMain.MyInt(dr1["CalBasis"]);
                        lstObj.CalBasisName = clsMain.MyString(dr1["CalBasisName"]);
                        lstObj.AppliedOn = clsMain.MyInt(dr1["AppliedOn"]);
                        lstObj.BSNature = clsMain.MyInt(dr1["BSNature"]);
                        lstObj.BSAmount = 0;
                        lstObj.PercentOperatedOn = 0;
                        if (lstObj.BSNature == 51 || lstObj.BSNature == 52 || lstObj.BSNature == 53)
                        {
                            if (lstObj.BSNature == 51)
                            {
                                if (SGST > 0) { lstObj.BSPercent = SGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
                            }
                            if (lstObj.BSNature == 52)
                            {
                                if (CGST > 0) { lstObj.BSPercent = CGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
                            }
                            if (lstObj.BSNature == 53)
                            {
                                if (IGST > 0) { lstObj.BSPercent = IGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
                            }
                        }

                        else
                        {
                            if (lstObj.CalBasis == 0)
                            {
                                lstObj.BSAmount = clsMain.MyDouble(dr1["BSPercent"]);
                            }
                            else
                            {
                                lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]);
                            }

                        }


                        lst.Add(lstObj);
                    }
                }
            }
            catch
            {
                return lst;
            }
            return lst;
        }

        [HttpPost]
        public dynamic SaveQuatationData(TransactionData obj, string CompCode, string FY)
        {
            int Status = 0; string StatusStr = string.Empty;
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER objcon = new SQLHELPER(constr);

                string XmlData = CreateXML(obj.ItemDetails);
                string XmlBSData = CreateXML(obj.BSDetails);
                string vchNo = GetVchNo(constr, Convert.ToInt32(108), Convert.ToInt32(1), out int autoNo);

                // Define parameters with @ prefix
                SqlParameter[] parameters = new SqlParameter[]
                {
                    new SqlParameter("@VchNo", SqlDbType.VarChar, 40) { Value = vchNo },
                    new SqlParameter("@AutoVchNo", SqlDbType.Int) { Value = autoNo },
                    new SqlParameter("@CustId", SqlDbType.Int) { Value = obj.CustId },
                    new SqlParameter("@CustName", SqlDbType.VarChar, 100) { Value = obj.CustName },
                    new SqlParameter("@CMobile", SqlDbType.VarChar, 50) { Value = obj.CMobile },
                    new SqlParameter("@TQty", SqlDbType.Float) { Value = obj.TQty },
                    new SqlParameter("@TAmt", SqlDbType.Float) { Value = obj.TAmt },
                    new SqlParameter("@NetAmt", SqlDbType.Float) { Value = obj.NetAmt },
                    new SqlParameter("@Users", SqlDbType.VarChar, 50) { Value = obj.Users },
                    new SqlParameter("@ItemDetails", SqlDbType.NVarChar, -1) { Value = XmlData },
                    new SqlParameter("@BSDetails", SqlDbType.NVarChar, -1) { Value = XmlBSData }
                };

                // Execute the stored procedure
                DataTable DT1 = objcon.getTable("sp_SaveQuatationTransactionData", parameters);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    Status = Convert.ToInt32(DT1.Rows[0]["Status"]);
                    StatusStr = DT1.Rows[0]["Msg"].ToString();
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
#pragma warning disable IDE0037 // Use inferred member name
            return new { Status = Status, Msg = StatusStr };
#pragma warning restore IDE0037 // Use inferred member name
        }

        [HttpGet]
        public dynamic GetQuotationVchDetails(string CompCode, string FY, string Users, string StartDate, string EndDate, int TranType, int Status, int CType)
        {
            List<GetQuotationVchDT> qlist = new List<GetQuotationVchDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER obj = new SQLHELPER(constr);
                string formattedStartDate = string.IsNullOrEmpty(StartDate) ? "" : Busyhelper.FormatDate(StartDate);
                string formattedEndDate = string.IsNullOrEmpty(EndDate) ? "" : Busyhelper.FormatDate(EndDate);
                int QStatus = Status == 1 ? 0 : Status == 2 ? 1 : Status == 3 ? 2 : 0; string sql = string.Empty;
                if (TranType == 1)
                {
                    sql = $"Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, Convert(Varchar, A.[Date], 105) as Date, IsNull(A.[MasterCode1], 0) as AccCode, IsNull(B.[Name], '') as AccName, IsNull(B.[Mobile], '') as Mobile, IsNull(A.[TotQty], 0) as TotQty, IsNull(A.[TotAmt], 0) as TotAmt,IsNull(A.[NetAmount], 0) as NetAmt, IsNull(A.[QStatus], 0) as QStatus, (CASE WHEN A.[QStatus] = 1 Then 'Approved' WHEN A.[QStatus] = 2 Then 'Rejected' ELSE 'Pending' END) as QName, IsNull(B.[CustType], 0) as CTCode, (CASE WHEN IsNull(B.[CustType], 0) = 1 THEN 'B2B A' WHEN IsNull(B.[CustType], 0) = 2 THEN 'B2B B' WHEN IsNull(B.[CustType], 0) = 3 THEN 'B2C' END) as CTName, 0 as IsAdjustment From ESJSLTRAN1 A Left Join ESJSLCustomer B On A.MasterCode1 = B.Code Where A.[CreatedBy] = '{Users}' And A.VchType = 108";
                }
                else if (TranType == 2)
                {
                    sql = $"Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, Convert(Varchar, A.[Date], 105) as Date, IsNull(A.[MasterCode1], 0) as AccCode, IsNull(B.[Name], '') as AccName, IsNull(B.[Mobile], '') as Mobile, IsNull(A.[TotQty], 0) as TotQty, IsNull(A.[TotAmt], 0) as TotAmt,IsNull(A.[NetAmount], 0) as NetAmt, (CASE WHEN A.[QStatus] = 1 And A.[Cancelled] = 1 Then 2 WHEN A.[QStatus] = 1 And A.[Cancelled] <> 1 Then A.[QStatus] END) as QStatus, (CASE WHEN A.[QStatus] = 1 And A.[Cancelled] = 1  Then 'Cancelled' Else 'Approved' END) as QName, IsNull(B.[CustType], 0) as CTCode, (CASE WHEN IsNull(B.[CustType], 0) = 1 THEN 'B2B A' WHEN IsNull(B.[CustType], 0) = 2 THEN 'B2B B' WHEN IsNull(B.[CustType], 0) = 3 THEN 'B2C' END) as CTName, (Select Top 1 COUNT(*) From ESJSLRefTran Where VchType = A.VchType And OrderId = A.VchCode And Method = 2) as IsAdjustment From ESJSLTRAN1 A Left Join ESJSLCustomer B On A.MasterCode1 = B.Code Where A.[CreatedBy] = '{Users}' And A.VchType = 108";
                }
                if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And Date >= '{formattedStartDate}' And Date <= '{formattedEndDate}'";
                if (Status != 0) sql += $" And [QStatus] = {QStatus}";
                if (CType != 0) sql += $" And B.[CustType] = {CType}";
                sql += " Order By A.[VchCode] DESC, A.[Date] DESC";
                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        qlist.Add(new GetQuotationVchDT
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = item["VchNo"].ToString().Trim(),
                            Date = item["Date"].ToString().Trim(),
                            CustCode = Convert.ToInt32(item["AccCode"]),
                            CustName = clsMain.MyString(item["AccName"]).Trim(),
                            CMobile = clsMain.MyString(item["Mobile"]).Trim(),
                            TQty = Convert.ToDecimal(item["TotQty"]),
                            TAmt = Convert.ToDecimal(item["TotAmt"]),
                            NetAmt = Convert.ToDecimal(item["NetAmt"]),
                            QStatus = Convert.ToInt32(item["QStatus"]),
                            QName = clsMain.MyString(item["QName"]),
                            CTCode = Convert.ToInt32(item["CTCode"]),
                            CTName = clsMain.MyString(item["CTName"]),
                            IsAdjustment = Convert.ToInt32(item["IsAdjustment"]) != 0 ? 1 : 0 
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception err)
            {
                return new { Status = 0, Msg = err.Message.ToString(), Data = qlist };
            }
            return new { Status = 1, Msg = "Success", Data = qlist };
        }

        [HttpGet]
        public dynamic GetQuotationItemsDetails(string CompCode, string FY, int VchCode)
        {
            List<GetVchItemsDT> ilist = new List<GetVchItemsDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER obj = new SQLHELPER(constr); var sno = 1;

                string sql = $"Select A.[VchCode], IsNull(A.[ItemCode], 0) as ItemCode, IsNull(B.[Name], '') as ItemName, IsNull(A.[Qty], 0) as Qty, IsNull(A.[Price], 0) as Price, IsNull(A.[Amount], 0) as Amount From ESJSLTRAN2 A INNER JOIN Master1 B On A.[ItemCode] = B.[Code] And B.[MasterType] = 6 Where A.[VchCode] = {VchCode} And VchType = 108 And A.RecType = 1 Order By B.[Name]";
                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        ilist.Add(new GetVchItemsDT
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            SNo = clsMain.MyInt(sno++),
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]).Trim(),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Amount = Convert.ToDecimal(item["Amount"]),
                            Images = GetSingleImagePath(Convert.ToString("Items"), clsMain.MyString(item["ItemName"]).Trim()),
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = ilist };
                }
            }
            catch (Exception err)
            {
                return new { Status = -1, Msg = err.Message.ToString(), Data = ilist };
            }
            return new { Status = 1, Msg = "Success", Data = ilist };
        }

        [HttpGet]
        public dynamic GetPendingItemListForCancellection(string CompCode, string FY, int TranType, int MCCode, int VchType, int VchCode)
        {
            List<STQuotItemsDt> list = new List<STQuotItemsDt>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr); string sql = string.Empty;
                DataTable DT1 = new DataTable();
                switch (TranType)
                {
                    case 1:
                        sql = $"Select ISNULL(A.[ItemCode], 0) as ItemCode, ISNULL(B.[Name], '') as ItemName, ISNULL(B.[CM1], 0) as UCode, ISNULL(C.[Name], '') as UName, ISNULL(SUM(A.[Qty]), 0) as Qty, Max(Price) as Price from ESJSLRefTran A Inner join Master1 B On A.ItemCode = B.Code Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Left Join Master1 C On B.CM1 = C.Code Where B.MasterType = 6 And A.[RecType] In (1, 2) And A.[VchType] = 108 And T1.VchCode = {VchCode} And T1.QStatus = 1 Group by A.ItemCode, B.[Name], B.[CM1], C.[Name] Having Sum(A.Qty) >= 0.01";
                        break;
                    case 2:
                        break;
                }
                DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        list.Add(new STQuotItemsDt
                        {
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]).Trim(),
                            UCode = Convert.ToInt32(item["UCode"]),
                            UName = clsMain.MyString(item["UName"]).Trim(),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Amount = (Convert.ToDecimal(item["Qty"]) * Convert.ToDecimal(item["Price"]))
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = list };
            }
            return new { Status = 1, Msg = "Success", Data = list };
        }

        [HttpPost]
        public dynamic SaveOrderFollowUp(FollowUp obj, string CompCode, string FY)
        {
            int Status = 0; string StatusStr = string.Empty;
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                SqlParameter[] parameters = new SqlParameter[]
                {
                    new SqlParameter("@VchCode", SqlDbType.Int) { Value = obj.VchCode },
                    new SqlParameter("@VchType", SqlDbType.Int) { Value = obj.VchType },
                    new SqlParameter("@Remarks", SqlDbType.VarChar, 255) { Value = obj.Remarks },
                    new SqlParameter("@FollowdBy", SqlDbType.VarChar, 40) { Value = obj.FollowdBy }
                };

                DataTable DT1 = conobj.getTable("dbo.[sp_SaveOrderFollowUp]", parameters);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    Status = Convert.ToInt32(DT1.Rows[0]["Status"]);
                    StatusStr = clsMain.MyString(DT1.Rows[0]["Msg"]);
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), };
            }
            return new { Status = Status, Msg = StatusStr };
        }

        [HttpGet]
        public dynamic GetOrderFollowUp(string CompCode, string FY, int VchCode, int VchType)
        {
            List<GetFollowUp> flist = new List<GetFollowUp>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); int SNo = 1;
                SQLHELPER conobj = new SQLHELPER(constr);

                string sql = $"Select ISNULL(B.[SNo], 0) as SNo,CONVERT(VARCHAR, B.[FollowdOn],105) as FDate, ISNULL(B.[Remarks], '') as Remarks From ESJSLTRAN1 A Inner Join ESJSLFOLLOWUP B ON A.VCHCODE = B.VCHCODE AND A.VCHTYPE = B.VCHTYPE WHERE A.[VCHCODE] = {VchCode} AND A.[VCHTYPE] = {VchType} ORDER BY B.[SNO] Desc";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        flist.Add(new GetFollowUp
                        {
                            SNo = SNo++,
                            FDate = clsMain.MyString(item["FDate"]),
                            Remarks = clsMain.MyString(item["Remarks"])
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = flist };
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = flist };
            }
            return new { Status = 1, Msg = "Success", Data = flist };
        }

        [HttpGet]
        public dynamic GetFollowUpHistoryRpt(string CompCode, string FY, int VchType, int Status, string StartDate, string EndDate)
        {
            List<FollowUpRpt> RPTL = new List<FollowUpRpt>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                string formattedStartDate = string.IsNullOrEmpty(StartDate) ? "" : Busyhelper.FormatDate(StartDate);
                string formattedEndDate = string.IsNullOrEmpty(EndDate) ? "" : Busyhelper.FormatDate(EndDate);

                string sql = $"Select A.VchCode, IsNull(A.[VchNo], '') as VchNo, CONVERT(VARCHAR, A.Date, 105) as Date, IsNull(A.[MasterCode1], 0) as AccCode, IsNull(C.[Name], '') as AccName, IsNull(B.Remarks, '') as Status, IsNull(B.[FollowdBy], '') as FollowedBy, IsNull(CONVERT(VARCHAR, B.FollowdOn, 105), '') as FollowedOn From ESJSLTran1 A Inner Join ESJSLFollowUp B On A.VchCode = B.VchCode And A.[VchType] = B.[VchType] LEFT JOIN ESJSLCustomer C On A.MasterCode1 = C.Code Where A.[VchType] = {VchType}";
                if (Status != 0) sql += $" And A.[QStatus] = {Status}";
                if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And Date >= '{formattedStartDate}' And Date <= '{formattedEndDate}'";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach(DataRow item in DT1.Rows)
                    {
                        RPTL.Add(new FollowUpRpt
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = item["VchNo"].ToString().Trim(),
                            Date = item["Date"].ToString().Trim(),
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]).Trim(),
                            Status = clsMain.MyString(item["Status"]).Trim(),
                            FollowedBy = clsMain.MyString(item["FollowedBy"]).Trim(),
                            FollowedOn = clsMain.MyString(item["FollowedOn"]).Trim(),
                        });
                    }
                }
                else
                {
                    return new { Status = 1, Msg = "Data Not Found !!!", Data = RPTL };
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = RPTL };
            }
            return new { Status = 1, Msg = "Success", Data = RPTL };
        }

        [HttpGet]
        public dynamic GetOrderPrintingDetails(string CompCode, string FY, int VchCode, int VchType)
        {
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr); int sno = 1;

                string sql = $"Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, Convert(Varchar, A.[Date], 105) as VchDate, IsNull(A.[MasterCode1], 0) as AccCode, IsNull(D.[Name], '') as AccName, IsNull(D.[Mobile], '') as Mobile,IsNull(A.[TotQty], 0) as TotQty,IsNull(A.[TotAmt], 0) as TotAmt,IsNull(A.[NetAmount], 0) as NetAmt,IsNull(A.[QStatus], 0) as QStatus, (CASE WHEN [QStatus] = 1 Then 'Approved' WHEN [QStatus] = 2 Then 'Rejected' ELSE 'Pending' END) as QName, IsNull(B.[ItemCode], 0) as ItemCode, IsNull(C.[Name], '') as ItemName, IsNull(B.[Qty], 0) as Qty, IsNull(B.[Price], 0) as Price, IsNull(B.[Amount], 0) as Amount From ESJSLTRAN1 A Inner Join ESJSLTRAN2 B On A.VchCode = B.VchCode And A.VchType = B.VchType And B.RecType = 1 Left Join Master1 C On B.ItemCode = C.Code And C.MasterType = 6 INNER JOIN ESJSLCustomer D ON A.MasterCode1 = D.Code Where A.VchType = {VchType} And A.VchCode = {VchCode}";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    var head = new GetOrderPrinting
                    {
                        VchCode = Convert.ToInt32(DT1.Rows[0]["VchCode"]),
                        VchNo = DT1.Rows[0]["VchNo"].ToString().Trim(),
                        Date = DT1.Rows[0]["VchDate"].ToString().Trim(),
                        AccCode = Convert.ToInt32(DT1.Rows[0]["AccCode"]),
                        AccName = clsMain.MyString(DT1.Rows[0]["AccName"]).Trim(),
                        Mobile = clsMain.MyString(DT1.Rows[0]["Mobile"]).Trim(),
                        TQty = Convert.ToDecimal(DT1.Rows[0]["TotQty"]),
                        TAmt = Convert.ToDecimal(DT1.Rows[0]["TotAmt"]),
                        NetAmt = Convert.ToDecimal(DT1.Rows[0]["NetAmt"]),
                        QStatus = Convert.ToInt32(DT1.Rows[0]["QStatus"]),
                        QName = clsMain.MyString(DT1.Rows[0]["QName"]),
                        ItemsDetails = new List<PrintItemsDT>()
                    };

                    foreach (DataRow item in DT1.Rows)
                    {
                        head.ItemsDetails.Add(new PrintItemsDT
                        {
                            SNo = clsMain.MyInt(sno++),
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]).Trim(),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Amount = Convert.ToDecimal(item["Amount"]),
                            Images = GetSingleImagePath(Convert.ToString("Items"), clsMain.MyString(item["ItemName"]).Trim()),
                        });
                    }
                    return new { Status = 1, Msg = "Success", Data = head };
                }
                else
                {
                    return new { Status = 1, Msg = "Data Not Found !!!" };
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }

        }

        [HttpPost]
        public dynamic ApprovedOrRejectQuotation(Approvel obj, string CompCode, string FY)
        {
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                string formattedDate = DateTime.Now.ToString("yyyy-MMM-dd HH:mm:ss"); // Format the date as 'YYYY-MM-DD hh:mm:ss'

                string sql = $"UPDATE ESJSLTRAN1 SET [QStatus] = {obj.APCode}, [Remarks] = '{obj.Remarks}', [ApprovedBy] = '{obj.ApprovedBy}', [ApprovedOn] = '{formattedDate}' Where VchCode = {obj.VchCode} And [VchType] = 108";
                int DT1 = conobj.ExecuteSQL(sql);

                if (DT1 > 0)
                {
                    new SQLHELPER(constr).ExecuteSQL("Delete ESJSLREFTRAN Where VchCode = " + obj.VchCode + " And Vchtype = 108");

                    sql = $"Select A.VchCode, ISNULL(A.[VchNo], '') as RefNo, CONVERT(VARCHAR, A.[Date], 105) as Date, ISNULL(A.[MasterCode1], 0) as AccCode, B.[SNo], ISNULL(B.[ItemCode], 0) as ItemCode, ISNULL(B.[Qty], 0) as Qty, ISNULL(B.[Price], 0) as Price, ISNULL(B.[Amount], 0) as Amount From ESJSLTRAN1 A Inner Join ESJSLTRAN2 B On A.VchCode = B.VchCode And A.VchType = B.VchType And B.RecType = 1 Where A.[VchCode] = {obj.VchCode} And A.[Vchtype] = 108 Order By B.[SNo]";
                    DataTable DT2 = new SQLHELPER(constr).getTable(sql);

                    if (DT2 != null && DT2.Rows.Count > 0)
                    {
                        foreach (DataRow item in DT2.Rows)
                        {
                            string formattedDt = Busyhelper.FormatDate(Convert.ToString(item["Date"]));
                            sql = $"INSERT INTO ESJSLREFTRAN ([VchCode], [VchType], [RecType], [Method], [RefNo], [Date], [MasterCode1], [ItemCode], [Qty], [Price], [Amount], [OrderId]) Values ({clsMain.MyInt(item["VchCode"])}, 108, 1, 1, '{clsMain.MyString(item["RefNo"])}', '{formattedDt}', {clsMain.MyInt(item["AccCode"])}, {clsMain.MyInt(item["ItemCode"])}, {Convert.ToDecimal(item["Qty"])}, {Convert.ToDecimal(item["Price"])}, {Convert.ToDecimal(item["Amount"])}, {clsMain.MyInt(item["VchCode"])})";
                            int DT3 = new SQLHELPER(constr).ExecuteSQL(sql);

                            if (DT3 == 0) { throw new Exception("Unable To Connect To Company !!!"); }
                        }
                    }
                    else
                    {
                        throw new Exception("Unable To Connect To Company !!!");
                    }
                }
                else
                {
                    throw new Exception("Unable To Connect To Company !!!");
                }
            }
            catch (Exception ex) 
            {
                return new { Status = 0, Msg = ex.Message.ToString().Trim() };
            }
            return new { Status = 1, Msg = obj.APCode == 1 ? "Approved Successfully !!!" : "Rejection Successfully !!!" };
        }

        [HttpGet]
        public dynamic GetPendingOrderList(string CompCode, string FY, int MCCode, string StartDate, string EndDate)
        {
            List<PendingOrder> PORD = new List<PendingOrder>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                string formattedStartDate = string.IsNullOrEmpty(StartDate) ? "" : Busyhelper.FormatDate(StartDate);
                string formattedEndDate = string.IsNullOrEmpty(EndDate) ? "" : Busyhelper.FormatDate(EndDate);

                //string sql = $"SELECT A.VchCode, A.RefNo, A.VchDate, A.AccCode, A.AccName, A.Mobile, ISNULL(T.TotQty, 0) AS TotQty, (ISNULL(TR.TransQty, 0) * (-1)) AS TransQty, (IsNull(T.TotQty, 0) - (IsNull(TR.TransQty, 0) * (-1))) as BQty, (CASE WHEN IsNull(T.TotQty, 0) - (IsNull(TR.TransQty, 0) * (-1)) = 0 THEN 'Completed' ELSE 'Pending' END) as [Status] FROM " +
                //        $"(SELECT DISTINCT A.OrderId as VchCode, IsNull(A.[RefNo], '') as RefNo, CONVERT(VARCHAR, B.Date, 105) as VchDate, IsNull(B.MasterCode1, 0) as AccCode, IsNull(B.CustName, '') as AccName, IsNull(B.CMobile, '') as Mobile FROM ESJSLRefTran A Inner Join ESJSLTran1 B On A.OrderId = B.VchCode And A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method = 2 And B.[QStatus] = 1 And B.Cancelled <> 1";
                //        if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And B.[Date] >= '{formattedStartDate}' And B.[Date] <= '{formattedEndDate}' " ;
                //        sql += ") A LEFT JOIN (SELECT A.VchCode, A.RefNo, SUM(A.TQty) AS TotQty FROM (SELECT A.VchCode, A.RefNo, A.ItemCode, SUM(A.Qty) AS TQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 Where A.Method = 1 AND A.VchType = 108 AND M.CM6 = {MCCode} Group By A.VchCode, A.RefNo, A.ItemCode) A Group By A.VchCode, A.RefNo) T ON A.VchCode = T.VchCode AND A.RefNo = T.RefNo LEFT JOIN (SELECT A.OrderId AS VchCode, A.RefNo, SUM(A.TRQty) AS TransQty FROM (SELECT A.OrderId, A.RefNo, A.ItemCode, SUM(A.Qty) AS TRQty FROM ESJSLRefTran A INNER JOIN  Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 Where A.Method = 2 AND A.VchType = 108 AND M.CM6 = {MCCode} Group By A.OrderId, A.RefNo, A.ItemCode) A Group By A.OrderId, A.RefNo) TR ON A.VchCode = TR.VchCode AND A.RefNo = TR.RefNo";

                string sql = $"WITH Totals AS (SELECT A.VchCode, A.RefNo, ISNULL(T.TotQty, 0) AS TotQty FROM (SELECT DISTINCT A.OrderId AS VchCode, ISNULL(A.[RefNo], '') AS RefNo FROM ESJSLRefTran A INNER JOIN ESJSLTran1 B ON A.OrderId = B.VchCode AND A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method IN (1,2) AND B.[QStatus] = 1 AND B.Cancelled <> 1";
                             if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And B.[Date] >= '{formattedStartDate}' And B.[Date] <= '{formattedEndDate}' ";
                            sql += $") A INNER JOIN (SELECT A.VchCode, A.RefNo, SUM(A.TQty) AS TotQty FROM (SELECT A.VchCode, A.RefNo, A.ItemCode, SUM(A.Qty) AS TQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 WHERE A.Method = 1 AND A.VchType = 108 AND M.CM6 = {MCCode} GROUP BY A.VchCode, A.RefNo, A.ItemCode) A GROUP BY A.VchCode, A.RefNo) T ON A.VchCode = T.VchCode AND A.RefNo = T.RefNo), " +
                            $"Transfers AS(SELECT A.VchCode, A.RefNo, ISNULL(TR.TransQty, 0) AS TransQty FROM(SELECT DISTINCT A.OrderId AS VchCode, ISNULL(A.[RefNo], '') AS RefNo FROM ESJSLRefTran A INNER JOIN ESJSLTran1 B ON A.OrderId = B.VchCode AND A.VchType = B.VchType WHERE A.VchType = 108 AND A.Method IN (1, 2) AND B.[QStatus] = 1 AND B.Cancelled <> 1 ";
                            if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And B.[Date] >= '{formattedStartDate}' And B.[Date] <= '{formattedEndDate}' ";
                            sql += $") A INNER JOIN (SELECT A.OrderId AS VchCode, A.RefNo, SUM(A.TRQty) AS TransQty FROM (SELECT A.OrderId, A.RefNo, A.ItemCode, SUM(A.Qty) AS TRQty FROM ESJSLRefTran A INNER JOIN Master1 M ON A.ItemCode = M.Code AND M.MasterType = 6 WHERE A.Method = 2 AND A.VchType = 108 AND M.CM6 = {MCCode} GROUP BY A.OrderId, A.RefNo, A.ItemCode) A GROUP BY A.OrderId, A.RefNo) TR ON A.VchCode = TR.VchCode AND A.RefNo = TR.RefNo) " +
                            $"SELECT T.VchCode, CONVERT(VARCHAR, T1.Date, 105) as VchDate, IsNull(T.RefNo, '') as RefNo, IsNull(T1.MasterCode1, 0) as AccCode, ISNULL(T2.Name, '') as AccName, ISNULL(T2.Mobile, '') as Mobile, ISNULL(T.TotQty, 0) as TotQty, (ISNULL(Tr.TransQty, 0) * (-1)) AS TransQty, (ISNULL(T.TotQty, 0) - (ISNULL(Tr.TransQty, 0) * (-1))) AS BalQty, CASE WHEN T.TotQty = (ISNULL(Tr.TransQty, 0) * (-1)) THEN 'Completed' ELSE 'Pending' END AS VoucherStatus FROM Totals T LEFT JOIN Transfers Tr ON T.VchCode = Tr.VchCode AND T.RefNo = Tr.RefNo LEFT JOIN ESJSLTRAN1 T1 ON T.VchCode = T1.VchCode LEFT JOIN ESJSLCustomer T2 ON T1.MasterCode1 = T2.Code ORDER BY T.VchCode";
                DataTable DT1 = conobj.getTable(sql);
                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach(DataRow item in DT1.Rows)
                    {
                        PORD.Add(new PendingOrder
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = clsMain.MyString(item["RefNo"]),
                            Date = clsMain.MyString(item["VchDate"]),
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]),
                            Mobile = clsMain.MyString(item["Mobile"]),
                            TotQty = Convert.ToDecimal(item["TotQty"]),
                            TransQty = Convert.ToDecimal(item["TransQty"]),
                            BQty = Convert.ToDecimal(item["BalQty"]),
                            Status = clsMain.MyString(item["VoucherStatus"])
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Success", Data = PORD };
        }

        [HttpGet]
        public dynamic GetStockTransferQuotataionDt(string CompCode, string Fy, int MCCode)
        {
            List<GetStockTransferQuotDt> qlist = new List<GetStockTransferQuotDt>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, Fy);
                SQLHELPER conobj = new SQLHELPER(constr);

                //string sql = $"Select A.[VchCode], A.[VchNo], A.[VchDate], A.[AccCode], A.[AccName] From (Select A.VchCode, A.[VchNo], A.[VchDate], A.[AccCode], A.[AccName], A.[CustMobile], A.[ItemCode], ISNULL(SUM(B.[Qty]), 0) as STK From (Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, CONVERT(VARCHAR, A.[Date], 105) as VchDate,IsNull(A.[MasterCode1], 0) as AccCode, ISNULL(A.[CustName], '') as AccName, ISNULL(A.[CMobile], '') as CustMobile, ISNULL(B.[ItemCode], 0) as ItemCode From ESJSLTran1 A Inner Join ESJSLTran2 B ON A.VchCode = B.VchCode And B.VchType = 108 Left Join Master1 C On B.ItemCode = C.Code Where A.QStatus = 1 And C.CM6 = {MCCode}) A Inner Join ESJSLRefTran B On A.VchCode = B.VchCode And A.ItemCode = B.ItemCode And B.RecType = 1 Left Join Master1 C On A.ItemCode = C.Code And C.MasterType = 6 Group By A.VchCode, A.[VchNo], A.[VchDate], A.[AccCode], A.[AccName], A.[CustMobile], A.[ItemCode], C.[Name] Having Sum(Qty) >= 0.01) A Group By A.[VchCode], A.[VchNo], A.[VchDate], A.[AccCode], A.[AccName]";
                string sql = $"Select A.VchCode, ISNULL(A.[VchNo], '') as VchNo, CONVERT(VARCHAR, A.[Date], 105) as VchDate, ISNULL(A.[MasterCode1], 0) as AccCode, ISNULL(M.[Name], '') as AccName, ISNULL(M.[Mobile], '') As CMobile, ISNULL(M.[Email],'') as CEmail, ISNULL(M.[Address], '') as CAddress, ISNULL(M.[GSTIN], '') As CGSTIN From (Select IsNull(A.[OrderID], 0) As OrderId from ESJSLRefTran A Inner join Master1 B On A.ItemCode = B.Code Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Where B.MasterType = 6 And B.CM6 = {MCCode} And A.RecType in (1, 2) And A.VchType = 108 And T1.VchType = 108 And T1.QStatus = 1 And T1.Cancelled <> 1 Group by A.OrderID Having Sum(A.Qty) >= 0.01) O Inner join ESJSLTran1 A On O.OrderID = A.VchCode Left Join ESJSLCustomer M On A.MasterCode1 = M.Code Group by A.VchCode, A.[VchNo], A.[Date], A.[MasterCode1], M.[Name], M.[Mobile], M.[Email], M.[Address], M.[GSTIN] Order By A.Date,A.VchCode";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        qlist.Add(new GetStockTransferQuotDt
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = clsMain.MyString(item["VchNo"]).Trim(),
                            VchDate = Convert.ToString(item["VchDate"]).Trim(),
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]).Trim(),
                            CMobile = clsMain.MyString(item["CMobile"]).Trim(),
                            CEmail = clsMain.MyString(item["CEmail"]).Trim(),
                            CGSTIN = clsMain.MyString(item["CGSTIN"]).Trim(),
                            CAddress = clsMain.MyString(item["CAddress"]).Trim(),
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = qlist };
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = qlist };
            }
            return new { Status = 1, Msg = "Success", Data = qlist };
        }

        [HttpGet]
        public dynamic GetStockTransferQuotataionItemsDt(string CompCode, string Fy, int VchCode, int MCCode)
        {
            List<STQuotItemsDt> list = new List<STQuotItemsDt>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, Fy);
                SQLHELPER conobj = new SQLHELPER(constr);

                string sql = $"Select A.ItemCode, A.ItemName, A.UCode, UName, A.Q as Qty,A.Price,STK.Stock From (Select ISNULL(A.[ItemCode], 0) as ItemCode, ISNULL(B.[Name], '') as ItemName, ISNULL(B.[CM1], 0) as UCode, ISNULL(C.[Name], '') as UName, ISNULL(SUM(A.[Qty]), 0) as Q, Max(Price) as Price from ESJSLRefTran A Inner join Master1 B On A.ItemCode = B.Code Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Left Join Master1 C On B.CM1 = C.Code Where B.MasterType = 6 And B.CM6 = {MCCode} And A.RecType in (1, 2) And A.VchType = 108 And T1.VchCode = {VchCode} And T1.QStatus = 1 Group by A.ItemCode, B.[Name], B.[CM1], C.[Name] Having Sum(A.Qty) >= 0.01) A Outer Apply(Select ISNULL(Sum(S.Qty),0) as Stock From (Select S.D1 as Qty From Tran4 S Where S.MasterCode1 = A.ItemCode And S.MasterCode2 = {MCCode} Union All Select IsNull(Sum(S.Value1), 0) as Qty From Tran2 S Where S.MasterCode1 = A.ItemCode And S.MasterCode2 = {MCCode} And S.RecType = 2 And S.[Date] <= GetDate()) S) STK";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        list.Add(new STQuotItemsDt
                        {
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]).Trim(),
                            UCode = Convert.ToInt32(item["UCode"]),
                            UName = clsMain.MyString(item["UName"]).Trim(),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Stock = Convert.ToDecimal(item["Stock"]),
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = list };
                }

            }
            catch (Exception ex)
            {
                return new { Status = -1, Msg = ex.Message.ToString(), Data = list };
            }
            return new { Status = 1, Msg = "Success", Data = list };
        }

        //[HttpGet]
        //public dynamic GetStockTransferQuotataionItemsDt(string CompCode, string Fy, int VchCode, int MCCode)
        //{
        //    List<STQuotWiseDt> list = new List<STQuotWiseDt>();
        //    try
        //    {
        //        string constr = GetConnectionString(Provider, CompCode, Fy);
        //        SQLHELPER conobj = new SQLHELPER(constr);

        //        string sql = $"Select A.VchCode, A.[VchNo], A.[VchDate], A.[AccCode], A.[AccName], A.[CMobile], A.[CEmail], A.[CAddress], A.[CGSTIN], A.[ItemCode], IsNull(C.[Name], '') as ItemName, ISNULL(SUM(B.[Qty]), 0) as STQty, A.[Price], A.[Amt] From (Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, A.[Date] as VchDate, IsNull(A.[MasterCode1], 0) as AccCode, ISNULL(A.[CustName], '') as AccName, ISNULL(A.[CMobile], '') as CMobile, ISNull(D.[Email], '') as CEmail, ISNULL(D.[Address], '') as [CAddress], ISNULL(D.[GSTIN], '') as CGSTIN, ISNULL(B.[ItemCode], 0) as ItemCode, ISNULL(B.[Price], 0) as Price, ISNULL(B.[Amount], 0) as Amt From ESJSLTran1 A Inner Join ESJSLTran2 B ON A.VchCode = B.VchCode And B.VchType = 108 Left Join Master1 C On B.ItemCode = C.Code Left Join ESJSLCustomer D On A.MasterCode1 = D.Code Where A.QStatus = 1 And C.CM6 = {MCCode} And A.VchCode = {VchCode}) A Inner Join ESJSLRefTran B On A.VchCode = B.VchCode And A.ItemCode = B.ItemCode And B.RecType = 1 Left Join Master1 C On A.ItemCode = C.Code And C.MasterType = 6 Group By A.VchCode, A.[VchNo], A.[VchDate], A.[AccCode], A.[AccName], A.[CMobile], A.[CEmail], A.[CAddress], A.[CGSTIN], A.[ItemCode], C.[Name], A.[Price], A.[Amt] Having Sum(Qty) >= 0.01";
        //        DataTable DT1 = conobj.getTable(sql);


        //        if (DT1 != null && DT1.Rows.Count > 0)
        //        {
        //            var voucher = new STQuotWiseDt();

        //            foreach (DataRow item in DT1.Rows)
        //            {
        //                if (voucher.VchCode == 0) // First iteration
        //                {
        //                    voucher.VchCode = Convert.ToInt32(item["VchCode"]);
        //                    voucher.VchNo = clsMain.MyString(item["VchNo"]).Trim();
        //                    voucher.VchDate = Convert.ToString(item["VchDate"]).Trim();
        //                    voucher.AccCode = Convert.ToInt32(item["AccCode"]);
        //                    voucher.AccName = clsMain.MyString(item["AccName"]).Trim();
        //                    voucher.CMobile = clsMain.MyString(item["CMobile"]).Trim();
        //                    voucher.CEmail = clsMain.MyString(item["CEmail"]).Trim();
        //                    voucher.CGSTIN = clsMain.MyString(item["CGSTIN"]).Trim();
        //                    voucher.CAddress = clsMain.MyString(item["CAddress"]).Trim();
        //                    voucher.QuotationItems = new List<STQuotItemsDt>();
        //                }

        //                voucher.QuotationItems.Add(new STQuotItemsDt
        //                {
        //                    ItemCode = Convert.ToInt32(item["ItemCode"]),
        //                    ItemName = clsMain.MyString(item["ItemName"]).Trim(),
        //                    Qty = Convert.ToDecimal(item["STQty"]),
        //                    Price = Convert.ToDecimal(item["Price"]),
        //                    Amount = Convert.ToDecimal(item["Amt"]),
        //                });
        //            }
        //            list.Add(voucher);
        //        }
        //        else
        //        {
        //            return new { Status = 0, Msg = "Data Not Found !!!", Data = list };
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        return new { Status = -1, Msg = ex.Message.ToString(), Data = list };
        //    }
        //    return new { Status = 1, Msg = "Success", Data = list };
        //}

        [HttpGet]
        public dynamic GetPackerList(string CompCode, string Fy)
        {
            List<UnknowList> plist = new List<UnknowList>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, Fy);
                SQLHELPER conobj = new SQLHELPER(constr); int sno = 1;

                string sql = $"Select IsNull([User], 0) as Name From ESUserMapping Where [UType] = 5 Group By [User] Order By [User]";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        plist.Add(new UnknowList
                        {
                            Code = Convert.ToInt32(sno++),
                            Name = clsMain.MyString(item["Name"])
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = plist };
            }
            return new { Status = 1, Msg = "Success", Data = plist };
        }

        [HttpPost]
        public dynamic SaveStockTransferData(STVchDetail obj, string CompCode, string Fy)
        {
            object VchCode = 0;
            int STBusyCode = 0;
            int Status = 0;
            string StatusStr = string.Empty;
            string errMsg = string.Empty;
            CFixedInterface FI = new CFixedInterface();
            SeriesConfigDt seriesDt = new SeriesConfigDt();
            try
            {
                BusyVoucher BusyVch = new BusyVoucher();
                string constr = GetConnectionString(Provider, CompCode, Fy);
                SQLHELPER conobj = new SQLHELPER(constr);
                seriesDt = GetSeriesConfigDetails(constr);
                string seriesname = seriesDt?.SeriesName; string tmcname = seriesDt?.TMCName;
                string vchNo = GetVchNo(constr, Convert.ToInt32(109), Convert.ToInt32(2), out int autoNo);
                //string formattedDate = DateTime.Now.ToString("dd-MM-yyyy"); // Format the date as 'YYYY-MM-DD hh:mm:ss'
                double InvAmount = 0; string xmlstr = ""; STVchDetail NewInv = obj;

                // Generate Stock Tranfer XML
                xmlstr = GetStockTransferXML(5, NewInv, clsMain.MyString(vchNo), clsMain.MyString(seriesname), clsMain.MyString(tmcname), ref InvAmount, constr);

                bool Connect = false; FI.CloseDB();
                Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(Fy));

                if (!Connect)
                {
                    throw new Exception("Unable To Connect To Company");
                }

                // Save Stock Transfer Invoice
                if (!SaveVoucherFromXML(5, xmlstr, ref VchCode, FI, out errMsg))
                {
                    throw new Exception(errMsg);
                }

                STBusyCode = clsMain.MyInt(VchCode);

                string XmlData = CreateXML(obj.STItemDetails);

                // Define parameters with @ prefix
                SqlParameter[] parameters = new SqlParameter[]
                {
                    new SqlParameter("@BusyVchCode", SqlDbType.Int) { Value = STBusyCode },
                    new SqlParameter("@VchCode", SqlDbType.Int) { Value = obj.VchCode },
                    new SqlParameter("@OrderId", SqlDbType.Int) { Value = obj.OrderId },
                    new SqlParameter("@OrderNo", SqlDbType.VarChar, 40) { Value = obj.OrderNo },
                    new SqlParameter("@VchNo", SqlDbType.VarChar, 40) { Value = vchNo },
                    new SqlParameter("@AutoVchNo", SqlDbType.Int) { Value = autoNo },
                    new SqlParameter("@AccCode", SqlDbType.Int) { Value = obj.AccCode },
                    new SqlParameter("@AccName", SqlDbType.VarChar, 100) { Value = obj.AccName },
                    new SqlParameter("@MCCode1", SqlDbType.Int) { Value = obj.MCCode },
                    new SqlParameter("@MCCode2", SqlDbType.Int) { Value = seriesDt?.TMCCode },
                    new SqlParameter("@Mobile", SqlDbType.VarChar, 50) { Value = obj.Mobile },
                    new SqlParameter("@Remarks", SqlDbType.VarChar, -1) { Value = obj.Remarks},
                    new SqlParameter("@TQty", SqlDbType.Float) { Value = obj.TQty },
                    new SqlParameter("@TAmt", SqlDbType.Float) { Value = obj.TAmt },
                    new SqlParameter("@NetAmt", SqlDbType.Float) { Value = obj.NetAmt },
                    new SqlParameter("@Users", SqlDbType.VarChar, 50) { Value = obj.Users },
                    new SqlParameter("@STItemDetails", SqlDbType.NVarChar, -1) { Value = XmlData }
                };

                // Execute the stored procedure
                DataTable result = conobj.getTable("[sp_SaveStockTransferTran]", parameters);

                if (result != null && result.Rows.Count > 0)
                {
                    Status = Convert.ToInt32(result.Rows[0]["Status"]);
                    StatusStr = result.Rows[0]["Msg"].ToString();
                }

                // Check the status returned by the stored procedure
                if (Status == 0)
                {
                    if (STBusyCode > 0)
                    {
                        DeleteVoucher(FI, STBusyCode, out errMsg);
                    }
                    throw new Exception(StatusStr + "," + errMsg);
                }
            }
            catch (Exception ex)
            {
                if (STBusyCode > 0) { DeleteVoucher(FI, STBusyCode, out errMsg); };
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = Status, Msg = StatusStr, VchCode = STBusyCode };
        }

        [HttpGet]
        public dynamic GetStockTranferVchDetails(string CompCode, string FY, string MCCode, string StartDate, string EndDate)
        {
            List<GetSTVchDT> slist = new List<GetSTVchDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                string formattedStartDate = string.IsNullOrEmpty(StartDate) ? "" : Busyhelper.FormatDate(StartDate);
                string formattedEndDate = string.IsNullOrEmpty(EndDate) ? "" : Busyhelper.FormatDate(EndDate);

                string sql = $"Select A.[VchCode], ISNULL(A.[VCHNO], '') as VchNo, CONVERT(VARCHAR, A.[DATE], 105) as VchDate, ISNULL(A.[MasterCode1], 0) as AccCode, ISNULL(B.[Name], '') as AccName, ISNULL(B.[Mobile], '') as Mobile, ISNULL(A.[TotQty], 0) as TotQTy, ISNULL(A.[TotAmt], 0) as TotAmt, ISNULL(A.[NetAmount], 0) as NetAmt, ISNULL(A.[BusyVchCode], 0) as BusyVchCode, ISNULL(A.[Remarks], '') as Remarks From ESJSLTRAN1 A INNER JOIN ESJSLCustomer B ON A.MasterCode1 = B.Code Where A.[VchType] = 109 And [MasterCode2] = {MCCode}";
                if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And [Date] >= '{formattedStartDate}' And [Date] <= '{formattedEndDate}'";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        slist.Add(new GetSTVchDT
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = item["VchNo"].ToString().Trim(),
                            Date = item["VchDate"].ToString().Trim(),
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]).Trim(),
                            Mobile = clsMain.MyString(item["Mobile"]).Trim(),
                            TQty = Convert.ToDecimal(item["TotQty"]),
                            TAmt = Convert.ToDecimal(item["TotAmt"]),
                            NetAmt = Convert.ToDecimal(item["NetAmt"]),
                            Remarks = clsMain.MyString(item["Remarks"]),
                            BusyVchCode = Convert.ToInt32(item["BusyVchCode"]),
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = slist };
                }
            }
            catch (Exception ex)
            {
                return new { Status = -1, Msg = ex.Message.ToString(), Data = slist };
            }
            return new { Status = 1, Msg = "Success", Data = slist };
        }

        [HttpGet]
        public dynamic GetStockTransferItemsDetails(string CompCode, string FY, int VchCode)
        {
            List<GetVchItemsDT> sitem = new List<GetVchItemsDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER obj = new SQLHELPER(constr); var sno = 1;

                string sql = $"Select A.[VchCode], IsNull(A.[ItemCode], 0) as ItemCode, IsNull(B.[Name], '') as ItemName, IsNull(A.[Qty], 0) as Qty, IsNull(A.[Price], 0) as Price, IsNull(A.[Amount], 0) as Amount From ESJSLTRAN2 A INNER JOIN Master1 B On A.[ItemCode] = B.[Code] And B.[MasterType] = 6 Where A.[VchCode] = {VchCode} And A.[VchType] = 109 And A.[RecType] = 1 Order By B.[Name]";
                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        sitem.Add(new GetVchItemsDT
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            SNo = clsMain.MyInt(sno++),
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]).Trim(),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Amount = Convert.ToDecimal(item["Amount"]),
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = sitem };
                }
            }
            catch (Exception ex)
            {
                return new { Status = -1, Msg = ex.Message.ToString(), Data = sitem, };
            }
            return new { Status = 1, Msg = "Success", Data = sitem };
        }

        private bool SaveVoucherFromXML(int VchType, string xmlStr, ref object VchCode, CFixedInterface fi, out string errMsg)
        {
            object err = "";
            bool result = fi.SaveVchFromXML(VchType, xmlStr, ref err, false, 0, ref VchCode);
            errMsg = err?.ToString();
            return errMsg == "" ? result : false;
        }

        private void DeleteVoucher(CFixedInterface Fi, int VchCode, out string ErrMsg)
        {
            ErrMsg = "";
            object err = null;
            object BusyVchCode = (object)VchCode;

            try
            {
                Fi.DeleteVchByCode(BusyVchCode, ref err);
                if (err != null)
                {
                    ErrMsg = err?.ToString();
                }
            }
            catch (Exception ex)
            {
                ErrMsg = ex.Message.ToString();
            }
        }

        //public AlertOrder SaveAutoProductionOrderInv(PostProductionOrder obj, string CompCode, string FY)
        //{
        //    AlertOrder objResult = new AlertOrder();

        //    try
        //    {
        //        object VchCode = 0;
        //        int MRBusyCode = 0, MIBusyCode = 0, Results = 0;
        //        string DBName = $"Busy{CompCode}_db1{FY}";
        //        string constr = $"Data Source={servername}; Initial catalog={DBName}; Uid={Suser}; Pwd={Spass}";

        //        // Create database helper objects
        //        SQLHELPER ConObj = new SQLHELPER(constr);
        //        BusyVoucher BusyVch = new BusyVoucher();
        //        CFixedInterface FI = new CFixedInterface();

        //        string XMLStr = ""; double InvAmount = 0; double InvQty = 0;
        //        PostProductionOrder NewInv = obj;

        //        // 1. Get STPTName code | 2. Get MR Series Name |  3. Get MI Series Name |  4. Get Material Center
        //        string STPTName = GetSTPTName(clsMain.MyInt(NewInv.SAccCode), constr);
        //        string MRSeriesName = GetSeriesConfig(4, constr);
        //        string MISeriesName = GetSeriesConfig(11, constr);
        //        string MCName = GetMCConfig(constr);

        //        // Generate MR invoice XML
        //        XMLStr = GetMRInvoiceXML(4, NewInv, clsMain.MyString(MRSeriesName), clsMain.MyString(MCName), clsMain.MyString(STPTName), ref InvAmount, constr);

        //        // Connect to the database
        //        bool Connect = false; FI.CloseDB();
        //        Connect = FI.OpenCSDBForYear(BusyAppPath, servername, Suser, Spass, CompCode, Convert.ToInt16(FY));

        //        if (!Connect)
        //        {
        //            objResult.Status = 0; objResult.Msg = "Unable To Connect To Company";
        //            return objResult;
        //        }

        //        // Save MR invoice
        //        if (!SaveVoucherFromXML(4, XMLStr, ref VchCode, FI, out string errMsg))
        //        {
        //            objResult.Status = 0; objResult.Msg = errMsg;
        //            return objResult;
        //        }

        //        MRBusyCode = clsMain.MyInt(VchCode);

        //        // Generate MI invoice XML
        //        XMLStr = GetMIInvoiceXML(11, NewInv, clsMain.MyString(MISeriesName), clsMain.MyString(MCName), ref InvAmount, ref InvQty, constr);

        //        // Save MR invoice
        //        if (!SaveVoucherFromXML(11, XMLStr, ref VchCode, FI, out errMsg))
        //        {
        //            DeleteVoucher(FI, MRBusyCode, out errMsg);
        //            objResult.Status = 0; objResult.Msg = errMsg;
        //            return objResult;
        //        }

        //        MIBusyCode = clsMain.MyInt(VchCode);

        //        //Check for valid Busy codes
        //        if (MRBusyCode <= 0 || MIBusyCode <= 0)
        //        {
        //            if (MRBusyCode > 0) { DeleteVoucher(FI, MRBusyCode, out errMsg); }
        //            if (MIBusyCode > 0) { DeleteVoucher(FI, MIBusyCode, out errMsg); }

        //            objResult.Status = 0; objResult.Msg = "Posting not done .......";
        //            return objResult;
        //        }

        //        // Get Series code
        //        int SeriesCode = GetSeriesCode(MIBusyCode, 11, constr);

        //        // Call SaveToDbProductionDetails method
        //        var ResultsObj1 = SaveToDbProductionDetails(NewInv, MRBusyCode, MIBusyCode, InvQty, constr);

        //        if (ResultsObj1.Status != 1)
        //        {
        //            DeleteVoucher(FI, MRBusyCode, out errMsg);
        //            DeleteVoucher(FI, MIBusyCode, out errMsg);
        //            objResult.Status = ResultsObj1.Status;
        //            objResult.Msg = ResultsObj1.Msg;
        //            return objResult;
        //        }
        //        // If save succeeds, proceed with AutoRefGeneratedInProductionOrder
        //        var ResultsObj = AutoRefGeneratedInProductionOrder(NewInv, MRBusyCode, MIBusyCode, SeriesCode, constr);

        //        if (ResultsObj.Status != 1)
        //        {
        //            DeleteVoucher(FI, MRBusyCode, out errMsg);
        //            DeleteVoucher(FI, MIBusyCode, out errMsg);

        //            objResult.Status = ResultsObj.Status;
        //            objResult.Msg = ResultsObj.Msg;
        //            return objResult;
        //        }
        //        string Return_VchCode = string.Empty;
        //        Return_VchCode = clsMain.MyInt(MRBusyCode) + "|" + clsMain.MyInt(MIBusyCode);
        //        objResult.Status = 1;
        //        objResult.Msg = "Success";
        //        objResult.VchCode = Return_VchCode;
        //    }
        //    catch (Exception ex)
        //    {
        //        objResult.Status = 0; objResult.Msg = ex.Message.ToString();
        //    }
        //    return objResult;
        //}

        public string GetStockTransferXML(int VchType, STVchDetail Inv, string VchNo, string VchSeriesName, string TMCName, ref double InvAmount, string ConnectionString)
        {
            string XMLStr = string.Empty;
            try
            {
                BusyVoucher BVch = new BusyVoucher();
                BusyVoucher.StockTransfer ORD = new BusyVoucher.StockTransfer();
                ORD.VchSeriesName = VchSeriesName; //Inv.SeriesName; //BVch.GetMasterCodeToName(ConnStr, SeriesCode).Replace("12", "");
                ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
                //ORD.Date = DateTime.UtcNow.ToString("10-04-2024")
                ORD.VchNo = VchNo.ToString();
                ORD.VchType = VchType;
                ORD.StockUpdationDate = ORD.Date;
                ORD.MasterName1 = Inv.MCName;
                ORD.MasterName2 = TMCName.ToString();
                ORD.TranCurName = "";
                ORD.TmpVchCode = 0;
                //ORD.TmpVchSeriesCode = 253;
                ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
                //ORD.BillSundries = new List<BusyVoucher.BSDetail>();
                //ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();
                //ORD.VchOtherInfoDetails.Narration1 = clsMain.MyString(Inv.Remarks);
                //ORD.VchOtherInfoDetails.Transport = clsMain.MyString(Inv.Transport);
                //ORD.VchOtherInfoDetails.Station = clsMain.MyString(Inv.Station);

                int SrNo = 0;
                foreach (var item in Inv.STItemDetails)
                {
                    BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
                    SrNo = SrNo + 1;
                    ID.SrNo = SrNo;
                    ID.VchType = ORD.VchType;
                    ID.Date = ORD.Date;
                    ID.VchNo = VchNo.ToString();
                    ID.ItemName = item.ItemName.ToString();
                    ID.UnitName = item.UName.ToString();
                    ID.ConFactor = 1;
                    ID.Qty = clsMain.MyDouble(item.Qty);
                    ID.QtyMainUnit = clsMain.MyDouble(ID.Qty);
                    ID.QtyAltUnit = 0;
                    ID.ConFactor = 0;
                    ID.ListPrice = 0;
                    ID.Price = (double)item.Price;
                    ID.Amt = clsMain.MyDouble(ID.Price * ID.Qty);
                    ID.PriceAltUnit = 0;
                    if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
                    InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);
                    ID.TmpVchCode = 0;
                    ID.MC = ORD.MasterName2;
                    ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
                    ORD.ItemEntries.Add(ID);
                }
                //ORD.TmpTotalAmt = InvAmount;
                XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
            }
            catch
            {
                return "";
            }
            return XMLStr;
        }

        public dynamic GetGodownVerificationVchList(string CompCode, string FY)
        {
            List<GetStockTransferQuotDt> VList = new List<GetStockTransferQuotDt>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);

                string sql = $"Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, CONVERT(VARCHAR, A.[Date], 105) as VchDate, IsNull(A.[MasterCode1], 0) as AccCode,  IsNull(B.[Name], '') as AccName, IsNull(B.[Mobile], '') as Mobile, IsNull(B.[Email], '') as Email, IsNull(B.[GSTIN], '') as GSTIN, IsNull(B.[Address], '') as Address From ESJSLTran1 A Left Join ESJSLCustomer B On A.MasterCode1 = B.Code Where ([Verification] Is Null OR [Verification] = 0) And [VchType] = 109 Order By A.[VchCode], A.[Date]"; //And [I1] = {MCCode}
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        VList.Add(new GetStockTransferQuotDt
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = clsMain.MyString(item["VchNo"]).Trim(),
                            VchDate = Convert.ToString(item["VchDate"]).Trim(),
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]).Trim(),
                            CMobile = clsMain.MyString(item["Mobile"]).Trim(),
                            CEmail = clsMain.MyString(item["Email"]).Trim(),
                            CGSTIN = clsMain.MyString(item["GSTIN"]).Trim(),
                            CAddress = clsMain.MyString(item["Address"]).Trim(),
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), };
            }
            return new { Status = 1, Msg = "Success", Data = VList };
        }

        [HttpGet]
        public dynamic GetGodownVerificationVchItemDetails(string CompCode, string FY, int VchCode)
        {
            List<STQuotItemsDt> VIList = new List<STQuotItemsDt>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);

                string sql = $"Select IsNull(B.[ItemCode], 0) as ItemCode, IsNull(M.[Name], '') as ItemName, IsNull(M.[CM1], 0) as UCode, IsNull(M1.[Name], '') as UName, B.[Qty], B.[Price], B.[Amount] From ESJSLTran1 A Inner Join ESJSLTran2 B On A.VchCode = B.VchCode And A.VchType = B.VchType And B.RecType = 1 Left Join Master1 M On B.ItemCode = M.Code And M.MasterType = 6 Left Join Master1 M1 On M.CM1 = M1.Code And M1.MasterType = 8 Where (A.[Verification] Is Null Or A.[Verification] = 0) And A.[VchType] = 109 And A.[VchCode] = {VchCode}";
                DataTable DT1 = conobj.getTable(sql);
                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach(DataRow item in DT1.Rows)
                    {
                        VIList.Add(new STQuotItemsDt
                        {
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]).Trim(),
                            UCode = Convert.ToInt32(item["UCode"]),
                            UName = clsMain.MyString(item["UName"]).Trim(),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Amount = Convert.ToDecimal(item["Amount"])
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Success", Data = VIList };
        }

        [HttpPost]
        public dynamic SaveGodownVerification(STVerificationVchDT obj, string CompCode, string FY)
        {
            int Status = 0; string StatusStr = string.Empty;
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                string xml = CreateXML(obj?.STVItemDetails);

                // Define parameters with @ prefix
                SqlParameter[] parameter = new SqlParameter[]
                {
                    new SqlParameter("@VchCode", SqlDbType.Int) { Value = obj?.VchCode },
                    new SqlParameter("@VchType", SqlDbType.Int) { Value = 109 },
                    new SqlParameter("@Status", SqlDbType.Int) { Value = 1 },
                    new SqlParameter("@STVItemDetails", SqlDbType.NVarChar, -1) { Value = xml }
                };

                DataTable DT1 = conobj.getTable("[sp_SaveGodownTransferVerification]", parameter);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    Status = Convert.ToInt32(DT1.Rows[0]["Status"]);
                    StatusStr = DT1.Rows[0]["Msg"].ToString();
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), };
            }
            return new { Status = Status, Msg = StatusStr };
        }

        [HttpGet]
        public dynamic GetPendingPackingList(string CompCode, string FY)
        {
            List<PendingPackingDT> clist = new List<PendingPackingDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);

                //string sql = $"Select IsNull(A.MasterCode1, 0) As AccCode, IsNull(C.[Name], '') as AccName from ESJSLRefTran A inner Join ESJSLCustomer C On A.MasterCode1 = C.Code Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Where A.RecType = 1 And T1.VchType = 109 And T1.Verification = 1 Group by A.MasterCode1, C.[Name] Having Sum(A.Qty) >= 0.01";
                string sql = $"Select IsNull(A.MasterCode1, 0) As AccCode, IsNull(C.[Name], '') as AccName, IsNull(C.Mobile, '') as Mobile, IsNull(C.Email, '') as Email, IsNull(C.GSTIN, '') as GSTIN,  IsNull(C.[Address], '') as Address, IsNull(Sum(T1.TotQty), 0) as TQty from ESJSLRefTran A inner Join ESJSLCustomer C On A.MasterCode1 = C.Code Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Where A.RecType = 1 And T1.VchType = 109 And T1.Verification = 1 Group by A.MasterCode1, C.[Name], C.Mobile, C.Email, C.GSTIN, C.[Address] Having Sum(A.Qty) >= 0.01";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        clist.Add(new PendingPackingDT
                        {
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]),
                            Mobile = clsMain.MyString(item["Mobile"]),
                            Email =clsMain.MyString(item["Email"]),
                            Address = clsMain.MyString(item["Address"]),
                            GSTIN = clsMain.MyString(item["GSTIN"]),
                            TQty = Convert.ToDouble(item["TQty"])
                        });
                    }
                }
                else
                {
                    throw new Exception("Data Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = clist };
            }
            return new { Status = 1, Msg = "Success", Data = clist };
        }

        [HttpGet]
        public dynamic GetPendingPackingItemsDetails(string CompCode, string FY, int AccCode)
        {
            List<PendingPackingItemsDT> PList = new List<PendingPackingItemsDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); int SNo = 1;
                string sql = $"Select T1.VchCode, T1.VchNo, A.ItemCode, IsNull(M.[Name], '') as ItemName, Sum(Qty) as Qty, (Select Top 1 Price From ESJSLTran2 Where VchCode = T1.VchCode And ItemCode = A.ItemCode) as Price From ESJSLRefTran A Inner Join ESJSLTran1 T1 On A.OrderID = T1.VchCode Left Join Master1 M On A.ItemCode = M.Code And M.MasterType = 6 Where A.VchType = 109 And T1.MasterCode1 = {AccCode} Group By T1.VchCode, T1.VchNo, A.ItemCode, M.[Name] Having Sum(A.Qty) >= 0.01 Order By T1.VchCode, T1.VchNo";
                DataTable DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach(DataRow item in DT1.Rows)
                    {
                        PList.Add(new PendingPackingItemsDT
                        {
                            SNo = Convert.ToInt32(SNo++),
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = clsMain.MyString(item["VchNo"]),
                            ItemCode = Convert.ToInt32(item["ItemCode"]),
                            ItemName = clsMain.MyString(item["ItemName"]),
                            Qty = Convert.ToDecimal(item["Qty"]),
                            Price = Convert.ToDecimal(item["Price"]),
                            Amount = Convert.ToDecimal(Convert.ToDecimal(item["Qty"]) * Convert.ToDecimal(item["Price"]))
                        });
                    }
                }


            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Success", Data = PList };
        }

        [HttpPost]
        public dynamic SavePackingData(SPacking Obj, string CompCode, string FY)
        {
            int Status = 0; string StatusStr = string.Empty; string BoxNumber = string.Empty;
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                string XML = CreateXML(Obj?.BPItemDetails);
                string VchNo = GetVchNo(constr, Convert.ToInt32(103), Convert.ToInt32(3), out int AutoNo);

                SqlParameter[] parameter = new SqlParameter[]
                {
                    new SqlParameter("@VchCode", SqlDbType.Int) {Value = Obj.VchCode},
                    new SqlParameter("@VchNo", SqlDbType.VarChar, 40) { Value = VchNo },
                    new SqlParameter("@VchType", SqlDbType.Int) {  Value = 110},
                    new SqlParameter("@AutoVchNo", SqlDbType.Int) { Value = AutoNo },
                    new SqlParameter("@AccCode", SqlDbType.Int) { Value = Obj.AccCode },
                    new SqlParameter("@AccName", SqlDbType.VarChar, 100) { Value = Obj.AccName },
                    new SqlParameter("@Mobile", SqlDbType.VarChar, 20) { Value = Obj.Mobile},
                    new SqlParameter("@TQty", SqlDbType.Float) { Value = Obj.TotQty },
                    new SqlParameter("@TAmt", SqlDbType.Float) { Value = Obj.TotAmt },
                    new SqlParameter("@NetAmt", SqlDbType.Float) { Value = Obj.NetAmt },
                    new SqlParameter("@Users", SqlDbType.VarChar, 50) { Value = Obj.Users }
                };

                DataTable DT1 = new SQLHELPER(constr).getTable("[sp_SaveBoxPacking]", parameter);
                
                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    Status = Convert.ToInt32(DT1.Rows[0]["Status"]);
                    StatusStr = clsMain.MyString(DT1.Rows[0]["Msg"]);
                    BoxNumber = clsMain.MyString(DT1.Rows[0]["BoxNumber"]);
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = Status, Msg = StatusStr, Data = BoxNumber };
        }

        [HttpPost]
        public dynamic CreateParty(CCustomer obj, string CompCode, string FY)
        {
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                int Code = Convert.ToInt32(obj.Code); string sql = string.Empty;
                string formattedDate = DateTime.Now.ToString("dd-MMM-yyyy HH:mm:ss");

                if (Code == 0)
                {
                    sql = $"Select Top 1 * From ESJSLCustomer Where Mobile = '{obj?.Mobile.Replace("'", "''")}'";
                }
                else
                {
                    sql = $"Select Top 1 * From ESJSLCustomer Where Mobile = '{obj?.Mobile.Replace("'", "''")}' And Code <> {Code}";
                }
                DataTable DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    throw new Exception("Mobile No. Already Exists For The Some Customer !!!");
                }
                else
                {
                    if (Code == 0)
                    {
                        sql = $"Insert Into ESJSLCustomer ([Name], [Email], [Mobile], [GSTIN], [CM1], [CM2], [CM3], [CM4], [CM5], [Address], [OrgName], [CustType], [CreatedBy], [CreationTime]) Values ('{obj.Name.Replace("'", "''")}', '{obj.Email.Replace("'", "''")}', '{obj.Mobile.Replace("'", "''")}', '{obj.GSTNO.Replace("'", "''")}', {obj.CNCode}, {obj.STCode}, {obj.CTCode}, 0, 0, '{obj.Address.Replace("'", "''")}', '{obj.OrgName}', {obj.CustType}, '{obj.Users}', '{formattedDate}')";
                    }
                    else
                    {
                        sql = $"Update ESJSLCustomer Set [Name] = '{obj.Name.Replace("'", "''")}', [Mobile] = '{obj.Mobile.Replace("'", "''")}', [Email] = '{obj.Email.Replace("'", "''")}', [GSTIN] = '{obj.GSTNO.Replace("'", "''")}', [OrgName] = '{obj.OrgName.Replace("'", "''")}', [CM1] = {obj.CNCode}, [CM2] = {obj.STCode}, [CM3] = {obj.CTCode}, [Address] = '{obj.Address.Replace("'", "''")}', [CustType] = {obj.CustType}, [ModifiedBy] = '{obj.Users}', [ModificationTime] = '{formattedDate}' Where Code = {Code}";
                    }
                    int r = new SQLHELPER(constr).ExecuteSQL(sql);
                    if (r > 0)
                    {
                        var cList = GetCustomerDetails(obj?.Mobile, CompCode, FY);
                        var cDetails = cList?.Data as List<GetCustomerDT> ?? new List<GetCustomerDT>();
                        return new { Status = 1, Msg = Code == 0 ? "Customer Successfully Created !!!" : "Customer Successfully Modified !!!", Data = cDetails };
                    }
                    else
                    {
                        throw new Exception("Unable To Connect To Company !!!");
                    }
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString().Trim() };
            }
        }

        [HttpGet]
        public dynamic GetCustomerDetails(string Mobile, string CompCode, string FY)
        {
            List<GetCustomerDT> CList = new List<GetCustomerDT>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); string sql = string.Empty; DataTable DT1 = new DataTable();

                sql = $"Select * From ESJSLCUSTOMER WHERE [MOBILE] = '{Mobile.Replace("'", "''").ToString().Trim()}' AND DEACTIVE = 1";
                DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    throw new Exception("Customer account is deactivated. Please contact admin to reactivate your account.");
                }

                sql = $"Select IsNull([Code], 0) as Code, IsNull([Name], '') as Name, IsNull([Mobile], '') as Mobile  From ESJSLCUSTOMER WHERE [MOBILE] = '{Mobile.Replace("'", "''").ToString().Trim()}'";
                DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        CList.Add(new GetCustomerDT
                        {
                            Code = Convert.ToInt32(item["Code"]),
                            Name = item["Name"].ToString().Trim(),
                            Mobile = item["Mobile"].ToString().Trim(),
                        });
                    }
                }
                else
                {
                    throw new Exception("Customer Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = CList };
            }
            return new { Status = 1, Msg = "Success", Data = CList };
        }

        [HttpGet]
        public dynamic GetCustomerDetailsList(string CompCode, string FY, int CType)
        {
            List<Customers> CList = new List<Customers>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                string sql = $"Select IsNull(A.[Code], 0) as Code, IsNull(A.[Name], '') as Name, IsNull(A.[Mobile], '') as Mobile, IsNull(A.[Email], '') as Email, IsNull(A.[GSTIN], '') as GSTIN, IsNull(A.[OrgName], '') as FirmName, IsNull(A.[CM1], 0) as CNCode, IsNull(B.[Name], '') as CNName, IsNull(A.[CM2], 0) as STCode, IsNull(C.[Name], '') as STName, IsNull(A.[CM3], 0) as CTCode, IsNull(D.[Name], '') as CTName, IsNull(A.[Address], '') as [Address], IsNull(A.[CustType], 0) as CCode, (CASE WHEN IsNull(A.[CustType], 0) = 1 THEN 'B2B A' WHEN IsNull(A.[CustType], 0) = 2 THEN 'B2B B' WHEN IsNull(A.[CustType], 0) = 3 THEN 'B2C' END) as CName, IsNull(A.[Deactive], 0) as Deactive From ESJSLCUSTOMER A Left Join ESJSLCountryMaster B On A.CM1 = B.Code And B.MasterType = 1 Left Join ESJSLCountryMaster C On A.CM2 = C.Code And C.MasterType = 2 Left Join ESJSLCountryMaster D On A.[CM3] = D.[Code] And D.[MasterType] = 3 Where 1=1";
                if (CType != 0) sql += $" And A.[CustType] = {CType} "; sql += "Order By A.[Name]";
                DataTable DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        CList.Add(new Customers
                        {
                            Code = Convert.ToInt32(item["Code"]),
                            Name = item["Name"].ToString().Trim(),
                            Mobile = item["Mobile"].ToString().Trim(),
                            Email = item["Email"].ToString().Trim(),
                            GSTIN = item["GSTIN"].ToString().Trim(),
                            FirmName = item["FirmName"].ToString().Trim(),
                            CNCode = Convert.ToInt32(item["CNCode"]),
                            CNName = item["CNName"].ToString().Trim(),
                            STCode = Convert.ToInt32(item["STCode"]),
                            STName = item["STName"].ToString().Trim(),
                            CTCode = Convert.ToInt32(item["CTCode"]),
                            CTName = item["CTName"].ToString().Trim(),
                            Address = item["Address"].ToString().Trim(),
                            CCode = Convert.ToInt32(item["CCode"]),
                            CName = item["CName"].ToString().Trim(),
                            Deactive = Convert.ToInt32(item["Deactive"])
                        });
                    }
                }
                else
                {
                    throw new Exception("Customer Details Not Found !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString(), Data = CList };
            }
            return new { Status = 1, Msg = "Success", Data = CList };
        }

        [HttpGet]
        public dynamic CancelCustomer(string CompCode, string FY, int Code)
        {
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);

                string sql = $"Update ESJSLCustomer SET [DEACTIVE] = 1 WHERE Code = {Code}";
                int DT1 = new SQLHELPER(constr).ExecuteSQL(sql);

                if (DT1 == 1)
                {
                    return new { Status = 1, Msg = "Your Customer Has Been Successfully Deactivated !!!" };
                }
                else
                {
                    throw new Exception("An error occurred while deactivated customer to the database. Please try again later. !!!");
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
        }

        [HttpPost]
        public dynamic VoucherCancellation(dynamic obj, string CompCode, string FY, int TranType, int VchType, int VchCode)
        {
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY); string sql = string.Empty;
                DataTable DT1 = new DataTable(); int DT2 = 0;
                switch (TranType)
                {
                    case 1:

                        sql = $"Select Top 1 * From ESJSLRefTran Where VchType = {VchType} And OrderId = {VchCode} And Method = 2";
                        DT1 = new SQLHELPER(constr).getTable(sql);

                        if (DT1 != null && DT1.Rows.Count > 0) 
                        {
                            throw new Exception("This voucher cannot be fully canceled as it has already been adjusted. Please check the voucher status. !!!");
                        }
                        else
                        {
                            sql = $"Update ESJSLTRAN1 SET [CANCELLED] = 1 WHERE VchCode = {VchCode} And VchType = {VchType}";
                            DT2 = new SQLHELPER(constr).ExecuteSQL(sql);

                            if (DT2 == 1)
                            {
                                return new { Status = 1, Msg = "Order Is Successfully Cancelled !!!" };
                            }
                            else
                            {
                                throw new Exception("An error occurred while canceled voucher. Please try again later !!!");
                            }
                        }

                    case 2:

                        string formattedDate = DateTime.Now.ToString("dd-MMM-yyyy");
                        JObject filterObject = JObject.FromObject(obj);
                        var CancelItems = filterObject["CancelItems"]?.ToObject<List<JObject>>();

                        foreach (var item in CancelItems)
                        {
                            var OrderId = item["OrderId"]?.ToObject<int>() ?? 0;
                            var OrderNo = item["OrderNo"]?.ToObject<string>() ?? "";
                            var AccCode = item["AccCode"]?.ToObject<int>() ?? 0;
                            var ItemCode = item["ItemCode"]?.ToObject<int>() ?? 0;
                            var Qty = item["Qty"]?.ToObject<double>() ?? 0;
                            var Price = item["Price"]?.ToObject<double>() ?? 0;
                            var Amount = item["Amount"]?.ToObject<double>() ?? 0;

                            sql = $"INSERT INTO ESJSLREFTRAN ([VchCode], [VchType], [RecType], [Method], [RefNo], [Date], [MasterCode1], [ItemCode], [Qty], [Price], [Amount], [OrderId]) VALUES (0, {VchType}, 2, 2, '{OrderNo}', '{formattedDate}', {AccCode}, {ItemCode}, {(Qty * (-1))}, {Price}, {Amount}, {OrderId})";
                            DT2 = new SQLHELPER(constr).ExecuteSQL(sql);

                            if (DT2 == 0) throw new Exception("An error occurred while canceled voucher. Please try again later !!!");
                        }

                        break;
                    case 3:
                        break;
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Order Is Successfully Cancelled !!!" };
        }

        [HttpGet]
        public dynamic GetSalesmanWiseCustomerList(string CompCode, string FY, string Users, int VchType, string startDate, string endDate, int CType)
        {
            List<CustomerList> clist = new List<CustomerList>();
            try
            {
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);
                string formattedStartDate = string.IsNullOrEmpty(startDate) ? "" : Busyhelper.FormatDate(startDate);
                string formattedEndDate = string.IsNullOrEmpty(endDate) ? "" : Busyhelper.FormatDate(endDate);

                string sql = $"Select A.AccCode, ISNULL(B.[Name], '') As AccName, ISNULL(B.[Mobile], '') as Mobile, IsNull(B.[Email], '') as Email, IsNull(B.[OrgName], '') as FirmName, IsNull(B.[Address], '') as [Address], IsNull(B.[CustType], 0) as CTCode, IsNull(B.[Deactive], 0) as Deactive, (CASE WHEN [CustType] = 1 THEN 'B2B A' WHEN [CustType] = 2 THEN 'B2B B' WHEN  [CustType] = 3 THEN 'B2C' ELSE '' END) as CTName From (";
                sql += $"Select IsNull(A.[MasterCode1], 0) as AccCode From ESJSLTRAN1 A Inner Join ESUserMapping B On A.CreatedBy = B.[User] Where B.UType in (1,2) And B.[User] = '{Users.Replace("'", "''").Trim()}' And VchType = {VchType} ";
                if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And A.[Date] >= '{formattedStartDate}' And A.[Date] <= '{formattedEndDate}' ";
                sql += "Group By A.[MasterCode1]) A Inner Join ESJSLCustomer B On A.AccCode = B.Code ";
                if (CType != 0) sql += $"And B.[CustType] = {CType} "; sql+= "Order By A.[AccName]";

                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        clist.Add(new CustomerList
                        {
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]),
                            Mobile = clsMain.MyString(item["Mobile"]),
                            Email = clsMain.MyString(item["Email"]),
                            FirmName = clsMain.MyString(item["FirmName"]),
                            Address = clsMain.MyString(item["Address"]),
                            CTCode = Convert.ToInt32(item["CTCode"]),
                            CTName = clsMain.MyString(item["CTName"]),
                            Deactive = Convert.ToInt32(item["Deactive"])
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!", Data = clist };
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString() };
            }
            return new { Status = 1, Msg = "Success", Data = clist };
        }

        [HttpGet]
        public dynamic GetSalesManWiseOrderGraffDetails(string CompCode, string FY, string Users, int AccCode, int VchType, string StartDate, string EndDate)
        {
            List<SalesManOrdersDt> slist = new List<SalesManOrdersDt>();
            List<GraffYear> dlist = new List<GraffYear>();
            try
            {
                string formattedStartDate = string.IsNullOrEmpty(StartDate) ? "" : Busyhelper.FormatDate(StartDate);
                string formattedEndDate = string.IsNullOrEmpty(EndDate) ? "" : Busyhelper.FormatDate(EndDate);
                string constr = GetConnectionString(Provider, CompCode, FY);
                SQLHELPER conobj = new SQLHELPER(constr);

                // Fetch Salesman Order Amount using the new function
                dlist = GetSalesmanOrderAmount(constr, Users, AccCode, VchType, formattedStartDate, formattedEndDate);

                string sql = $"Select A.[VchCode], IsNull(A.[VchNo], '') as VchNo, Convert(Varchar, A.[Date], 105) as Date, IsNull(A.[MasterCode1], 0) as AccCode, IsNull(A.[CustName], '') as AccName, IsNull(A.[CMobile], '') as Mobile,IsNull(A.[TotQty], 0) as TotQty,IsNull(A.[TotAmt], 0) as TotAmt,IsNull(A.[NetAmount], 0) as NetAmt,IsNull(A.[QStatus], 0) as QStatus,(CASE WHEN A.[QStatus] = 1 Then 'Approved' WHEN A.[QStatus] = 2 Then 'Rejected' ELSE 'Pending' END) as QName, IsNull(C.[CustType], 0) as CTCode, (CASE WHEN C.[CustType] = 1 THEN 'B2B A' WHEN C.[CustType] = 2 THEN 'B2B B' WHEN C.[CustType] = 3 THEN 'B2C' ELSE '' END) as CTName, IsNull(A.[Remarks], '') as Remarks From ESJSLTRAN1 A Inner Join ESUserMapping B On A.CreatedBy = B.[User] Inner Join ESJSLCustomer C On A.MasterCode1 = C.Code Where B.UType in (1,2) And B.[User] = '{Users.Replace("'", "''").Trim()}' And A.[MasterCode1] = {AccCode} And A.[VchType] = {VchType}";
                if (!string.IsNullOrEmpty(formattedStartDate) && !string.IsNullOrEmpty(formattedEndDate)) sql += $" And Date >= '{formattedStartDate}' And Date <= '{formattedEndDate}'";
                sql += "ORDER BY A.[VchCode] DESC, [Date] DESC";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        slist.Add(new SalesManOrdersDt
                        {
                            VchCode = Convert.ToInt32(item["VchCode"]),
                            VchNo = item["VchNo"].ToString().Trim(),
                            Date = item["Date"].ToString().Trim(),
                            AccCode = Convert.ToInt32(item["AccCode"]),
                            AccName = clsMain.MyString(item["AccName"]).Trim(),
                            Mobile = clsMain.MyString(item["Mobile"]).Trim(),
                            TQty = Convert.ToDecimal(item["TotQty"]),
                            TAmt = Convert.ToDecimal(item["TotAmt"]),
                            NetAmt = Convert.ToDecimal(item["NetAmt"]),
                            SCode = Convert.ToInt32(item["QStatus"]),
                            SName = clsMain.MyString(item["QName"]),
                            CTCode = Convert.ToInt32(item["CTCode"]),
                            CTName = clsMain.MyString(item["CTName"]),
                            Remarks = clsMain.MyString(item["Remarks"])
                        });
                    }
                }
                else
                {
                    return new { Status = 0, Msg = "Data Not Found !!!"};
                }
            }
            catch (Exception ex)
            {
                return new { Status = 0, Msg = ex.Message.ToString()};
            }
            return new { Status = 1, Msg = "Success", Data = new { DiscountDetails = dlist, ItemDetails = slist } };
        }

        public dynamic GetSalesmanOrderAmount(string constr, string Users, int AccCode, int VchType, string StartDate, string EndDate)
        {
            List<GraffYear> Grafyear = new List<GraffYear>();
            try
            {
                SQLHELPER conobj = new SQLHELPER(constr);
                string sql = $"Select YEAR(A.[DATE]) as [YEAR], MONTH(A.[DATE]) as [MONTH], CONVERT(CHAR(3), DATENAME(MONTH, A.[DATE])) As MName, IsNull(SUM(A.[NetAmount]), 0) as QutAmt, IsNull((SUM(A.[NetAmount]) - 100), 0) as InvAmt From ESJSLTRAN1 A Inner Join ESUserMapping B On A.CreatedBy = B.[User] Where B.UType in (1,2) And B.[User] = '{Users}' And A.[MasterCode1] = {AccCode} And A.[VchType] = {VchType}";
                if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(EndDate)) sql += $" And A.[Date] >= '{StartDate}' And A.[Date] <= '{EndDate}'"; sql += $"Group By YEAR(A.[DATE]), MONTH(A.[DATE]),  CONVERT(CHAR(3), DATENAME(MONTH, A.[DATE]))";
                DataTable DT1 = conobj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    foreach (DataRow item in DT1.Rows)
                    {
                        int rootCode = Convert.ToInt32(item["YEAR"]);
                        int dataItemCode = Convert.ToInt32(item["MONTH"]);

                        // Find or create the root data object
                        GraffYear rootData = Grafyear.FirstOrDefault(rd => rd.Year == rootCode);
                        if (rootData == null)
                        {
                            rootData = new GraffYear
                            {
                                Year = rootCode,
                                Months = new List<Months>()
                            };
                            Grafyear.Add(rootData);
                        }

                        Months dataItem = rootData.Months.FirstOrDefault(di => di.MonthsCode == dataItemCode);
                        if (dataItem == null)
                        {
                            dataItem = new Months
                            {
                                MonthsCode = dataItemCode,
                                MonthsName = clsMain.MyString(item["MName"]),
                                QuotaionAmt = Convert.ToDecimal(item["QutAmt"]),
                                InvoiceAmt = Convert.ToDecimal(item["InvAmt"]),
                            };
                            rootData.Months.Add(dataItem);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching salesman order amount: " + ex.Message);
            }
            return Grafyear;
        }

        public GetPrice GetProductMinAndMaxPrice(string constr, int ParentGrp)
        {
            GetPrice price = new GetPrice();
            try
            {
                SQLHELPER objcon = new SQLHELPER(constr);
                string sql = $"Select IsNull(Min(A.[D2]), 0) as MinPrice, IsNull(Max(A.[D2]), 0) as MaxPrice From (Select Code, isNull([D2], 0) as D2 From Master1 Where ParentGrp = {ParentGrp} And MasterType  = 6 And [D2] > 0) A";
                DataTable DT1 = objcon.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    price.MinPrice = Convert.ToDecimal(DT1.Rows[0]["MinPrice"]);
                    price.MaxPrice = Convert.ToDecimal(DT1.Rows[0]["MaxPrice"]);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching Price : " + ex.Message);
            }
            return price;
        }

        [HttpGet]
        public string GetAllParentGroups(int ParentGrp, string ConStr)
        {
            string GroupStr = Convert.ToString(ParentGrp);
            try
            {
                GetItemAllParentQueryStr(ParentGrp, ref GroupStr, ConStr);
            }
            catch
            {
                return GroupStr;
            }
            return GroupStr;
        }

        public void GetItemAllParentQueryStr(int ParentGrp, ref string GroupStr, string ConStr)
        {
            try
            {
                string sql = "";
                // sqlhelper Obj = new sqlhelper();
                DataTable dt = new DataTable();
                sql = "Select A.ParentGrp as Code From Master1 A Where A.Code = " + ParentGrp + " And A.MasterType = 5 And A.ParentGrp > 0";
                if (Provider == 1)
                {
                    dt = new OLEDBHELPER(ConStr).getTable(sql);
                }
                else
                {
                    dt = new SQLHELPER(ConStr).getTable(sql);
                }
                if ((dt != null) && (dt.Rows.Count > 0))
                {
                    foreach (DataRow Row in dt.Rows)
                    {
                        if (GroupStr.Length > 0) { GroupStr = GroupStr + "," + Convert.ToString(Row["Code"]); } else { GroupStr = Convert.ToString(Row["Code"]); }
                        GetItemAllParentQueryStr(Convert.ToInt32(Row["Code"]), ref GroupStr, ConStr);
                    }
                }
            }
            catch
            {

            }
        }

        [HttpGet]
        public string GetAllItemSubGroups(int ParentGrp, string ConStr)
        {
            string GroupStr = Convert.ToString(ParentGrp);
            try
            {
                GetItemAllChildQueryStr(ParentGrp, ref GroupStr, ConStr);
            }
            catch
            {
                return GroupStr;
            }
            return GroupStr;
        }

        public void GetItemAllChildQueryStr(int ParentGrp, ref string GroupStr, string ConStr)
        {
            try
            {
                string sql = "";
                // sqlhelper Obj = new sqlhelper();
                DataTable dt = new DataTable();
                sql = "Select A.Code From Master1 A Where A.ParentGrp = " + ParentGrp + " And A.MasterType = 5 Order By A.Code";
                if (Provider == 1)
                {
                    dt = new OLEDBHELPER(ConStr).getTable(sql);
                }
                else
                {
                    dt = new SQLHELPER(ConStr).getTable(sql);
                }
                if ((dt != null) && (dt.Rows.Count > 0))
                {
                    foreach (DataRow Row in dt.Rows)
                    {
                        if (GroupStr.Length > 0) { GroupStr = GroupStr + "," + Convert.ToString(Row["Code"]); } else { GroupStr = Convert.ToString(Row["Code"]); }
                        GetItemAllChildQueryStr(Convert.ToInt32(Row["Code"]), ref GroupStr, ConStr);
                    }
                }
            }
            catch
            {

            }
        }

        //        [HttpPost]
        //        public UserRegister UserRegistartion(UserData UserDT, string CompCode, string FY)
        //        {
        //            UserRegister UR = new UserRegister();
        //            try
        //            {
        //                int Status = 0;
        //                string Msg = "Failed";
        //                DataTable dt = new DataTable();
        //                DataTable dt1 = new DataTable();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                string sql = "";
        //                if (Provider == 1)
        //                {
        //                    sql = "Select IIF(IsNull(M.Code), 0,M.Code) as AccCode From Master1 M Inner Join MasterAddressInfo MA On M.Code = MA.MasterCode Where MA.Mobile = '" + UserDT.UserID + "' And M.MasterType = 2";
        //                    dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                }
        //                else
        //                {
        //                    sql = "Select IsNull(M.Code, 0) as AccCode From Master1 M Inner Join MasterAddressInfo MA On M.Code = MA.MasterCode Where MA.Mobile = '" + UserDT.UserID + "' And M.MasterType = 2";
        //                    dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    sql = "Select Top 1 * From ESUserLogin Where PhoneNo = '" + UserDT.UserID + "'";
        //                    if (Provider == 1)
        //                    {
        //                        dt1 = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt1 = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt1 != null && dt1.Rows.Count > 0)
        //                    {
        //                        Status = -1;
        //                        Msg = "User Already Exist";
        //                    }
        //                    else
        //                    {
        //                        int R = 0;
        //                        sql = "insert into ESUserLogin([SalesManCode],[Name],[Pwd],[Deactivate],[PhoneNo],[Approved],[DeviceId],[TokenId],[UserType]) Values(" + clsMain.MyInt(dt.Rows[0]["AccCode"]) + ",'" + UserDT.UserName.Replace("'", "''") + "','" + UserDT.PWD.Replace("'", "''") + "', 0,'" + UserDT.UserID.Replace("'", "''") + "', 0, '', '', 2)";
        //                        if (Provider == 1)
        //                        {
        //                            R = new ESCommon.OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R = new ESCommon.SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        if (R > 0)
        //                        {
        //                            Status = 1;
        //                            Msg = "User Registered Successfully";
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    Status = -2;
        //                    Msg = "User Not Exist in Busy";
        //                }
        //                UR.Status = Status;
        //                UR.Message = Msg;
        //            }
        //            catch (Exception EX)
        //            {
        //                UR = new UserRegister();
        //                UR.Status = 0;
        //                UR.Message = EX.Message.ToString();
        //                return UR;
        //            }
        //            return UR;
        //        }

        //        [HttpGet]
        //        public dynamic ChangePassword(int UserId, string Pwd, string CompCode, string FY)
        //        {

        //            string Message = "";
        //            int Status = 0;
        //            try
        //            {
        //                string sql = "";
        //                // ESCommon.SQLHELPER Obj = new ESCommon.SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                int R;
        //                sql = "Update ESUserLogin Set Pwd = '" + Pwd + "' Where SalesmanCode = " + UserId + "";
        //                if (Provider == 1)
        //                {
        //                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                }
        //                else
        //                {
        //                    R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                }
        //                if (R > 0)
        //                {
        //                    Message = "Success";
        //                    Status = 1;
        //                }
        //                else
        //                {
        //                    Message = "Failed";
        //                    Status = 0;
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = 0, Msg = EX.Message.ToString() };
        //            }
        //            return new { Status = Status, Msg = Message.ToString() };
        //        }
        //        [HttpGet]
        //        public dynamic GetPartyWiseSaleType(int PartyId, string CompCode, string FY)
        //        {
        //            PartySaleType SPT = new PartySaleType();
        //            try
        //            {
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable DT = new DataTable();


        //                queryStr = "select isnull(A.Cm6,0) as SCOde,isnull(A1.name,'') as Name From Master1 A LEft join Master1 A1 On A.Cm6=A1.COde WHERE A.Code =" + PartyId + " And A.MasterType =2";
        //                if (Provider == 1)
        //                {
        //                    DT = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    DT = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (DT != null && DT.Rows.Count > 0)
        //                {
        //                    SPT.SType = clsMain.MyString(DT.Rows[0]["name"]);
        //                    SPT.STypeCode = clsMain.MyInt(DT.Rows[0]["name"]);
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = -1, Msg = EX.Message.ToString(), Data = SPT };
        //            }
        //            return new { Status = 1, Msg = "Sucess", Data = SPT };
        //        }
        //        [HttpGet]
        //        public dynamic GetUserWiseData(int UCode, string CompCode, string FY)
        //        {
        //            UserWiseData SPT = new UserWiseData();
        //            try
        //            {
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable DT = new DataTable();


        //                queryStr = "Select Top 1 Convert(Varchar,[CreatedDate],103) as CreatedDate,SalesManId,Address,Latitude,longitude From ESSalesManLocation Where SalesManId = " + UCode + " Order By CreatedDate desc";
        //                if (Provider == 1)
        //                {
        //                    DT = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    DT = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (DT != null && DT.Rows.Count > 0)
        //                {
        //                    SPT.CreateDate = clsMain.MyString(DT.Rows[0]["CreatedDate"]);

        //                    SPT.Address = clsMain.MyString(DT.Rows[0]["Address"]);
        //                    SPT.UCode = UCode;
        //                    SPT.Latitude = clsMain.MyString(DT.Rows[0]["Latitude"]);
        //                    SPT.Longitude = clsMain.MyString(DT.Rows[0]["longitude"]);
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = -1, Msg = EX.Message.ToString(), Data = SPT };
        //            }
        //            return new { Status = 1, Msg = "Sucess", Data = SPT };
        //        }
        //        [HttpGet]
        //        public dynamic IfAlreadyInCart(int SalesManId, int PartyId, int ProductCode, string CompCode, string FY)
        //        {

        //            int Status = 1;
        //            string Msg = "Not Exist";

        //            try
        //            {


        //                //ESCommon.SQLHELPER Obj = new ESCommon.SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable DT = new DataTable();


        //                queryStr = "Select Top 1 Id From ESSalesMenCart Where SalesManId = " + SalesManId + " and PartyId = " + PartyId + " and ProductCode = " + ProductCode + "";
        //                //DataTable DT = Obj.getTable(sql);
        //                if (Provider == 1)
        //                {
        //                    DT = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    DT = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (DT != null && DT.Rows.Count > 0)
        //                {
        //                    Status = 2;
        //                    Msg = "Already Exist";
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = -1, Msg = EX.Message.ToString() };
        //            }
        //            return new { Status = Status, Msg = Msg };
        //        }
        //        [HttpGet]
        //        public dynamic GetInvVchEnteries(int VchCode, string CompCode, string FY)
        //        {

        //            BusyVoucher.InvVoucher Inv = new BusyVoucher.InvVoucher();
        //            Inv.ItemEntries = new List<BusyVoucher.InvItemDetail>();
        //            Inv.BSEntries = new List<BusyVoucher.InvBSDetail>();
        //            string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //            string queryStr = "";

        //            try
        //            {
        //                DataTable dt1 = new DataTable();



        //                queryStr = "Select A.VchCode,IsNull(M1.Name,'') as SeriesName,Convert(Varchar,A.[Date],103) as VchDate,LTrim(A.VchNo) as VchNo,IsNull(M2.Name,'') as PartyName,IsNull(V.Narration1,'') as Narration1,A.VchAmtBaseCur as NetAmount,Abs(Sum(B.D1)) as Qty,Sum(B.D5) as Amount From ((((Tran1 A Left Join Master1 M1 On A.VchSeriesCode = M1.Code)";
        //                queryStr = queryStr + " Left Join Master1 M2 On A.MasterCode1 = M2.Code) Left Join Tran2 B On A.VchCode = B.VchCode And B.RecType In (2,7)) Left Join VchOtherInfo V On A.VchCode = V.VchCode) Where A.VchCode = " + VchCode + " Group By A.VchCode,M1.Name,A.[Date],A.VchNo,IsNull(M2.Name, ''),A.VchAmtBaseCur,V.Narration1";

        //                DataTable dt = new SQLHELPER(ConnectionString).getTable(queryStr);

        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    Inv.VchSeriesName = clsMain.MyString(dt.Rows[0]["SeriesName"]).Substring(2);
        //                    Inv.Date = clsMain.MyString(dt.Rows[0]["VchDate"]);
        //                    Inv.VchNo = clsMain.MyString(dt.Rows[0]["VchNo"]);
        //                    Inv.PartyName = clsMain.MyString(dt.Rows[0]["PartyName"]);
        //                    Inv.TQty = clsMain.MyDouble(dt.Rows[0]["Qty"]);
        //                    Inv.TAmount = clsMain.MyDouble(dt.Rows[0]["Amount"]);
        //                    Inv.NetAmount = clsMain.MyDouble(dt.Rows[0]["NetAmount"]);
        //                    Inv.Narration = clsMain.MyString(dt.Rows[0]["Narration1"]);

        //                    queryStr = "Select A.SrNo,IsNull(M1.Name,'') as ItemName,Abs(A.Value1) as MQty,IsNull(M2.Name,'') as UnitName,Abs(A.Value2) as AQty,A.D2,A.D5 from Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On A.CM2 = M2.Code Where A.VchCode = " + VchCode + " And A.RecType In (4,15) Order By A.SrNo";
        //                    dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (dt1 != null && dt1.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in dt1.Rows)
        //                        {
        //                            Inv.ItemEntries.Add(new BusyVoucher.InvItemDetail()
        //                            {
        //                                SrNo = clsMain.MyInt(dr1["SrNo"]),
        //                                ItemName = clsMain.MyString(dr1["ItemName"]),
        //                                QtyMainUnit = clsMain.MyDouble(dr1["MQty"]),
        //                                QtyAltUnit = clsMain.MyDouble(dr1["AQty"]),
        //                                UnitName = clsMain.MyString(dr1["UnitName"]),
        //                                Price = clsMain.MyDouble(dr1["D2"]),
        //                                Amount = clsMain.MyDouble(dr1["D5"])
        //                            });
        //                        }
        //                    }

        //                    queryStr = "Select A.SrNo,IsNull(M1.Name,'') as BSName,Abs(A.Value1) as BSPer,Abs(A.Value3) as Amount from Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code Where A.VchCode = " + VchCode + " And A.RecType In (3) Order By A.SrNo";
        //                    dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (dt1 != null && dt1.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in dt1.Rows)
        //                        {
        //                            Inv.BSEntries.Add(new BusyVoucher.InvBSDetail()
        //                            {
        //                                SrNo = clsMain.MyInt(dr1["SrNo"]),
        //                                BSName = clsMain.MyString(dr1["BSName"]),
        //                                BSPer = clsMain.MyDouble(dr1["BSPer"]),
        //                                Amount = clsMain.MyDouble(dr1["Amount"]),
        //                            });
        //                        }
        //                    }
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = 0, Msg = EX.Message.ToString(), Data = Inv };
        //            }
        //            return new { Status = 1, Msg = "Success", Data = Inv };
        //        }


        //        //[HttpGet]
        //        //public User GetLogin(string UserId, string Pwd, string DeviceId, string TokenId,string CompCode,string FY)
        //        //{
        //        //    //string strQry = "";
        //        //    //strQry = "Select * from ESUserLogin where Name = '" + UserId + "' and Pwd = '" + Pwd + "'";
        //        //    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //        //    //DataTable dt = obj.getTable(strQry);

        //        //    SqlParameter[] Para = new SqlParameter[4];
        //        //    Para[0] = new SqlParameter("@UserId", clsMain.MyString(UserId));
        //        //    Para[1] = new SqlParameter("@Pwd", clsMain.MyString(Pwd));
        //        //    Para[2] = new SqlParameter("@DeviceId", clsMain.MyString(DeviceId));
        //        //    Para[3] = new SqlParameter("@TokenId", clsMain.MyString(TokenId));
        //        //    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_Login", Para);

        //        //    string ClosingBal;
        //        //    double CBalance;
        //        //    Data data = new Data();
        //        //    User objResult = new User();
        //        //    if (dt != null && dt.Rows.Count == 1)
        //        //    {
        //        //        foreach (DataRow row in dt.Rows)
        //        //        {
        //        //            objResult.Message = clsMain.MyString(row["msg"]);
        //        //            objResult.Sucess = clsMain.MyInt(row["Sucess"]); ;
        //        //            data.Pwd = clsMain.MyString(row["Pwd"]);
        //        //            data.UserName = clsMain.MyString(row["Name"]);
        //        //            //data.Pwd = clsMain.MyString(row["Pwd"]);
        //        //            //data.UserName = clsMain.MyString(row["Name"]);
        //        //            data.UserId = clsMain.MyString(row["id"]);
        //        //            data.Deactivate = clsMain.MyString(row["Deactivate"]);
        //        //            data.Approved = clsMain.MyString(row["Approved"]);
        //        //            data.UserType = clsMain.MyInt(row["UserType"]);
        //        //            CBalance = clsMain.MyDouble(row["CLBalance"]);

        //        //            ClosingBal = "0.00";
        //        //            if (CBalance > 0)
        //        //            {
        //        //                ClosingBal = string.Format("{0:0.00}", ClosingBal) + " Cr.";
        //        //            }

        //        //            else if (CBalance < 0)
        //        //            {
        //        //                ClosingBal = string.Format("{0:0.00}", CBalance * (-1)) + " Dr.";
        //        //            }
        //        //            data.ClosingBal = ClosingBal.ToString();
        //        //            data.FromDate = "01/04/" + FinYr.ToString();
        //        //            data.ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "";
        //        //            data.PartyName = (string)row["PartyNM"];
        //        //            data.CROTPVerify = clsMain.MyInt(row["CROTPVerify"]);
        //        //            data.Admin = clsMain.MyInt(row["Admin"]);
        //        //            data.LedRRight = clsMain.MyInt(row["LedRRight"]);
        //        //            data.BWSRRight = clsMain.MyInt(row["BWSRRight"]);
        //        //            data.CatLRight = clsMain.MyInt(row["CatLRight"]);
        //        //            data.SARRight = clsMain.MyInt(row["SARRight"]);
        //        //            data.COrderRight = clsMain.MyInt(row["CORDRight"]);
        //        //            data.PAddShowRight = clsMain.MyInt(row["PAddShowRight"]);
        //        //            data.SharePDFRight = clsMain.MyInt(row["SharePDFRight"]);
        //        //            data.StockShowRight = clsMain.MyInt(row["StockShowRight"]);
        //        //            data.CInvRight = clsMain.MyInt(row["CInvRight"]);
        //        //            data.CRcptRight = clsMain.MyInt(row["CRcptRight"]);
        //        //            data.SRetRight = clsMain.MyInt(row["SRetRight"]);
        //        //            data.STfrRight = clsMain.MyInt(row["STfrRight"]);
        //        //            data.ExpRight = clsMain.MyInt(row["ExpRight"]);
        //        //            data.AppGSelection = GetAppGSelectionValue(ConnectionString);
        //        //            objResult.data = data;
        //        //        }
        //        //    }
        //        //    else
        //        //    {
        //        //        objResult.Message = "LogIn Fail";
        //        //        objResult.Sucess = 0;
        //        //    }

        //        //    return objResult;
        //        //}

        //        [HttpGet]
        //        public User GetLogin(string UserId, string Pwd, string DeviceId, string TokenId, string CompCode, string FY, int Itype = 1)
        //        {
        //            User objResult = new User();

        //            string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //            if (Provider == 1)
        //            {
        //                objResult = GetLoginAccess(UserId, Pwd, DeviceId, TokenId, ConnectionString, Itype);
        //            }
        //            else
        //            {
        //                objResult = GetLoginSQL(UserId, Pwd, DeviceId, TokenId, ConnectionString, Itype);
        //            }
        //            return objResult;
        //        }

        //        private User GetLoginSQL(string UserId, string Pwd, string DeviceId, string TokenId, string ConnectionString, int Itype)
        //        {
        //            User objResult = new User();
        //            try
        //            {
        //                SqlParameter[] Para = new SqlParameter[5];
        //                Para[0] = new SqlParameter("@UserId", clsMain.MyString(UserId));
        //                Para[1] = new SqlParameter("@Pwd", clsMain.MyString(Pwd));
        //                Para[2] = new SqlParameter("@DeviceId", clsMain.MyString(DeviceId));
        //                Para[3] = new SqlParameter("@TokenId", clsMain.MyString(TokenId));
        //                Para[4] = new SqlParameter("@Itype", clsMain.MyString(Itype));

        //                DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_Login", Para);

        //                string ClosingBal;
        //                double CBalance;
        //                Data data = new Data();

        //                if (dt != null && dt.Rows.Count == 1)
        //                {
        //                    foreach (DataRow row in dt.Rows)
        //                    {
        //                        objResult.Message = clsMain.MyString(row["msg"]);
        //                        objResult.Sucess = clsMain.MyInt(row["Sucess"]); ;
        //                        data.Pwd = clsMain.MyString(row["Pwd"]);
        //                        data.UserName = clsMain.MyString(row["Name"]);
        //                        //data.Pwd = clsMain.MyString(row["Pwd"]);
        //                        //data.UserName = clsMain.MyString(row["Name"]);
        //                        data.UserId = clsMain.MyString(row["id"]);
        //                        data.Deactivate = clsMain.MyString(row["Deactivate"]);
        //                        data.Approved = clsMain.MyString(row["Approved"]);
        //                        data.UserType = clsMain.MyInt(row["UserType"]);
        //                        CBalance = clsMain.MyDouble(row["CLBalance"]);

        //                        ClosingBal = "0.00";
        //                        if (CBalance > 0)
        //                        {
        //                            ClosingBal = string.Format("{0:0.00}", ClosingBal) + " Cr.";
        //                        }

        //                        else if (CBalance < 0)
        //                        {
        //                            ClosingBal = string.Format("{0:0.00}", CBalance * (-1)) + " Dr.";
        //                        }
        //                        data.ClosingBal = ClosingBal.ToString();
        //                        data.FromDate = "01/04/" + FinYr.ToString();
        //                        data.ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "";
        //                        data.PartyName = (string)row["PartyNM"];
        //                        data.CROTPVerify = clsMain.MyInt(row["CROTPVerify"]);
        //                        data.Admin = clsMain.MyInt(row["Admin"]);
        //                        data.LedRRight = clsMain.MyInt(row["LedRRight"]);
        //                        data.BWSRRight = clsMain.MyInt(row["BWSRRight"]);
        //                        data.CatLRight = clsMain.MyInt(row["CatLRight"]);
        //                        data.SARRight = clsMain.MyInt(row["SARRight"]);
        //                        data.COrderRight = clsMain.MyInt(row["CORDRight"]);
        //                        data.PAddShowRight = clsMain.MyInt(row["PAddShowRight"]);
        //                        data.SharePDFRight = clsMain.MyInt(row["SharePDFRight"]);
        //                        data.StockShowRight = clsMain.MyInt(row["StockShowRight"]);
        //                        data.CInvRight = clsMain.MyInt(row["CInvRight"]);
        //                        data.CRcptRight = clsMain.MyInt(row["CRcptRight"]);
        //                        data.SRetRight = clsMain.MyInt(row["SRetRight"]);
        //                        data.STfrRight = clsMain.MyInt(row["STfrRight"]);
        //                        data.ExpRight = clsMain.MyInt(row["ExpRight"]);
        //                        data.SQuoRight = clsMain.MyInt(row["SQuaRight"]);
        //                        data.SalesManTag = clsMain.MyInt(row["SalesManTag"]);
        //                        data.AppGSelection = GetAppGSelectionValue(ConnectionString);
        //                        data.BillInAltUnit = GetBillinginAltUnitStatus(ConnectionString);
        //                        objResult.data = data;
        //                    }
        //                }
        //                else
        //                {
        //                    objResult.Message = "LogIn Fail";
        //                    objResult.Sucess = 0;
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                objResult.Message = EX.Message.ToString();
        //                objResult.Sucess = 0;
        //            }
        //            return objResult;
        //        }

        //        private User GetLoginAccess(string UserId, string Pwd, string DeviceId, string TokenId, string ConnectionString, int Itype)
        //        {
        //            User objResult = new User();
        //            try
        //            {
        //                string sql = "";
        //                string ClosingBal;
        //                double CBalance = 0;
        //                Data data = new Data();

        //                sql = "Select IIF(IsNull(SalesManCode),0,SalesManCode) as MID,ID as UserCode,IIF(IsNull(M.Name),'',M.Name) as PartyName,IIF(IsNull(Deactivate),0,Deactivate) as Deactive,IIF(isnull(Approved),0,Approved) as UApproved,IIF(isnull(UserType),0,UserType) as LUserType,DeviceId as DevID,IIF(ISNULL(SalesHead),0,SalesHead) as UAdmin,IIF(IsNull(LedRRight),0,LedRRight) as LLedRRight,";
        //                sql = sql + "IIF(IsNull(BWSRRight),0,BWSRRight) as LBWSRRight,IIF(IsNull(CatLRight),0,CatLRight) as LCatLRight,IIF(IsNull(SARRight),0,SARRight) as LSARRight,IIF(IsNull(CORDRight),0,CORDRight) as LCORDRight,IIF(IsNull(PAddShowRight),0,PAddShowRight) as LPAddShowRight,IIF(IsNull(SharePdf),0,SharePdf) as LSharePDFRight,IIF(IsNull(StockShow),0,StockShow) as LStockShowRight,";
        //                sql = sql + "IIF(IsNull(CInvRight),0,CInvRight) as LCInvRight,IIF(IsNull(CRcptRight),0,CRcptRight) as LCRcptRight,IIF(IsNull(SRetRight),0,SRetRight) as LSRetRight,IIF(IsNull(STfrRight),0,STfrRight) as LSTfrRight,IIF(IsNull(ExpRight),0,ExpRight) as LExpRight,IIF(IsNull(SQuaRight),0,SQuaRight) as LSQuaRight,IIF(IsNull(SalesManTag),0,SalesManTag) as LSalesManTag from ESUserLogin eu Left Join Master1 M On eu.SalesManCode = M.Code where PhoneNo = '" + UserId + "' and Pwd = '" + Pwd + "'";
        //                DataTable dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                if (dt != null && dt.Rows.Count > 0)
        //                {

        //                    DataRow row = dt.Rows[0];

        //                    data.Pwd = clsMain.MyString(Pwd);
        //                    data.UserName = clsMain.MyString(UserId);
        //                    data.UserId = clsMain.MyString(row["MID"]);
        //                    data.Deactivate = clsMain.MyString(row["Deactive"]);
        //                    data.Approved = clsMain.MyString(row["UApproved"]);
        //                    data.UserType = clsMain.MyInt(row["LUserType"]);
        //                    if (data.UserType == 2) { CBalance = GetLedgerBalance(Convert.ToInt32(data.UserId), DateTime.Now.ToString("dd/MMM/yyyy"), ConnectionString); }

        //                    ClosingBal = "0.00";
        //                    if (CBalance > 0)
        //                    {
        //                        ClosingBal = string.Format("{0:0.00}", ClosingBal) + " Cr.";
        //                    }

        //                    else if (CBalance < 0)
        //                    {
        //                        ClosingBal = string.Format("{0:0.00}", CBalance * (-1)) + " Dr.";
        //                    }

        //                    data.ClosingBal = ClosingBal.ToString();
        //                    data.FromDate = "01/04/" + FinYr.ToString();
        //                    data.ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "";
        //                    data.PartyName = (string)row["PartyName"];
        //                    data.CROTPVerify = 0;
        //                    data.Admin = clsMain.MyInt(row["UAdmin"]);
        //                    data.LedRRight = clsMain.MyInt(row["LLedRRight"]);
        //                    data.BWSRRight = clsMain.MyInt(row["LBWSRRight"]);
        //                    data.CatLRight = clsMain.MyInt(row["LCatLRight"]);
        //                    data.SARRight = clsMain.MyInt(row["LSARRight"]);
        //                    data.COrderRight = clsMain.MyInt(row["LCORDRight"]);
        //                    data.PAddShowRight = clsMain.MyInt(row["LPAddShowRight"]);
        //                    data.SharePDFRight = clsMain.MyInt(row["LSharePDFRight"]);
        //                    data.StockShowRight = clsMain.MyInt(row["LStockShowRight"]);
        //                    data.CInvRight = clsMain.MyInt(row["LCInvRight"]);
        //                    data.CRcptRight = clsMain.MyInt(row["LCRcptRight"]);
        //                    data.SRetRight = clsMain.MyInt(row["LSRetRight"]);
        //                    data.STfrRight = clsMain.MyInt(row["LSTfrRight"]);
        //                    data.ExpRight = clsMain.MyInt(row["LExpRight"]);
        //                    data.SalesManTag = clsMain.MyInt(row["LSalesManTag"]);

        //                    data.AppGSelection = GetAppGSelectionValue(ConnectionString);
        //                    data.BillInAltUnit = GetBillinginAltUnitStatus(ConnectionString);
        //                    objResult.data = data;

        //                    if (Itype == 1)
        //                    {
        //                        sql = "Select Top 1 DeviceId from ESUserLogin where ID <> " + clsMain.MyInt(row["UserCode"]) + " and DeviceId = '" + DeviceId + "' And UserType = " + data.UserType + "";
        //                        DataTable dt1 = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                        if (dt1 != null && dt1.Rows.Count > 0)
        //                        {
        //                            objResult.Message = "Device Already Registerd to Other";
        //                            objResult.Sucess = 1;
        //                        }
        //                        else
        //                        {
        //                            if (row["DevID"].ToString().Length == 0)
        //                            {
        //                                sql = "Update ESUserLogin set DeviceId = '" + DeviceId + "', TokenId = '" + TokenId + "',Deactivate = 0,Approved = 0 Where ID = " + clsMain.MyInt(row["UserCode"]) + "";
        //                                int R = new ESCommon.OLEDBHELPER(ConnectionString).ExecuteSQL(sql);

        //                                objResult.Message = "Device Registerd Sucessfully wait for Approval";
        //                                objResult.Sucess = 1;

        //                            }
        //                            if (row["DevID"].ToString().Length > 0)
        //                            {
        //                                if (DeviceId.ToUpper() != row["DevID"].ToString().ToUpper())
        //                                {
        //                                    objResult.Message = "Invalid Device";
        //                                    objResult.Sucess = 1;
        //                                }
        //                                else
        //                                {
        //                                    if (Convert.ToInt16(data.Approved) == 1 && Convert.ToInt16(data.Deactivate) == 0)
        //                                    {
        //                                        objResult.Message = "Login Sucessfully";
        //                                        objResult.Sucess = 1;
        //                                    }
        //                                    else if (Convert.ToInt16(data.Deactivate) == 1)
        //                                    {
        //                                        objResult.Message = "User ID Deactivated";
        //                                        objResult.Sucess = 1;
        //                                    }
        //                                    else
        //                                    {
        //                                        objResult.Message = "Device Registerd Sucessfully wait for Approval";
        //                                        objResult.Sucess = 1;
        //                                    }
        //                                }
        //                            }
        //                            else
        //                            {
        //                                if (DeviceId.Length == 0)
        //                                {
        //                                    sql = "Update ESUserLogin set DeviceId = '" + DeviceId + "', TokenId = '" + TokenId + "',Deactivate = 0,Approved = 0 Where ID = " + clsMain.MyInt(row["UserCode"]) + "";
        //                                    int R = new ESCommon.OLEDBHELPER(ConnectionString).ExecuteSQL(sql);

        //                                    objResult.Message = "Device Registerd Sucessfully wait for Approval";
        //                                    objResult.Sucess = 1;

        //                                }

        //                                if (Convert.ToInt16(data.Approved) == 1 && Convert.ToInt16(data.Deactivate) == 0)
        //                                {
        //                                    objResult.Message = "Login Sucessfully";
        //                                    objResult.Sucess = 1;
        //                                }
        //                                else if (Convert.ToInt16(data.Deactivate) == 1)
        //                                {
        //                                    objResult.Message = "User ID Deactivated";
        //                                    objResult.Sucess = 1;
        //                                }
        //                                else
        //                                {
        //                                    objResult.Message = "Device Registerd Sucessfully wait for Approval";
        //                                    objResult.Sucess = 1;
        //                                }
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        sql = "Update ESUserLogin set DeviceId = '" + DeviceId + "', TokenId = '" + TokenId + "',Deactivate = 0,Approved = 0 Where ID = " + clsMain.MyInt(row["UserCode"]) + "";
        //                        int R = new ESCommon.OLEDBHELPER(ConnectionString).ExecuteSQL(sql);

        //                        objResult.Message = "Device Registerd Sucessfully wait for Approval";
        //                        objResult.Sucess = 1;
        //                    }


        //                }
        //                else
        //                {
        //                    objResult.Message = "Invalid UserId and Passward";
        //                    objResult.Sucess = 1;
        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                objResult.Message = EX.Message.ToString();
        //                objResult.Sucess = 0;
        //            }
        //            return objResult;
        //        }
        //        public int GetBillinginAltUnitStatus(string ConnectionString)
        //        {
        //            int BAltUnit = 0;
        //            string sql = "";
        //            DataTable dt = new DataTable();
        //            try
        //            {
        //                if (Provider == 1)
        //                {
        //                    sql = "Select iif(IsNull(BillAltUnit),0,BillAltUnit) as BAltUnit from ESVchConfig A";
        //                    dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                }
        //                else
        //                {
        //                    sql = "Select IsNull(BillAltUnit,0) as BAltUnit from ESVchConfig A";
        //                    dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                }

        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    BAltUnit = clsMain.MyInt(dt.Rows[0]["BAltUnit"]);
        //                }
        //            }
        //            catch
        //            {
        //                return 0;
        //            }
        //            return BAltUnit;
        //        }
        public int GetCompoundDiscountStatus(string ConnectionString)
        {
            int ComDis = 0;
            string sql = "";
            DataTable dt = new DataTable();
            try
            {
                if (Provider == 1)
                {
                    sql = "Select iif(IsNull(CompDisEnable),0,CompDisEnable) as CompDis from ESVchConfig A";
                    dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
                }
                else
                {
                    sql = "Select IsNull(CompDisEnable,0) as CompDis from ESVchConfig A";
                    dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
                }

                if (dt != null && dt.Rows.Count > 0)
                {
                    ComDis = clsMain.MyInt(dt.Rows[0]["CompDis"]);
                }
            }
            catch
            {
                return 0;
            }
            return ComDis;
        }

        //        public int GetCompoundDiscountStatus1(string CompCode, string FY)
        //        {
        //            int ComDis = 0;
        //            string sql = "";
        //            string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //            DataTable dt = new DataTable();
        //            try
        //            {
        //                if (Provider == 1)
        //                {
        //                    sql = "Select iif(IsNull(CompDisEnable),0,CompDisEnable) as CompDis from ESVchConfig A";
        //                    dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                }
        //                else
        //                {
        //                    sql = "Select IsNull(CompDisEnable,0) as CompDis from ESVchConfig A";
        //                    dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                }

        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    ComDis = clsMain.MyInt(dt.Rows[0]["CompDis"]);
        //                }
        //            }
        //            catch
        //            {
        //                return 0;
        //            }
        //            return ComDis;
        //        }

        //        [HttpGet]
        //        public int GetAppGSelectionValue(string ConnectionString)
        //        {
        //            int AppGSelection = 0;
        //            try
        //            {
        //                string sql = "";
        //                DataTable dt = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    sql = "Select IIF(IsNull(AppGSelection),0,AppGSelection) as AGSelection from ESGrpConfig";
        //                    dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                }
        //                else
        //                {
        //                    sql = "Select IsNull(AppGSelection,0) as AGSelection from ESGrpConfig";
        //                    dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                }

        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    AppGSelection = clsMain.MyInt(dt.Rows[0]["AGSelection"]);
        //                }
        //            }
        //            catch
        //            {
        //                return 0;
        //            }
        //            return AppGSelection;
        //        }

        //        [HttpGet]
        //        public IEnumerable<AccOrder> GetBeatWiseData(int AccCode, string CompCode, string FY)
        //        {
        //            List<AccOrder> objResult = new List<AccOrder>();
        //            // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //            string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //            string queryStr = "";
        //            DataTable dt = new DataTable();

        //            if (Provider == 1)
        //            {
        //                queryStr = "Select A.VchCode,A.[VchNo],A.[Date],Sum(A.Value1) as Qty,Sum(A.Amount) as OAmount,Round(Sum(PQty),2) as PenQty From (SElect A.VchCode,A.RefCode,iif(IsNull(C.VchNo),A.[No],C.VchNo) as VchNo,A.Date,A.Value1,(A.Value1 * A.Value3) as Amount,Sum(B.Value1)  As PQty from ((Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1  And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType) Left Join Tran1 C On A.VchCode = C.VchCode) Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + AccCode + " Group by A.VchCode,A.RefCode,IIf(IsNull(C.VchNo),A.[No],C.VChno),A.Date,A.Value1,A.Value3) A Group By A.VchCode,A.[VchNo],A.[Date] Order By A.Date,A.VchCode";
        //                dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //            }
        //            else
        //            {
        //                queryStr = "Select A.VchCode,A.[VchNo],A.[Date],Sum(A.Value1) as Qty,Sum(A.Amount) as OAmount,Round(Sum(PQty),2) as PenQty From (SElect A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]) as VchNo,A.Date,A.Value1,(A.Value1 * A.Value3) as Amount,Sum(B.Value1)  As PQty from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1  And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType Left Join Tran1 C On A.VchCode = C.VchCode Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + AccCode + " Group by A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]),A.Date,A.Value1,A.Value3) A Group By A.VchCode,A.[VchNo],A.[Date] Order By A.Date,A.VchCode";
        //                dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //            }
        //            // DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql.ToString());
        //            try
        //            {
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow Drr in dt.Rows)
        //                    {
        //                        AccOrder ORD = new AccOrder();
        //                        ORD.OrderID = clsMain.MyInt(Drr["VchCode"]);
        //                        ORD.OrderNo = clsMain.MyString(Drr["VchNo"]).Trim();
        //                        ORD.OrderDate = clsMain.MyString(Drr["Date"]);
        //                        ORD.OrderQty = clsMain.MyDouble(Drr["Qty"]);
        //                        ORD.OrderAmount = clsMain.MyDouble(Drr["OAmount"]);
        //                        ORD.Status = "Pending";
        //                        if (clsMain.MyDouble(Drr["PenQty"]) == 0)
        //                        {
        //                            ORD.Status = "Close";
        //                        }
        //                        objResult.Add(ORD);
        //                    }
        //                }
        //            }
        //            catch
        //            {

        //                return objResult;
        //            }
        //            return objResult;
        //        }

        //        [HttpGet]
        //        public IEnumerable<Scheme> GetScheme(string CompCode, string FY)
        //        {
        //            List<Scheme> objResult = new List<Scheme>();
        //            //  SQLHELPER obj = new SQLHELPER(ConnectionString);

        //            //string sql = "Select A.Code,A.Name as SchemeName,B.Date,B.Date1,A.I2,A.CM1,IsNull(C.Name,'') as AccName,A.I1,A.B1,A.B2 From Master1 A Inner Join MasterSupport B On A.Code = B.MasterCode Left Join Master1 C On A.CM1 = C.Code Where A.MasterType = 32 And A.I1 In (1,2,3,4,8,9,10) And B.Date <= '" + DateTime.UtcNow.Date + "' And B.Date1 >= '" + DateTime.UtcNow.Date + "' And B.RecType = 151 And A.M1 Like '%12%' Order By A.Name";
        //            int SchemeCode = 0;
        //            int J = 0;
        //            string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //            string queryStr = "";
        //            DataTable dt = new DataTable();

        //            Scheme ORD = new Scheme();

        //            if (Provider == 1)
        //            {
        //                queryStr = "Select A.Code,A.SchemeName,B.Date,B.Date1,A.I2,A.CM1,A.AccName,A.I1,A.B1,A.B2,iif(IsNull(D.CM1), 0, D.CM1) as ItemCode,iif(IsNull(M1.Name), '', M1.Name) as ItemName,iif(IsNull(D.CM3), 0, D.CM3) as UCode,iif(IsNull(M2.Name), '', M2.Name) as UnitName,iif(IsNull(D.CM2), 0, D.CM2) as FItemCode,iif(IsNull(M3.Name), '', M3.Name) as FItemName,iif(IsNull(D.D1), 0, D.D1) as FromQty,iif(IsNull(D.D7), 0, D.D7) as TQty,iif(IsNull(D.D2), 0, D.D2) as FreeQty,iif(IsNull(D.D4), 0, D.D4) as VAmount,iif(ISNULL(D.D5), 0, D.D5) as VDisc,iif(IsNull(D.I3), 0, D.I3) as SBasis,iif(Isnull(D.C3), '', D.C3) as Disc,iif(Isnull(D.D6), 0, D.D6) as Price,D.I1 as SrNo From(((((Select A.Code, A.Name as SchemeName, B.Date, B.Date1, A.I2, A.CM1, IIF(IsNull(C.Name), '', C.Name) as AccName, A.I1, A.B1, A.B2, 152 as RecT  From((Master1 A Inner Join MasterSupport B On A.Code = B.MasterCode) Left Join Master1 C On A.CM1 = C.Code) Where A.MasterType = 32 And A.I1 In(1,2,3,4,8,9,10) And B.Date <= #" + DateTime.Now.ToString("dd/MMM/yyyy") + "# And B.Date1 >= #" + DateTime.Now.ToString("dd/MMM/yyyy") + "# And B.RecType = 151 And A.M1 Like '%12%') A Left Join MasterSupport D On A.Code = D.MasterCode  And A.RecT = D.RecType) Left Join Master1 M1 On D.CM1 = M1.Code) Left Join Master1 M2 On D.CM3 = M2.Code) Left Join Master1 M3 On D.CM2 = M3.Code)  Order By A.SchemeName,D.I1";
        //                dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //            }
        //            else
        //            {
        //                queryStr = "Select A.Code,A.Name as SchemeName,B.Date,B.Date1,A.I2,A.CM1,IsNull(C.Name,'') as AccName,A.I1,A.B1,A.B2,IsNull(D.CM1,0) as ItemCode,IsNull(M1.Name,'') as ItemName,IsNull(D.CM3,0) as UCode,IsNull(M2.Name,'') as UnitName,IsNull(D.CM2,0) as FItemCode,IsNull(M3.Name,'') as FItemName,IsNull(D.D1,0) as FromQty,IsNull(D.D7,0) as TQty,IsNull(D.D2,0) as FreeQty,IsNull(D.D4,0) as VAmount,ISNULL(D.D5,0) as VDisc" + Environment.NewLine +
        //                             ",IsNull(D.I3,0) as SBasis,Isnull(D.C3,'') as Disc,Isnull(D.D6,0) as Price,D.I1 as SrNo From Master1 A Inner Join MasterSupport B On A.Code = B.MasterCode Left Join Master1 C On A.CM1 = C.Code Left Join MasterSupport D On A.Code = D.MasterCode And D.RecType = 152 Left Join Master1 M1 On D.CM1 = M1.Code Left Join Master1 M2 On D.CM3 = M2.Code Left Join Master1 M3 On D.CM2 = M3.Code Where A.MasterType = 32 And A.I1 In (1,2,3,4,8,9,10)" + Environment.NewLine +
        //                             " And B.Date <= '" + DateTime.Now.ToString("dd/MMM/yyyy") + "' And B.Date1 >= '" + DateTime.Now.ToString("dd/MMM/yyyy") + "' And B.RecType = 151 And A.M1 Like '%12%' Order By A.Name,D.I1";
        //                dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //            }
        //                //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql.ToString());
        //                try
        //                {
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in dt.Rows)
        //                        {
        //                            if (clsMain.MyInt(Drr["Code"]) != SchemeCode)
        //                            {
        //                                SchemeCode = clsMain.MyInt(Drr["Code"]);
        //                                if (J > 0)
        //                                {
        //                                    objResult.Add(ORD);
        //                                }
        //                                J = J + 1;
        //                                ORD = new Scheme();
        //                                ORD.SchData = new List<SchemeData>();
        //                                ORD.SchAccData = new List<SchemeAccData>();
        //                                ORD.SchemeCode = clsMain.MyInt(Drr["Code"]);
        //                                ORD.SchemeName = clsMain.MyString(Drr["SchemeName"]).Trim();
        //                                ORD.StartDate = clsMain.MyDate(Drr["Date"]);
        //                                ORD.EndDate = clsMain.MyDate(Drr["Date1"]);
        //                                if (clsMain.MyInt(Drr["I2"]) == 1)
        //                                {
        //                                    ORD.SPartyType = 2;
        //                                    ORD.PartyType = "One Party";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I2"]) == 2)
        //                                {
        //                                    ORD.SPartyType = 1;
        //                                    ORD.PartyType = "Group of Party";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I2"]) == 3)
        //                                {
        //                                    ORD.SPartyType = 3;
        //                                    ORD.PartyType = "All Party";
        //                                }
        //                                ORD.PartyCode = clsMain.MyInt(Drr["CM1"]);
        //                                ORD.PartyName = clsMain.MyString(Drr["AccName"]);
        //                                ORD.ApplicableOn = "";
        //                                if (Convert.ToBoolean(Drr["B1"]) == true)
        //                                {
        //                                    ORD.ApplicableOn = "Item Wise";
        //                                }
        //                                else if (Convert.ToBoolean(Drr["B2"]) == true)
        //                                {
        //                                    ORD.ApplicableOn = "Item Group Wise";
        //                                }
        //                                ORD.SchemeAppType = clsMain.MyInt(Drr["I1"]);
        //                                ORD.SchemeAppOn = "";
        //                                ORD.SchemeType = "";
        //                                if (clsMain.MyInt(Drr["I1"]) == 1)
        //                                {
        //                                    ORD.SchemeAppOn = "Individual Item";
        //                                    ORD.SchemeType = "Free/Discounted - Same Item";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I1"]) == 2)
        //                                {
        //                                    ORD.SchemeAppOn = "Individual Item";
        //                                    ORD.SchemeType = "Free/Discounted - Diff Item";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I1"]) == 3)
        //                                {
        //                                    ORD.SchemeAppOn = "Individual Item";
        //                                    ORD.SchemeType = "Discount";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I1"]) == 4)
        //                                {
        //                                    ORD.SchemeAppOn = "Individual Item";
        //                                    ORD.SchemeType = "Price";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I1"]) == 9)
        //                                {
        //                                    ORD.SchemeAppOn = "Voucher";
        //                                    ORD.SchemeType = "Discount (Bill Sundry)";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I1"]) == 10)
        //                                {
        //                                    ORD.SchemeAppOn = "Voucher";
        //                                    ORD.SchemeType = "Discount (Item Wise)";
        //                                }
        //                                else if (clsMain.MyInt(Drr["I1"]) == 8)
        //                                {
        //                                    ORD.SchemeAppOn = "Voucher";
        //                                    ORD.SchemeType = "Free/Discounted Item";
        //                                }


        //                                if (ORD.SPartyType == 1)
        //                                {
        //                                    DataTable dt2 = new DataTable();
        //                                    //SQLHELPER obj2 = new SQLHELPER(ConnectionString);
        //                                    //string Qry = "with GRP AS (Select Code,Name,MasterType From Master1 Where Code = " + ORD.PartyCode + " Union All Select M.Code,M.Name,M.MasterType From Master1 M inner Join GRP A On M.ParentGrp = A.Code And M.MasterType = 1) SElect M.Code,M.Name from GRP A Inner Join Master1 M On A.Code = M.ParentGrp Where M.MasterType = 2 Order By M.Name";
        //                                    if (Provider == 1)
        //                                    {
        //                                        string GrpStr = GetAllSubGroups(ORD.PartyCode, ConnectionString);
        //                                        queryStr = "SElect M.Code,M.Name from Master1 M Where M.ParentGrp in(" + GrpStr + ") and M.MasterType = 2 Order By M.Name";
        //                                        dt2 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                    }
        //                                    else
        //                                    {
        //                                        queryStr = "with GRP AS (Select Code,Name,MasterType From Master1 Where Code = " + ORD.PartyCode + " Union All Select M.Code,M.Name,M.MasterType From Master1 M inner Join GRP A On M.ParentGrp = A.Code And M.MasterType = 1) SElect M.Code,M.Name from GRP A Inner Join Master1 M On A.Code = M.ParentGrp Where M.MasterType = 2 Order By M.Name";
        //                                        dt2 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                    }


        //                                    //dt2 = new ESCommon.SQLHELPER(ConnectionString).getTable(queryStr.ToString());
        //                                    if (dt2 != null && dt2.Rows.Count > 0)
        //                                    {
        //                                        foreach (DataRow Drr2 in dt2.Rows)
        //                                        {
        //                                            ORD.SchAccData.Add(new SchemeAccData
        //                                            {
        //                                                SchemeCode = clsMain.MyInt(ORD.SchemeCode),
        //                                                PartyCode = clsMain.MyInt(Drr2["Code"]),
        //                                                PartyName = clsMain.MyString(Drr2["Name"])
        //                                            });
        //                                        }
        //                                    }

        //                                }

        //                            }


        //                            ORD.SchData.Add(new SchemeData
        //                            {
        //                                SchemeCode = clsMain.MyInt(Drr["Code"]),
        //                                SchemeName = clsMain.MyString(Drr["SchemeName"]),
        //                                SrNo = clsMain.MyInt(Drr["SrNo"]),
        //                                ItemCode = clsMain.MyInt(Drr["ItemCode"]),
        //                                ItemName = clsMain.MyString(Drr["ItemName"]),
        //                                UCode = clsMain.MyInt(Drr["UCode"]),
        //                                UnitName = clsMain.MyString(Drr["UnitName"]),
        //                                FItemCode = clsMain.MyInt(Drr["FItemCode"]),
        //                                FItemName = clsMain.MyString(Drr["FItemName"]),
        //                                FromQty = clsMain.MyDouble(Drr["FromQty"]),
        //                                ToQty = clsMain.MyDouble(Drr["TQty"]),
        //                                FreeQty = clsMain.MyDouble(Drr["FreeQty"]),
        //                                VAmount = clsMain.MyDouble(Drr["VAmount"]),
        //                                VDisc = clsMain.MyDouble(Drr["VDisc"]),
        //                                Disc = clsMain.MyString(Drr["Disc"]),
        //                                Price = clsMain.MyDouble(Drr["Price"]),
        //                                SBasis = clsMain.MyInt(Drr["SBasis"])
        //                            });
        //                        }
        //                        if (J > 0)
        //                        {
        //                            objResult.Add(ORD);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            public string GetAllSubGroups(int ParentGrp, string ConStr)
        //            {
        //                string GroupStr = Convert.ToString(ParentGrp);
        //                try
        //                {
        //                    GetAllChildQueryStr(ParentGrp, ref GroupStr, ConStr);
        //                }
        //                catch
        //                {
        //                    return GroupStr;
        //                }
        //                return GroupStr;
        //            }


        //            public void GetAllChildQueryStr(int ParentGrp, ref string GroupStr, string ConStr)
        //            {
        //                try
        //                {
        //                    string sql = "";
        //                    // sqlhelper Obj = new sqlhelper();
        //                    DataTable dt = new DataTable();
        //                    sql = "Select A.Code From Master1 A Where A.ParentGrp = " + ParentGrp + " And A.MasterType = 1 Order By A.Code";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConStr).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConStr).getTable(sql);
        //                    }
        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (GroupStr.Length > 0) { GroupStr = GroupStr + "," + Convert.ToString(Row["Code"]); } else { GroupStr = Convert.ToString(Row["Code"]); }
        //                            GetAllChildQueryStr(Convert.ToInt32(Row["Code"]), ref GroupStr, ConStr);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                }
        //            }


        //            [HttpGet]
        //            public IEnumerable<AccOrder> GetAccOrderStatus(int AccCode, string CompCode, string FY)
        //            {
        //                List<AccOrder> objResult = new List<AccOrder>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();

        //                //string sql = "Select A.VchCode,A.[VchNo],A.[Date],Sum(A.Value1) as Qty,Sum(A.Amount) as OAmount,Round(Sum(PQty),2) as PenQty From (SElect A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]) as VchNo,A.Date,A.Value1,(A.Value1 * A.Value3) as Amount,Sum(B.Value1)  As PQty from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1  And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType Left Join Tran1 C On A.VchCode = C.VchCode Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + AccCode + " Group by A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]),A.Date,A.Value1,A.Value3) A Group By A.VchCode,A.[VchNo],A.[Date] Order By A.Date,A.VchCode";
        //                if (Provider == 1)
        //                {
        //                    queryStr = "SElect * From (Select A.ID as VchCode,trim(A.ID) as VchNo,Fromat(A.OrderDate,'dd/MM/yyyy') as Date,SUM(B.Qty) as Qty,A.TotalAmount as OAmount,SUM(B.Qty) as PenQty,iif(IsNull(A.Sync),0,A.Sync) as OStatus from ESOrderHeaderDetails A Left Join ESOrderDetails B On A.Id = B.OrderId Where A.PartyId = " + AccCode + " And Sync In (0,2) Group By A.ID,A.OrderDate,A.TotalAmount,A.Sync Union All Select A.VchCode,LTrim(A.[VchNo]) as VchNo,Format(A.[Date],'dd/MM/yyyy') as Date,Sum(A.Value1) as Qty,Sum(A.Amount) as OAmount,Round(Sum(PQty),2) as PenQty,-1 as OStatus From (SElect A.VchCode,A.RefCode,iif(IsNull(C.VchNo),A.[No].) as VchNo,A.Date,A.Value1,(A.Value1 * A.Value3) as Amount,Sum(B.Value1)  As PQty from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1  And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType Left Join Tran1 C On A.VchCode = C.VchCode Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + AccCode + " Group by A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]),A.Date,A.Value1,A.Value3) A Group By A.VchCode,A.[VchNo],A.[Date]) A Order By A.Date Desc,A.VchCode Desc";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "SElect * From (Select A.ID as VchCode,Convert(Varchar,A.ID) as VchNo,Convert(VarChar,A.OrderDate,103) as Date,SUM(B.Qty) as Qty,A.TotalAmount as OAmount,SUM(B.Qty) as PenQty,IsNull(A.Sync,0) as OStatus from ESOrderHeaderDetails A Left Join ESOrderDetails B On A.Id = B.OrderId Where A.PartyId = " + AccCode + " And Sync In (0,2) Group By A.ID,A.OrderDate,A.TotalAmount,A.Sync Union All Select A.VchCode,LTrim(A.[VchNo]) as VchNo,Convert(VarChar,A.[Date],103) as Date,Sum(A.Value1) as Qty,Sum(A.Amount) as OAmount,Round(Sum(PQty),2) as PenQty,-1 as OStatus From (SElect A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]) as VchNo,A.Date,A.Value1,(A.Value1 * A.Value3) as Amount,Sum(B.Value1)  As PQty from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1  And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType Left Join Tran1 C On A.VchCode = C.VchCode Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + AccCode + " Group by A.VchCode,A.RefCode,IsNull(C.VchNo,A.[No]),A.Date,A.Value1,A.Value3) A Group By A.VchCode,A.[VchNo],A.[Date]) A Order By A.Date Desc,A.VchCode Desc";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                try
        //                {
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in dt.Rows)
        //                        {
        //                            AccOrder ORD = new AccOrder();
        //                            ORD.OrderID = clsMain.MyInt(Drr["VchCode"]);
        //                            ORD.OrderNo = clsMain.MyString(Drr["VchNo"]).Trim();
        //                            ORD.OrderDate = clsMain.MyString(Drr["Date"]);
        //                            ORD.OrderQty = clsMain.MyDouble(Drr["Qty"]);
        //                            ORD.OrderAmount = clsMain.MyDouble(Drr["OAmount"]);
        //                            if (clsMain.MyInt(Drr["OStatus"]) == -1)
        //                            {
        //                                ORD.Status = "Pending";
        //                                if (clsMain.MyDouble(Drr["PenQty"]) == 0)
        //                                {
        //                                    ORD.Status = "Close";
        //                                }
        //                            }
        //                            else if (clsMain.MyInt(Drr["OStatus"]) == 0)
        //                            {
        //                                ORD.Status = "Pending";
        //                            }
        //                            else if (clsMain.MyInt(Drr["OStatus"]) == 2)
        //                            {
        //                                ORD.Status = "Reject";
        //                            }
        //                            objResult.Add(ORD);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpGet]
        //            public dynamic GetOrderWiseStatement(int SalesCode, string FDate, string EDate)
        //            {
        //                List<OrderWiseStatement> objResult = new List<OrderWiseStatement>();
        //                SQLHELPER obj = new SQLHELPER(ConnectionString);

        //                int OID = 0;
        //                try
        //                {

        //                    //string sql = "Select A.Id,Convert(Varchar,A.OrderDate,103) as OrderDate,A.SalesManId,IsNull(M1.Name,'') as Salesman,A.PartyId,IsNull(M2.Name,'') as PartyName,A.SStatus,A.OVchCode,IsNull(Convert(Varchar,A.BOrderDate,103),'') as BOrderDate,A.OVchNo,IsNull(A.InvVchCode,0) as InvVchCode,IsNull(Convert(Varchar,A.InvDate,103),'') as InvDate,IsNull(A.InvVchNo,'') as InvVchNo from (Select T1.ID,T1.OrderDate,T1.SalesManID,T1.PartyID,IsNull(T1.Sync,0) as SStatus,T1.OVchCode,T1.BOrderDate,T1.OVchNo,T5.VchCode as InvVchCode,T5.Date as InvDate,T5.VchNo as InvVchNo From (Select A.ID,A.OrderDate,A.SalesManID,A.PartyID,A.Sync,IsNull(T1.VchCode,0) as OVchCode,T1.Date as BOrderDate,IsNull(T1.VchNo,'') as OVchNo from ESOrderHeaderDetails A Left Join Tran1 T1 On A.BusyVchCode = T1.VchCode Where A.SalesManId = " + SalesCode + " And A.OrderDate >= '" + FDate + "' And A.OrderDate <= '" + EDate + "') T1 Left Join Tran3 T3 On T1.OVchCode = T3.VchCode And T3.Method = 1 Left Join Tran3 T4 On T3.RefCode = T4.RefCode And T3.MasterCode1 = T4.MasterCode1 And T3.MasterCode2 = T4.MasterCode2 And T3.RecType = T4.RecType And T4.Method = 2 Left Join Tran1 T5 On T4.VchCode = T5.VchCode) A Left Join Master1 M1 On A.SalesManId = M1.Code Left Join Master1 M2 On A.PartyID = M2.Code Group By A.Id,A.OrderDate,A.SalesManId,A.PartyId,A.SStatus,A.OVchCode,A.BOrderDate,A.OVchNo,A.InvVchCode,A.InvDate,A.InvVchNo,M1.Name,M2.Name Order By A.OrderDate,A.Id";
        //                    string sql = "Select A.Id,Convert(Varchar,A.OrderDate,103) as OrderDate,A.SalesManId,IsNull(M1.Name,'') as Salesman,A.PartyId,IsNull(M2.Name,'') as PartyName,A.SStatus,A.QVchType,A.QVchCode,IsNull(Convert(Varchar,A.BQDate,103),'') as QuotationDate,A.BQuotationNo,A.OVchType,A.OVchCode,IsNull(Convert(Varchar,A.BOrderDate,103),'') as BOrderDate,A.OVchNo,A.InvVchType,IsNull(A.InvVchCode,0) as InvVchCode,IsNull(Convert(Varchar,A.InvDate,103),'') as InvDate,IsNull(A.InvVchNo,'') as InvVchNo from (Select T1.ID,T1.OrderDate,T1.SalesManID,T1.PartyID,T1.SStatus,T1.QVchType,T1.QVchCode,T1.BQDate,T1.BQuotationNo,T1.OVchType,T1.OVchCode,T1.BOrderDate,T1.OVchNo,IsNull(T5.VchType,0) as InvVchType,T5.VchCode as InvVchCode,T5.Date as InvDate,T5.VchNo as InvVchNo From (Select T1.ID,T1.OrderDate,T1.SalesManID,T1.PartyID,IsNull(T1.Sync,0) as SStatus,T1.QVchCode,T1.QVchType,T1.BQDate,T1.BQuotationNo,IsNull(T5.VchType,0) as OVchType,T5.VchCode as OVchCode,T5.Date as BOrderDate,IsNull(T5.VchNo,'') as OVchNo From (Select A.ID,A.OrderDate,A.SalesManID,A.PartyID,A.Sync,IsNull(T1.VchCode,0) as QVchCode,T1.Date as BQDate,IsNull(T1.VchType,0) as QVchType,IsNull(T1.VchNo,'') as BQuotationNo from ESOrderHeaderDetails A Left Join Tran1 T1 On A.BusyVchCode = T1.VchCode Where A.SalesManId = " + SalesCode + " And A.OrderDate >= '" + FDate + " 00:00:00' And A.OrderDate <= '" + EDate + " 23:59:59') T1 Left Join Tran3 T3 On T1.QVchCode = T3.VchCode And T3.Method = 1 Left Join Tran3 T4 On T3.RefCode = T4.RefCode And T3.MasterCode1 = T4.MasterCode1 And T3.MasterCode2 = T4.MasterCode2 And T3.RecType = T4.RecType And T4.Method = 2 Left Join Tran1 T5 On T4.VchCode = T5.VchCode) as T1 Left Join Tran3 T3 On T1.OVchCode = T3.VchCode And T3.Method = 1 Left Join Tran3 T4 On T3.RefCode = T4.RefCode And T3.MasterCode1 = T4.MasterCode1 And T3.MasterCode2 = T4.MasterCode2 And T3.RecType = T4.RecType And T4.Method = 2 Left Join Tran1 T5 On T4.VchCode = T5.VchCode) A Left Join Master1 M1 On A.SalesManId = M1.Code Left Join Master1 M2 On A.PartyID = M2.Code Group By A.Id,A.OrderDate,A.SalesManId,A.PartyId,A.SStatus,A.QVchType,A.QVchCode,A.BQDate,A.BQuotationNo,A.OVchType,A.OVchCode,A.BOrderDate,A.OVchNo,A.InvVchType,A.InvVchCode,A.InvDate,A.InvVchNo,M1.Name,M2.Name Order By A.OrderDate Desc,A.Id";
        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql.ToString());
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in dt.Rows)
        //                        {
        //                            if (OID != clsMain.MyInt(Drr["ID"]))
        //                            {
        //                                OID = clsMain.MyInt(Drr["ID"]);
        //                                OrderWiseStatement ORD = new OrderWiseStatement();
        //                                ORD.OrderID = clsMain.MyInt(Drr["ID"]);
        //                                ORD.OrderDate = clsMain.MyString(Drr["OrderDate"]);
        //                                ORD.SalesmanID = clsMain.MyInt(Drr["SalesManId"]);
        //                                ORD.Salesman = clsMain.MyString(Drr["Salesman"]);
        //                                ORD.PartyID = clsMain.MyInt(Drr["PartyId"]);
        //                                ORD.PartyName = clsMain.MyString(Drr["PartyName"]);

        //                                if (clsMain.MyInt(Drr["QVchType"]) == 26)
        //                                {
        //                                    ORD.BQuotationVchCode = clsMain.MyInt(Drr["QVchCode"]);
        //                                    ORD.BQuotaionDate = clsMain.MyString(Drr["QuotationDate"]);
        //                                    ORD.BQuotationNo = clsMain.MyString(Drr["BQuotationNo"]).Trim();
        //                                }

        //                                if (clsMain.MyInt(Drr["QVchType"]) == 12)
        //                                {
        //                                    ORD.BOrderVchCode = clsMain.MyInt(Drr["QVchCode"]);
        //                                    ORD.BOrderDate = clsMain.MyString(Drr["QuotationDate"]);
        //                                    ORD.BOrderNo = clsMain.MyString(Drr["BQuotationNo"]).Trim();
        //                                }
        //                                else if (clsMain.MyInt(Drr["OVchType"]) == 12)
        //                                {
        //                                    ORD.BOrderVchCode = clsMain.MyInt(Drr["OVchCode"]);
        //                                    ORD.BOrderDate = clsMain.MyString(Drr["BOrderDate"]);
        //                                    ORD.BOrderNo = clsMain.MyString(Drr["OVchNo"]).Trim();
        //                                }

        //                                if (clsMain.MyInt(Drr["OVchType"]) == 9)
        //                                {
        //                                    ORD.BInvVchCode = clsMain.MyInt(Drr["OVchCode"]);
        //                                    ORD.BInvDate = clsMain.MyString(Drr["BOrderDate"]);
        //                                    ORD.BInvVchNo = clsMain.MyString(Drr["OVchNo"]).Trim();
        //                                }
        //                                else if (clsMain.MyInt(Drr["InvVchType"]) == 9)
        //                                {
        //                                    ORD.BInvVchCode = clsMain.MyInt(Drr["InvVchCode"]);
        //                                    ORD.BInvDate = clsMain.MyString(Drr["InvDate"]);
        //                                    ORD.BInvVchNo = clsMain.MyString(Drr["InvVchNo"]);
        //                                }
        //                                ORD.OStatus = "Pending";

        //                                ORD.FVchCode = 0;
        //                                if (clsMain.MyInt(Drr["SStatus"]) == 1)
        //                                {
        //                                    ORD.OStatus = "Approved";
        //                                    ORD.FVchCode = clsMain.MyInt(Drr["QVchCode"]);
        //                                }
        //                                if (clsMain.MyInt(Drr["SStatus"]) == 2)
        //                                {
        //                                    ORD.OStatus = "Reject";
        //                                }

        //                                if (clsMain.MyInt(Drr["OVchCode"]) > 0)
        //                                {
        //                                    if (clsMain.MyInt(Drr["OVchType"]) == 9)
        //                                    {
        //                                        ORD.OStatus = "Invoice Done";
        //                                    }
        //                                    ORD.FVchCode = clsMain.MyInt(Drr["OVchCode"]);
        //                                }

        //                                if (clsMain.MyInt(Drr["InvVchCode"]) > 0)
        //                                {
        //                                    ORD.OStatus = "Invoice Done";
        //                                    ORD.FVchCode = clsMain.MyInt(Drr["InvVchCode"]);
        //                                }
        //                                objResult.Add(ORD);
        //                            }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Status = 0, Msg = "Failed", Date = objResult };
        //                }
        //                return new { Status = 1, Msg = "Success", Date = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetOrderWiseItemDet(int OID, int FVchCode, string CompCode, string FY)
        //            {
        //                List<OrderItemData> objResult = new List<OrderItemData>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);

        //                //string sql = "";
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    if (FVchCode > 0)
        //                    {
        //                        queryStr = "Select A.MasterCode1 as ItemCode,B.Name as ItemName,Abs(A.Value1) as Qty,C.Name as UnitName,A.D2 as Price,A.D5 as Amount from ((Tran2 A Left Join Master1 B on A.MasterCode1 = B.Code) Left Join Master1 C On B.CM1 = C.Code) Where A.VchCode = " + FVchCode + " And A.RecType in (4,2,5) Order By A.SrNo";
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select A.ProductId as ItemCode,B.Name as ItemName,A.Qty as Qty,C.Name as UnitName,A.Rate as Price,A.Amount from ((ESOrderDetails A Left Join Master1 B on A.ProductId = B.Code) Left Join Master1 C On B.CM1 = C.Code) Where A.OrderId = " + OID + " Order By A.Id";
        //                    }
        //                    //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql.ToString());
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in table.Rows)
        //                        {
        //                            OrderItemData ORD = new OrderItemData();

        //                            ORD.ItemCode = clsMain.MyInt(Drr["ItemCode"]);
        //                            ORD.ItemName = clsMain.MyString(Drr["ItemName"]);
        //                            ORD.Qty = clsMain.MyDouble(Drr["Qty"]);
        //                            ORD.UnitName = clsMain.MyString(Drr["UnitName"]);
        //                            ORD.Price = clsMain.MyDouble(Drr["Price"]);
        //                            ORD.Amount = clsMain.MyDouble(Drr["Amount"]);

        //                            objResult.Add(ORD);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Status = 0, Msg = "Failed", Date = objResult };
        //                }
        //                return new { Status = 1, Msg = "Success", Date = objResult };
        //            }

        //            [HttpGet]
        //            public IEnumerable<VItemData> GetVoucherItemDet(int VchCode, string CompCode, string FY)
        //            {
        //                List<VItemData> objResult = new List<VItemData>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                queryStr = "SElect A.SrNo,M1.Name as ItemName,Abs(A.Value1) as Qty,M2.Name as Unit,A.D2 as Price,A.D5 as Amount from ((Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code) Left Join Master1 M2 On A.CM2 = M2.Code) Where A.VchCode = " + VchCode + " And A.RecType In (2,7) Order By A.SrNo";
        //                //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql.ToString());
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                try
        //                {
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in table.Rows)
        //                        {
        //                            VItemData VItem = new VItemData();
        //                            VItem.SrNo = clsMain.MyInt(Drr["SrNo"]);
        //                            VItem.ItemName = clsMain.MyString(Drr["ItemName"]).Trim();
        //                            VItem.Qty = clsMain.MyDouble(Drr["Qty"]);
        //                            VItem.Unit = clsMain.MyString(Drr["Unit"]).Trim();
        //                            VItem.Price = clsMain.MyDouble(Drr["Price"]);
        //                            VItem.Amount = clsMain.MyDouble(Drr["Amount"]);
        //                            objResult.Add(VItem);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpGet]
        //            public IEnumerable<OrderItem> GetAccOrderItemStatus(int AccCode, int OrderID, string OrderNo, string CompCode, string FY)
        //            {
        //                List<OrderItem> objResult = new List<OrderItem>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    if (OrderID > 0)
        //                    {
        //                        queryStr = "Select A.Name,A.Value1,A.Value3,A.PQty From (Select C.Name,B.Qty as Value1,B.Rate as Value3,B.Qty as PQty from ((ESOrderHeaderDetails A Inner Join ESOrderDetails B On A.Id = B.OrderId) Inner Join Master1 C On B.ProductId = C.Code) Where A.PartyId = " + AccCode + " And A.Id = " + OrderID + " Union All SElect C.Name,A.Value1,A.Value3,Sum(B.Value1)  As PQty from ((Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType) Left Join Master1 C On A.MasterCode1 = C.Code) Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + clsMain.MyInt(AccCode) + " And A.VchCode = " + clsMain.MyInt(OrderID) + " Group by C.Name,A.Value1,A.Value3) A Order By A.Name";
        //                    }
        //                    else
        //                    {
        //                        queryStr = "SElect A.RefCode,A.MasterCode1,C.Name,A.Value1,A.Value3,Round(Sum(B.Value1),2) As PQty from ((Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType) Left Join Master1 C On A.MasterCode1 = C.Code) Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + clsMain.MyInt(AccCode) + " And LTrim(A.[No]) = '" + clsMain.MyString(OrderNo) + "' Group by A.RefCode,A.MasterCode1,C.Name,A.Value1,A.Value3 Order By C.Name";
        //                    }
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    if (OrderID > 0)
        //                    {
        //                        queryStr = "Select A.Name,A.Value1,A.Value3,A.PQty From (Select C.Name,B.Qty as Value1,B.Rate as Value3,B.Qty as PQty from ESOrderHeaderDetails A Inner Join ESOrderDetails B On A.Id = B.OrderId Inner Join Master1 C On B.ProductId = C.Code Where A.PartyId = " + AccCode + " And A.Id = " + OrderID + " Union All SElect C.Name,A.Value1,A.Value3,Sum(B.Value1)  As PQty from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType Left Join Master1 C On A.MasterCode1 = C.Code Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + clsMain.MyInt(AccCode) + " And A.VchCode = " + clsMain.MyInt(OrderID) + " Group by C.Name,A.Value1,A.Value3) A Order By A.Name";
        //                    }
        //                    else
        //                    {
        //                        queryStr = "SElect A.RefCode,A.MasterCode1,C.Name,A.Value1,A.Value3,Round(Sum(B.Value1),2) As PQty from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2 And A.RecType = B.RecType Left Join Master1 C On A.MasterCode1 = C.Code Where A.RecType = 4 And A.VchType = 12 And A.Method = 1 And A.MasterCode2 = " + clsMain.MyInt(AccCode) + " And LTrim(A.[No]) = '" + clsMain.MyString(OrderNo) + "' Group by A.RefCode,A.MasterCode1,C.Name,A.Value1,A.Value3 Order By C.Name";
        //                    }
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql.ToString());
        //                try
        //                {
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in table.Rows)
        //                        {
        //                            OrderItem ORD = new OrderItem();
        //                            ORD.ItemName = clsMain.MyString(Drr["Name"]).Trim();
        //                            ORD.ItemQty = clsMain.MyDouble(Drr["Value1"]);
        //                            ORD.OrderPrice = clsMain.MyDouble(Drr["Value3"]);
        //                            ORD.Status = "Pending";
        //                            if (clsMain.MyDouble(Drr["PQty"]) == 0)
        //                            {
        //                                ORD.Status = "Close";
        //                            }
        //                            objResult.Add(ORD);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpGet]
        //            public List<BeatDetails> GetBeatWiseData(string Id, string BeatId, string CompCode, string FY)
        //            {
        //                List<BeatDetails> objResult = new List<BeatDetails>();

        //                try
        //                {
        //                    ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    if (Provider == 1)
        //                    {
        //                        objResult = GetBeatWiseDataAccess(Id, BeatId, ConnectionString);
        //                    }
        //                    else
        //                    {
        //                        objResult = GetBeatWiseDataSQL(Id, BeatId, ConnectionString);
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }


        //            public List<BeatDetails> GetBeatWiseDataSQL(string Id, string BeatId, string ConnectionString)
        //            {
        //                List<BeatDetails> objResult = new List<BeatDetails>();
        //                SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                SqlParameter[] Para = new SqlParameter[2];
        //                Para[0] = new SqlParameter("@UserId", clsMain.MyString(Id));
        //                Para[1] = new SqlParameter("@BeatId", clsMain.MyString(BeatId));

        //                DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_GetBeatWiseData", Para);
        //                try
        //                {
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in dt.Rows)
        //                        {
        //                            BeatDetails sucall = new BeatDetails();
        //                            sucall.BeatId = clsMain.MyInt(Drr["BeatId"]);
        //                            sucall.Beat = clsMain.MyString(Drr["Beat"]);
        //                            sucall.TotalParties = clsMain.MyString(Drr["TotalParties"]);
        //                            sucall.Visited = clsMain.MyString(Drr["Visited"]);
        //                            sucall.Target = clsMain.MyString(Drr["Target"]);
        //                            sucall.Achived = clsMain.MyString(Drr["Achived"]);
        //                            objResult.Add(sucall);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            public List<BeatDetails> GetBeatWiseDataAccess(string UserID, string BeatId, string ConnectionString)
        //            {
        //                List<BeatDetails> objResult = new List<BeatDetails>();

        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    string sql = "";
        //                    int ABType = 0;
        //                    int AAdmin = 0;
        //                    int BeatNA = 0;
        //                    int WeekWise = 0;

        //                    sql = "select IIF(IsNull(Btype),0,BType) as ABType,IIF(IsNull(Saleshead),0,Saleshead) as AAdmin from ESUserLogin where salesmancode = " + UserID + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ABType = clsMain.MyInt(dt.Rows[0]["ABType"]);
        //                        AAdmin = clsMain.MyInt(dt.Rows[0]["AAdmin"]);
        //                    }

        //                    sql = "Select IIF(IsNull(Name),'',Name) as Beat  From ESMaster1 Where Code = " + BeatId + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        string Beat = clsMain.MyString(dt.Rows[0]["Beat"]);
        //                        if (Beat.ToUpper() == "N/A") { BeatNA = 1; }
        //                    }

        //                    sql = "Select Top 1 * from ESSalesVisitPlan Where SalesCode = " + UserID + " And [Week] > 0";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        WeekWise = 1;
        //                    }
        //                    sql = "Select distinct em1.Name as Beat,em1.Code as BeatId,";
        //                    if (AAdmin == 1 && BeatNA == 1) { sql = sql + "(select COUNT(h1.Code) from Help1 h1 Left Join ESAppAccountDet h2 On h1.Code = h2.PartyCode where h1.RecType = 104 And h1.MasterType = 2 And h1.NameOrAlias = 1 And h1.MasterSeries = 0 And IIF(isnull(h2.visited),0,h2.visited)= 0 and IIF(IsNull(h2.revisit),0,h2.revisit) = 0) as TotalParties,"; }
        //                    if (AAdmin == 0 && BeatNA == 1) { sql = sql + "((select COUNT(h1.Code) from Master1 h1 Left Join ESAppAccountDet h2 On h1.Code = h2.PartyCode where h1.CM3 = " + UserID + " And IIF(isnull(h2.visited),0,h2.visited) = 0 and IIF(IsNull(h2.revisit),0,h2.revisit) = 0) as TotalParties,"; }
        //                    if (BeatNA == 0) { sql = sql + "(select COUNT(h1.PartyCode) from ESAppAccountDet h1 Inner Join  ESAppAccBeatDT h2 On h1.PartyCode = h2.PartyCode where IIF(isnull(h1.visited),0,h1.visited) = 0 and h1.revisit=0 and h2.Beat=em1.Code) as TotalParties,"; }
        //                    sql = sql + "(select COUNT(A.Visited) From ESAppAccountDet A Inner join help1 B On A.PartyCode = B.Code where B.RecType = 104 And B.MasterType = 2 And B.NameOrAlias = 1 And B.MasterSeries = 0 and A.Visited = 1 and Format(A.VisitedDate,'dd/MMM/yyyy') = Format(Date(), 'dd/MMM/yyyy')) as Visited,";
        //                    sql = sql + "(select IIF(isnull(Sum(TargetVal)), 0, Sum(TargetVal)) as STargetVal from ESSalesTarget where SalesCode = " + UserID + " and TMonth = MONTH(date())) as Target,";
        //                    sql = sql + "(Select Sum(TM2.Value1) * (-1) From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode And TM1.MasterCode1 = TM2.MasterCode1 Where TM1.VchType In(9,3) And Month(TM1.Date) = MONTH(date()) And TM2.RecType = 1 And TM1.CM4 = " + UserID + ") as Achived";
        //                    if (ABType > 0)
        //                    {
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " from ESSalesVisitPlan smv left outer join ESMaster1 em1 on em1.code = smv.Beat  where smv.SalesCode = " + UserID + "  and smv.Beat = " + BeatId + " and smv.[Week] = DatePart('w', DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " from ESSalesVisitPlan smv left outer join ESMaster1 em1 on em1.code = smv.Beat  where smv.SalesCode = " + UserID + " and Format(smv.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy') and smv.Beat = " + BeatId + "";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        sql = sql + "from ESSalesVisitPlan smv left outer join Master1 em1 on em1.code = smv.Beat where smv.SalesCode = " + UserID + "  and Format(smv.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy') and smv.Beat = " + BeatId + "";
        //                    }
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Drr in dt.Rows)
        //                        {
        //                            BeatDetails sucall = new BeatDetails();
        //                            sucall.BeatId = clsMain.MyInt(Drr["BeatId"]);
        //                            sucall.Beat = clsMain.MyString(Drr["Beat"]);
        //                            sucall.TotalParties = clsMain.MyString(Drr["TotalParties"]);
        //                            sucall.Visited = clsMain.MyString(Drr["Visited"]);
        //                            sucall.Target = clsMain.MyString(Drr["Target"]);
        //                            sucall.Achived = clsMain.MyString(Drr["Achived"]);
        //                            objResult.Add(sucall);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpGet]
        //            public IEnumerable<BeatList> GetBeatList(string UserId, string CompCode, string FY)
        //            {
        //                //string strwhere = "1=1";

        //                List<BeatList> objResult = new List<BeatList>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    DataTable dt1 = new DataTable();
        //                    DataTable dt2 = new DataTable();
        //                    // DataTable dt;
        //                    // DataTable dt1;
        //                    string str1 = "select Btype from ESUserLogin where salesmancode = " + UserId;
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(str1);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(str1);
        //                    }
        //                    string str2 = "";
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        str1 = "Select Top 1 Week From ESSalesVisitPlan Where SalesCode = " + UserId;
        //                        if (Provider == 1)
        //                        {
        //                            dt1 = new OLEDBHELPER(ConnectionString).getTable(str1);
        //                        }
        //                        else
        //                        {
        //                            dt1 = new SQLHELPER(ConnectionString).getTable(str1);
        //                        }
        //                        if (dt1 != null && dt1.Rows.Count > 0)
        //                        {
        //                            if (Convert.ToInt16(dt1.Rows[0]["Week"]) > 0)
        //                            {
        //                                if (Provider == 1)
        //                                {

        //                                    if (clsMain.MyInt(dt.Rows[0]["BType"]) == 1)
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                               " left outer join ESMaster1 em1 on smv.Beat=em1.Code" +
        //                                               " where smv.SalesCode =" + UserId + " and smv.[Week] = DatePart('w', DATE())";
        //                                    }
        //                                    else
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                                " left outer join Master1 em1 on smv.Beat=em1.Code" +
        //                                                " where smv.SalesCode =" + UserId + " and smv.[Week] = DatePart('w', DATE())";
        //                                    }
        //                                    dt2 = new OLEDBHELPER(ConnectionString).getTable(str2);
        //                                }
        //                                else
        //                                {
        //                                    if (clsMain.MyInt(dt.Rows[0]["BType"]) == 1)
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                               " left outer join ESMaster1 em1 on smv.Beat=em1.Code" +
        //                                               " where smv.SalesCode =" + UserId + " and smv.[Week] = DatePart(dw,cast(GETDATE() as Date))";
        //                                    }
        //                                    else
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                                " left outer join Master1 em1 on smv.Beat=em1.Code" +
        //                                                " where smv.SalesCode =" + UserId + " and smv.[Week] = DatePart(dw,cast(GETDATE() as Date))";
        //                                    }
        //                                    dt2 = new SQLHELPER(ConnectionString).getTable(str2);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                if (Provider == 1)
        //                                {

        //                                    if (clsMain.MyInt(dt.Rows[0]["BType"]) == 1)
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                                " left outer join ESMaster1 em1 on smv.Beat=em1.Code" +
        //                                                " where smv.SalesCode =" + UserId + " and smv.VisitDate <=#" + DateTime.UtcNow.ToString("dd-MMM-yyyy") + "# And smv.ToVisit>=#" + DateTime.UtcNow.ToString("dd-MMM-yyyy") + "#";
        //                                    }
        //                                    else
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                               " left outer join Master1 em1 on smv.Beat=em1.Code" +
        //                                               " where smv.SalesCode =" + UserId + " and smv.VisitDate <=#" + DateTime.UtcNow.ToString("dd-MMM-yyyy") + "# And smv.ToVisit>=#" + DateTime.UtcNow.ToString("dd-MMM-yyyy") + "#";
        //                                    }
        //                                    dt2 = new OLEDBHELPER(ConnectionString).getTable(str2);
        //                                }
        //                                else
        //                                {
        //                                    if (clsMain.MyInt(dt.Rows[0]["BType"]) == 1)
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                                " left outer join ESMaster1 em1 on smv.Beat=em1.Code" +
        //                                                " where smv.SalesCode ='" + UserId + "' and cast(smv.VisitDate as Date) <=cast(GETDATE() as Date) And cast(smv.ToVisit as Date)>=cast(GETDATE() as Date)";
        //                                    }
        //                                    else
        //                                    {
        //                                        str2 = "select distinct em1.name as BeatName, em1.code as BeatId from ESSalesVisitPlan smv" +
        //                                               " left outer join Master1 em1 on smv.Beat=em1.Code" +
        //                                               " where smv.SalesCode ='" + UserId + "' and cast(smv.VisitDate as Date) <=cast(GETDATE() as Date) And cast(smv.ToVisit as Date)>=cast(GETDATE() as Date)";
        //                                    }
        //                                    dt2 = new SQLHELPER(ConnectionString).getTable(str2);
        //                                }
        //                            }
        //                        }
        //                        if (str2.Length > 0)
        //                        {
        //                            foreach (DataRow Drr in dt2.Rows)
        //                            {
        //                                BeatList sucall = new BeatList();
        //                                sucall.BeatId = clsMain.MyString(Drr["BeatId"]);
        //                                sucall.BeatName = clsMain.MyString(Drr["BeatName"]);
        //                                sucall.BType = clsMain.MyString(dt.Rows[0]["BType"]);

        //                                objResult.Add(sucall);
        //                            }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;

        //            }

        //            //[HttpGet]
        //            //public dynamic AutoCheckOut()
        //            //{
        //            //    try
        //            //    {
        //            //        APIResponse Res = new APIResponse();
        //            //        SqlParameter[] Para = new SqlParameter[1];

        //            //        Para[0] = new SqlParameter("@RecType", 1);

        //            //        DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AutoCheckOut", Para);

        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            Res.Sucess = 1;
        //            //            Res.msg = clsMain.MyString(dt.Rows[0]["MSG"]);
        //            //        }
        //            //        else
        //            //        {
        //            //            return new { Sucess = 0, msg = "Fail" };
        //            //        }
        //            //        return Res;
        //            //    }
        //            //    catch
        //            //    {
        //            //        return new { Sucess = 0, msg = "Fail" };
        //            //    }

        //            //}

        //            [HttpGet]
        //            public dynamic AutoCheckOut(string CompCode, string FY)
        //            {
        //                try
        //                {
        //                    APIResponse Res = new APIResponse();
        //                    SqlParameter[] Para = new SqlParameter[1];
        //                    DataTable dt = new DataTable();

        //                    string Msg = "Fail";
        //                    int Success = 0;
        //                    int R = 0;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    // DataTable table = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Delete From ESRepData Where VisitedDate < #" + DateTime.Now.ToString("dd/MMM/yyyy") + "#)";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Delete From ESRepData Where VisitedDate <  Cast(GETDATE() as Date) ";
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        //queryStr = "Update ESAppAccountDet Set Visited = 0,CheckIn = 0,Revisit = 0 Where VisitedDate < Format(Date(),'dd/MMM/yyyy') And Visited = 1";
        //                        queryStr = "Update ESAppAccountDet Set Visited = 0,CheckIn = 0,Revisit = 0,CheckOutTime = null,CheckInTime = null,VisitedDate = null Where VisitedDate < #" + DateTime.Now.ToString("dd/MMM/yyyy") + "# And Visited = 1";

        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                        if (R > 0)
        //                        {
        //                            Success = 1;
        //                            Msg = clsMain.MyString(dt.Rows[0]["MSG"]);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        Para[0] = new SqlParameter("@RecType", 1);
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AutoCheckOut", Para);
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            Success = 1;
        //                            Msg = clsMain.MyString(dt.Rows[0]["MSG"]);
        //                        }
        //                    }

        //                    Res.Sucess = Success;
        //                    Res.msg = Msg.ToString();
        //                    return Res;
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Fail" };
        //                }
        //            }


        //            [HttpGet]
        //            public dynamic GetBeatPartyWiseDetails(int AccCode, string CompCode, string FY)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                string ClosingBalanceStr;
        //                if (Provider == 1)
        //                {
        //                    queryStr = "Select M.Code as PartyId,M.Name as PartyName,IIF(IsNull(MA.EMail),'',MA.EMail) as AEMail,(IIF(ISNULL(MA.Address1),'',MA.Address1) + ' ' + IIF(ISNULL(MA.Address2),'',MA.Address2) + ' ' + IIF(ISNULL(MA.Address3),'',MA.Address3) + ' ' + IIF(ISNULL(MA.Address4),'',MA.Address4)) as AAddress";
        //                    queryStr = queryStr + ",IIF(ISNULL(MA.Mobile),'',MA.Mobile) as AMobile,IIF(ISNull(E.CheckIn),0,E.CheckIn) as ACheckIn,IIF(ISNULL(E.Visited),0,E.Visited) as AVisited,IIF(ISNULL(E.longitude),'',E.longitude) as Alongitude,IIF(IsNull(E.Latitude),'',E.Latitude) as ALatitude,IIF(IsNull(E.CAddress),'',E.CAddress) as ACAddress";
        //                    queryStr = queryStr + ",IIF(IsNull(E.Approval),0,E.Approval) as AApproval,IIF(IsNull(E.Revisit),0,E.Revisit) as ARevisit,IIF(ISNULL(E.CheckIn),0,E.CheckIn) as CheckInstatus";
        //                    queryStr = queryStr + ",(Select Top 1 LTrim(VchNo) + '~' + Format(Date, 'dd/MM/yyyy') + '~' + CStr(Value1) From Tran2 Where MasterCode1 = M.Code And RecType = 1 And Value1 > 0 And VchType = 14 Order By Date Desc, VchCode Desc) as LastRecipt";
        //                    queryStr = queryStr + ",(Select Top 1 LTrim(VchNo) + '~' + Format(Date, 'dd/MM/yyyy') + '~' + CStr(VchAmtBaseCur) From Tran1 Where MasterCode1 = M.Code And VchType = 12 Order By Date Desc, VchCode Desc) as LastOrderItem";
        //                    queryStr = queryStr + ",((Select IIF(IsNull(D1),0,D1) as Balance From Folio1 Where MasterCode = M.Code) + (Select IIF(IsNull(SUM(Value1)), 0,SUM(Value1)) as Balance From Tran2 Where MasterCode1 = M.Code And RecType = 1)) as ClosingBalance";
        //                    queryStr = queryStr + ",(Select Sum(Points) as APoints from ESPointDT where RecType = 1 AND AccCode = M.Code And(PointApp = 0 Or PointApp Is Null)) as Points";
        //                    queryStr = queryStr + " From (((((SElect M.Code, M.NameAlias, 1 as MType  From Help1 M Inner Join Master1 M1 On M.Code = M1.Code where M.RecType = 104 And M.MasterType = 2 And M.NameOrAlias = 1 And M1.ApprovalStatus In (0, 1) And M.MasterSeries = 0) M Inner Join (SElect 1 as MType from ESSalesVisitPlan A Where M.Code = " + AccCode + "";
        //                    queryStr = queryStr + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                    queryStr = queryStr + ") A On M.MType = A.MType) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode) Left Join EsRepData R on M.code = R.partycode)";
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "Select M.Code as PartyId,M.NameAlias as PartyName,IsNull(MA.EMail,'') as EMail,(ISNULL(MA.Address1,'') + ' ' + ISNULL(MA.Address2,'') + ' ' + ISNULL(MA.Address3,'') + ' ' + ISNULL(MA.Address4,'')) as Address,ISNULL(MA.Mobile,'') as mobile,ISNull(R.CheckIn,0) as CheckIn,ISNULL(R.Visited,0) as Visited,(Case When E.Approval = 1 Then E.longitude else '' end) as longitude ,(Case When E.Approval = 1 Then E.Latitude else '' end) as Latitude,IsNull(R.CAddress,'') as CAddress,IsNull(E.Approval,0) as Approval,IsNull(R.Revisit,0) as Revisit,ISNULL(R.CheckIn,0) as CheckInstatus";
        //                    queryStr = queryStr + ",IsNull((Select Top 1 LTrim(VchNo) + '~' + Convert(Varchar, Date, 103) + '~' + Convert(Varchar, Value1)  From Tran2 Where MasterCode1 = M.Code And RecType = 1 And Value1 > 0 And VchType = 14 Order By Date Desc, VchCode Desc),'') as LastRecipt";
        //                    queryStr = queryStr + ",IsNull((Select Top 1 LTrim(VchNo) + '~' + Convert(Varchar, Date, 103) + '~' + Convert(Varchar, VchAmtBaseCur) From Tran1 Where MasterCode1 = M.Code And VchType = 12 Order By Date Desc, VchCode Desc),'') as LastOrderItem";
        //                    queryStr = queryStr + ",IsNull((SElect Sum(A.Balance) From(Select D1 as Balance From Folio1 Where MasterCode = M.Code Union All Select IsNull(SUM(Value1), 0) Balance From Tran2 Where MasterCode1 = M.Code And RecType = 1) A),0) as ClosingBalance";
        //                    queryStr = queryStr + ",IsNull((Select Sum(Points) as Points from ESPointDT where RecType = 1 AND AccCode = M.Code And(PointApp = 0 Or PointApp Is Null)),0) as Points";
        //                    queryStr = queryStr + " from ESSalesVisitPlan A Inner Join Help1 M On 1 = 1 Left Join MasterAddressInfo MA On M.Code = MA.MasterCode Inner Join Master1 M1 On M.Code = M1.Code Left Join ESAppAccountDet E On M.Code = E.PartyCode Left Join EsRepData R on M.code = R.partycode and A.SalesCode = R.SalesManID where M.RecType = 104 And M.MasterType = 2 ANd M.Code = " + AccCode + " And M1.ApprovalStatus In(0,1) And M.NameOrAlias = 1 And M.MasterSeries = 0 order by R.CheckInTime desc";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }

        //                try
        //                {
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in table.Rows)
        //                        {
        //                            ClosingBalanceStr = "0.00";

        //                            if (dr["ClosingBalance"] != null)
        //                            {
        //                                if (clsMain.MyDouble(dr["ClosingBalance"]) > 0)
        //                                {
        //                                    ClosingBalanceStr = clsMain.MyDouble(dr["ClosingBalance"]).ToString() + " Cr.";
        //                                }
        //                                else if (clsMain.MyDouble(dr["ClosingBalance"]) < 0)
        //                                {
        //                                    ClosingBalanceStr = Math.Abs(clsMain.MyDouble(dr["ClosingBalance"])).ToString() + " Dr.";
        //                                }
        //                                else
        //                                {
        //                                    ClosingBalanceStr = "0.00";
        //                                }
        //                            }

        //                            objResult.Add(new PartyDetails
        //                            {
        //                                PartyId = (int)dr["PartyId"],
        //                                PartyName = (string)dr["PartyName"],
        //                                Address = (string)dr["Address"],
        //                                PhoneNo = (string)dr["mobile"],
        //                                EMail = (string)dr["EMail"],
        //                                Visited = (int)dr["Visited"],
        //                                ClosingBalance = (string)ClosingBalanceStr,
        //                                LastRecipt = (string)dr["LastRecipt"],
        //                                LastOrderItem = (string)dr["LastOrderItem"],
        //                                Points = (double)dr["Points"],
        //                                CheckIn = (int)dr["CheckIn"],
        //                                Latitude = (string)dr["Latitude"],
        //                                Longitude = (string)dr["Longitude"],
        //                                CAddress = (string)dr["CAddress"],
        //                                Approval = (int)dr["Approval"],
        //                                CheckInstatus = (int)dr["CheckInstatus"],
        //                                Revisit = (int)dr["Revisit"],
        //                                // FromDate = (string)dr["FromDate"],
        //                                FromDate = "01/04/" + FinYr.ToString() + "",
        //                                //ToDate = (string)dr["Todate"],
        //                                ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "",
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //                return objResult;
        //            }


        //            [HttpGet]
        //            public dynamic GetBeatWisePartyDetails(string UserId, string BeatId, string CompCode, string FY)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();

        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                if (Provider == 1)
        //                {
        //                    objResult = GetBeatWisePartyDetailsAcccess(UserId, BeatId, FY, ConnectionString);
        //                }
        //                else
        //                {
        //                    objResult = GetBeatWisePartyDetailsSQL(UserId, BeatId, ConnectionString);
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            public List<PartyDetails> GetBeatWisePartyDetailsSQL(string UserId, string BeatId, string ConnectionString)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();

        //                try
        //                {
        //                    //int AllParty = GetSalesmanAccountType(clsMain.MyInt(UserId), ConnectionString);
        //                    SqlParameter[] Para = new SqlParameter[2];
        //                    Para[0] = new SqlParameter("@UserId", clsMain.MyString(UserId));
        //                    Para[1] = new SqlParameter("@BeatId", clsMain.MyString(BeatId));
        //                    //Para[2] = new SqlParameter("@AllParty", AllParty);
        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_GetBeatWisePartyDetails", Para);

        //                    string ClosingBalanceStr;

        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            if (clsMain.MyDouble(dr["ClosingBalance"]) > 0)
        //                            {
        //                                ClosingBalanceStr = clsMain.MyDouble(dr["ClosingBalance"]).ToString() + " Cr.";
        //                            }
        //                            else if (clsMain.MyDouble(dr["ClosingBalance"]) < 0)
        //                            {
        //                                ClosingBalanceStr = Math.Abs(clsMain.MyDouble(dr["ClosingBalance"])).ToString() + " Dr.";
        //                            }
        //                            else
        //                            {
        //                                ClosingBalanceStr = "0.00";
        //                            }
        //                            objResult.Add(new PartyDetails
        //                            {
        //                                PartyId = (int)dr["PartyId"],
        //                                PartyName = (string)dr["PartyName"],
        //                                Address = (string)dr["Address"],
        //                                PhoneNo = (string)dr["mobile"],
        //                                EMail = (string)dr["EMail"],
        //                                Visited = (int)dr["Visited"],
        //                                ClosingBalance = (string)ClosingBalanceStr,
        //                                LastRecipt = (string)dr["LastRecipt"],
        //                                LastOrderItem = (string)dr["LastOrderItem"],
        //                                Points = (double)dr["Points"],
        //                                CheckIn = (int)dr["CheckIn"],
        //                                Latitude = (string)dr["Latitude"],
        //                                Longitude = (string)dr["Longitude"],
        //                                CAddress = (string)dr["CAddress"],
        //                                Approval = (int)dr["Approval"],
        //                                CheckInstatus = (int)dr["CheckInstatus"],
        //                                Revisit = (int)dr["Revisit"],
        //                                // FromDate = (string)dr["FromDate"],
        //                                FromDate = "01/04/" + FinYr.ToString() + "",
        //                                //ToDate = (string)dr["Todate"],
        //                                ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "",
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            public dynamic GetBeatWisePartyDetailsAcccess(string UserID, string BeatId, string FY, string ConnectionString)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();

        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    string sql = "";
        //                    int ABType = 0;
        //                    int AAdmin = 0;
        //                    int BeatNA = 0;
        //                    int WeekWise = 0;
        //                    int AllParty = 0;
        //                    sql = "select IIF(IsNull(Btype),0,BType) as ABType,IIF(IsNull(Saleshead),0,Saleshead) as AAdmin from ESUserLogin where salesmancode = " + UserID + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ABType = clsMain.MyInt(dt.Rows[0]["ABType"]);
        //                        AAdmin = clsMain.MyInt(dt.Rows[0]["AAdmin"]);
        //                    }
        //                    sql = "select IIF(IsNull(ShowAllAcc),0,ShowAllAcc) as AllAcc from ESUserLogin where salesmancode = " + UserID + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        AllParty = clsMain.MyInt(dt.Rows[0]["AllAcc"]);

        //                    }
        //                    sql = "Select IIF(IsNull(Name),'',Name) as Beat  From ESMaster1 Where Code = " + BeatId + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        string Beat = clsMain.MyString(dt.Rows[0]["Beat"]);
        //                        if (Beat.ToUpper() == "N/A") { BeatNA = 1; }
        //                    }

        //                    sql = "Select Top 1 * from ESSalesVisitPlan Where SalesCode = " + UserID + " And [Week] > 0";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        WeekWise = 1;
        //                    }

        //                    string ClosingBalanceStr = "";


        //                    if (AAdmin == 1 && BeatNA == 1)
        //                    {
        //                        sql = "Select M.Code as PartyId, M.NameAlias as PartyName,IIF(IsNull(MA.EMail),'',MA.EMail) as AEMail,(IIF(ISNULL(MA.Address1),'',MA.Address1) + ' ' + IIF(ISNULL(MA.Address2),'',MA.Address2) + ' ' + IIF(ISNULL(MA.Address3),'',MA.Address3) + ' ' + IIF(ISNULL(MA.Address4),'',MA.Address4)) as AAddress";
        //                    }
        //                    else
        //                    {
        //                        sql = "Select M.Code as PartyId,M.Name as PartyName,IIF(IsNull(MA.EMail),'',MA.EMail) as AEMail,(IIF(ISNULL(MA.Address1),'',MA.Address1) + ' ' + IIF(ISNULL(MA.Address2),'',MA.Address2) + ' ' + IIF(ISNULL(MA.Address3),'',MA.Address3) + ' ' + IIF(ISNULL(MA.Address4),'',MA.Address4)) as AAddress";
        //                    }
        //                    sql = sql + ",IIF(ISNULL(MA.Mobile),'',MA.Mobile) as AMobile,IIF(ISNull(E.CheckIn),0,E.CheckIn) as ACheckIn,IIF(ISNULL(E.Visited),0,E.Visited) as AVisited,IIF(ISNULL(E.longitude),'',E.longitude) as Alongitude,IIF(IsNull(E.Latitude),'',E.Latitude) as ALatitude,IIF(IsNull(E.CAddress),'',E.CAddress) as ACAddress";
        //                    sql = sql + ",IIF(IsNull(E.Approval),0,E.Approval) as AApproval,IIF(IsNull(E.Revisit),0,E.Revisit) as ARevisit,IIF(ISNULL(E.CheckIn),0,E.CheckIn) as CheckInstatus";
        //                    sql = sql + ",(Select Top 1 LTrim(VchNo) + '~' + Format(Date, 'dd/MM/yyyy') + '~' + CStr(Value1) From Tran2 Where MasterCode1 = M.Code And RecType = 1 And Value1 > 0 And VchType = 14 Order By Date Desc, VchCode Desc) as LastRecipt";
        //                    sql = sql + ",(Select Top 1 LTrim(VchNo) + '~' + Format(Date, 'dd/MM/yyyy') + '~' + CStr(VchAmtBaseCur) From Tran1 Where MasterCode1 = M.Code And VchType = 12 Order By Date Desc, VchCode Desc) as LastOrderItem";
        //                    sql = sql + ",((Select IIF(IsNull(D1),0,D1) as Balance From Folio1 Where MasterCode = M.Code) + (Select IIF(IsNull(SUM(Value1)), 0,SUM(Value1)) as Balance From Tran2 Where MasterCode1 = M.Code And RecType = 1)) as ClosingBalance";
        //                    sql = sql + ",(Select Sum(Points) as APoints from ESPointDT where RecType = 1 AND AccCode = M.Code And(PointApp = 0 Or PointApp Is Null)) as Points";
        //                    if (AAdmin == 1 && BeatNA == 1 && AllParty == 1)
        //                    {
        //                        sql = sql + " From (((((SElect M.Code, M.NameAlias, 1 as MType  From Help1 M Inner Join Master1 M1 On M.Code = M1.Code where M.RecType = 104 And M.MasterType = 2 And M.NameOrAlias = 1 And M1.ApprovalStatus In (0, 1) And M.MasterSeries = 0) M Inner Join (SElect 1 as MType from ESSalesVisitPlan A Where A.SalesCode = " + UserID + " And A.Beat = " + BeatId + "";
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " and A.[Week] = DatePart('w',DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                        }
        //                        sql = sql + ") A On M.MType = A.MType) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode) Left Join EsRepData R on M.code = R.partycode)";
        //                        sql = sql + " Where (IIF(isnull(R.Visited),0,R.Visited) = 0 Or (R.Visited = 1 And R.CheckIn = 1)) order by E.CheckInTime desc";
        //                    }
        //                    if (AAdmin == 0 && BeatNA == 1 && AllParty == 1)
        //                    {
        //                        sql = sql + " from ((((ESSalesVisitPlan A Inner Join Master1 M On A.SalesCode = M.CM3) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode) Left Join EsRepData R on M.code = R.partycode) where A.SalesCode = " + UserID + " And M.ApprovalStatus In (0,1) And A.Beat = " + BeatId + " and (IIF(isnull(R.Visited),0,R.Visited) = 0 Or (R.Visited = 1 And R.CheckIn = 1))";
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " and A.[Week] = DatePart('w',DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                        }
        //                        sql = sql + "order by E.CheckInTime desc";
        //                    }
        //                    if (BeatNA == 0)
        //                    {
        //                        sql = sql + " from (((((ESSalesVisitPlan A Inner Join ESAppAccBeatDT B On A.Beat = B.Beat) Inner Join Master1 M On B.PartyCode = M.Code) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode) Left Join EsRepData R on M.code = R.partycode)  where A.SalesCode = " + UserID + " And M.ApprovalStatus In (0,1) And A.Beat = " + BeatId + " and (IIF(isnull(R.Visited),0,R.Visited) = 0 Or (R.Visited = 1 And R.CheckIn = 1))";
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " and A.[Week] = DatePart('w',DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                        }
        //                        sql = sql + "order by E.CheckInTime desc";
        //                    }
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            ClosingBalanceStr = "0.00";

        //                            if (dr["ClosingBalance"] != null)
        //                            {
        //                                if (clsMain.MyDouble(dr["ClosingBalance"]) > 0)
        //                                {
        //                                    ClosingBalanceStr = clsMain.MyDouble(dr["ClosingBalance"]).ToString() + " Cr.";
        //                                }
        //                                else if (clsMain.MyDouble(dr["ClosingBalance"]) < 0)
        //                                {
        //                                    ClosingBalanceStr = Math.Abs(clsMain.MyDouble(dr["ClosingBalance"])).ToString() + " Dr.";
        //                                }
        //                                else
        //                                {
        //                                    ClosingBalanceStr = "0.00";
        //                                }
        //                            }

        //                            //string LastRecipt = "";
        //                            //string LastOrderItem = "";
        //                            //double Points = 0;

        //                            //if (dr["LastRecipt"] != null) { LastRecipt = clsMain.MyString(dr["LastRecipt"]); }
        //                            //if (dr["LastOrderItem"] != null) { LastOrderItem = clsMain.MyString(dr["LastOrderItem"]); }
        //                            //if (dr["Points"] != null) { Points = clsMain.MyDouble(dr["Points"]); }

        //                            objResult.Add(new PartyDetails
        //                            {
        //                                PartyId = (int)dr["PartyId"],
        //                                PartyName = (string)dr["PartyName"],
        //                                Address = (string)dr["AAddress"],
        //                                PhoneNo = (string)dr["AMobile"],
        //                                EMail = (string)dr["AEMail"],
        //                                Visited = (int)dr["AVisited"],
        //                                ClosingBalance = (string)ClosingBalanceStr,
        //                                LastRecipt = clsMain.MyString(dr["LastRecipt"]),
        //                                LastOrderItem = clsMain.MyString(dr["LastOrderItem"]),
        //                                Points = clsMain.MyDouble(dr["Points"]),
        //                                CheckIn = (int)dr["ACheckIn"],
        //                                Latitude = (string)dr["ALatitude"],
        //                                Longitude = (string)dr["ALongitude"],
        //                                CAddress = (string)dr["ACAddress"],
        //                                Approval = (int)dr["AApproval"],
        //                                CheckInstatus = (int)dr["CheckInstatus"],
        //                                Revisit = (int)dr["ARevisit"],
        //                                // FromDate = (string)dr["FromDate"],
        //                                FromDate = "01/04/" + FY.ToString() + "",
        //                                //ToDate = (string)dr["Todate"],
        //                                ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "",
        //                            });
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }



        //            //[HttpGet]
        //            //public IEnumerable<CategoryList> GetCategory()
        //            //{
        //            //    List<CategoryList> objResult = new List<CategoryList>();
        //            //    SQLHELPER obj = new SQLHELPER(ConnectionString);
        //            //    string str = "Select * from ESCategory";

        //            //    try
        //            //    {
        //            //        DataTable dt = obj.getTable(str);

        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            foreach (DataRow Drr in dt.Rows)
        //            //            {
        //            //                CategoryList sucall = new CategoryList();

        //            //                sucall.Code = clsMain.MyInt(Drr["Code"]);
        //            //                sucall.Name = clsMain.MyString(Drr["Name"]);

        //            //                objResult.Add(sucall);
        //            //            }
        //            //        }
        //            //    }
        //            //    catch (Exception ex)
        //            //    {
        //            //        return objResult;
        //            //    }


        //            //    return objResult;
        //            //}


        //            [HttpGet]
        //            public dynamic GetCategory(int UserID, int CType, int UserType, string CompCode, string FY)
        //            {
        //                List<CategoryList> objResult = new List<CategoryList>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                //string strQry = "";
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                if (CType == 2)
        //                {
        //                    queryStr = "select Code,Name,'' as Img  from Master1 where mastertype = 69 Order By Name";
        //                }
        //                else
        //                {
        //                    if (UserType == 2)
        //                    {
        //                        queryStr = "select Code,Name,'' as Img  from Master1 where mastertype =5 and Code in (Select IgrpCode from ESSFACatalougeConfig) Order By Name";

        //                    }
        //                    else if (UserType == 19)
        //                    {
        //                        int result = GetSalesmanCategoryType(UserID, ConnectionString);
        //                        if (result != 1)
        //                        {
        //                            int type = GetSalesmanIgrpType(UserID, ConnectionString);
        //                            if (type == 1)
        //                            {
        //                                queryStr = "select Code,Name,'' as Img from Master1 where mastertype = 5 and ParentGrp = 0 Order By Name";
        //                            }
        //                            else
        //                            {
        //                                queryStr = "Select M.Code,M.Name,'' as Img From Master1 M Where M.Code In" + Environment.NewLine +
        //                                    " (Select SalesHead From ESSFASalesheadConfig Where SalesCode = " + UserID + " And SalesHead > 0" + Environment.NewLine +
        //                                    " And RecType = 2) And M.MasterType = 5 Order By M.Name";
        //                            }

        //                        }
        //                        else
        //                        {
        //                            queryStr = "select Code,Name,'' as Img  from Master1 where mastertype =5 and Code in (Select IgrpCode from ESSFACatalougeConfig) Order By Name";
        //                        }
        //                    }

        //                }
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in table.Rows)
        //                    {
        //                        objResult.Add(new CategoryList
        //                        {
        //                            Code = (int)dr["Code"],
        //                            Name = (string)dr["Name"],
        //                            CategoryImage = clsMain.MyString(IMGFolder) + clsMain.MyString(dr["Name"]) + ".jpg"
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            public int GetSalesmanType(int UserID, string ConnectionString)
        //            {
        //                int type = 0;
        //                try
        //                {
        //                    //string Qry = "";
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);

        //                    // string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select A.SalesHead From ESUserLogin A Where A.SalesManCode = " + UserID + "";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        type = (int)table.Rows[0]["SalesHead"];
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return type;
        //            }

        //            public int GetSalesmanIgrpType(int UserID, string ConnectionString)
        //            {
        //                int type = 0;
        //                try
        //                {
        //                    //string Qry = "";
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //  string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();

        //                    queryStr = "Select A.SAIgrpCode From ESUserLogin A Where A.SalesManCode = " + UserID + "";
        //                    //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        type = (int)table.Rows[0]["SAIgrpCode"];
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return type;
        //            }

        //            [HttpGet]
        //            public dynamic GetBillByBillRefDetails(int AccCode, int RecType, string CompCode, string FY)
        //            {
        //                List<BillByBillRef> objResult = new List<BillByBillRef>();
        //                try
        //                {
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);

        //                    string strQry = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        if (RecType == 1)
        //                        {
        //                            strQry = "Select A.RefCode,Format(A.[Date],'dd/MM/yyyy') as VchDT,LTrim(A.[No]) as RefNo,Format(A.DueDate,'dd/MM/yyyy') as DueDate,Sum(B.Value1) * (-1) as Amount from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = " + AccCode + " And A.Rectype = 1 And A.Method = 1 And A.Value1 < 0 Group By A.RefCode,A.[Date],A.[No],A.DueDate Having Sum(B.Value1) <= -0.01 Order By A.Date,A.RefCode";
        //                        }
        //                        else
        //                        {
        //                            strQry = "Select A.RefCode,Format(A.[Date],'dd/MM/yyyy') as VchDT,LTrim(A.[No]) as RefNo,Format(A.DueDate,'dd/MM/yyyy') as DueDate,Sum(B.Value1) as Amount from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = " + AccCode + " And A.Rectype = 1 And A.Method = 1 And A.Value1 > 0 Group By A.RefCode,A.[Date],A.[No],A.DueDate Having Sum(B.Value1) >= 0.01 Order By A.Date,A.RefCode";
        //                        }
        //                        table = new OLEDBHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    else
        //                    {
        //                        if (RecType == 1)
        //                        {
        //                            strQry = "Select A.RefCode,Convert(varchar,A.[Date],103) as VchDT,LTrim(A.[No]) as RefNo,Convert(varchar,A.DueDate,103) as DueDate,Sum(B.Value1) * (-1) as Amount from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = " + AccCode + " And A.Rectype = 1 And A.Method = 1 And A.Value1 < 0 Group By A.RefCode,A.[Date],A.[No],A.DueDate Having Sum(B.Value1) <= -0.01 Order By A.Date,A.RefCode";
        //                        }
        //                        else
        //                        {
        //                            strQry = "Select A.RefCode,Convert(varchar,A.[Date],103) as VchDT,LTrim(A.[No]) as RefNo,Convert(varchar,A.DueDate,103) as DueDate,Sum(B.Value1) as Amount from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = " + AccCode + " And A.Rectype = 1 And A.Method = 1 And A.Value1 > 0 Group By A.RefCode,A.[Date],A.[No],A.DueDate Having Sum(B.Value1) >= 0.01 Order By A.Date,A.RefCode";
        //                        }
        //                        table = new SQLHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    // DataTable dt = obj.getTable(strQry);

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        BillByBillRef pl = new BillByBillRef();

        //                        foreach (DataRow item in table.Rows)
        //                        {
        //                            pl = new BillByBillRef();
        //                            pl.RefCode = clsMain.MyInt(item["RefCode"]);
        //                            pl.Date = clsMain.MyString(item["VchDT"]);
        //                            pl.RefNo = clsMain.MyString(item["RefNo"]);
        //                            pl.Amount = clsMain.MyDouble(item["Amount"]);
        //                            pl.DueDate = clsMain.MyString(item["DueDate"]);
        //                            pl.AdjAmount = clsMain.MyDouble(0);
        //                            objResult.Add(pl);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult.ToList() };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //            }
        //            public int GetSalesmanCategoryType(int UserID, string ConnectionString)
        //            {
        //                int type = 0;
        //                try
        //                {
        //                    // string Qry = "";
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select top 1 Applyon from ESSFACatalougeConfig";
        //                    //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        type = (int)table.Rows[0]["Applyon"];
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return type;
        //            }

        //            public dynamic GetSubCategory(string CategoryCode, string CompCode, string FY)
        //            {
        //                List<SubCategoryList> objResult = new List<SubCategoryList>();
        //                string strwhere = "1=1 ";
        //                if ((clsMain.MyLen(CategoryCode) > 0) && (CategoryCode) != "0")
        //                {
        //                    strwhere += " and ParentGrp=" + CategoryCode + "";
        //                }
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                // string strQry = "Select isnull(cast(cast(SubCategoryImage as varbinary(max)) as varchar(max)),'') as Image, * from ESSubCategory  where " + strwhere + "";
        //                queryStr = "select Code,Name,ParentGrp as CategoryCode,'' as img from Master1 where mastertype =5 and ParentGrp<>0  and " + strwhere + "";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in table.Rows)
        //                    {
        //                        objResult.Add(new SubCategoryList
        //                        {

        //                            Code = (int)dr["Code"],
        //                            CategoryCode = (int)dr["CategoryCode"],
        //                            Name = (string)dr["Name"],
        //                            CategoryImage = clsMain.MyString(IMGFolder) + clsMain.MyString(dr["Name"]) + ".jpg"
        //                        });
        //                    }
        //                }

        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };

        //            }

        //            public dynamic GetPartyFevouriteProducts(int PartyID, string CompCode, string FY)
        //            {
        //                List<ProductList> objResult = new List<ProductList>();
        //                List<Image1> objProductImage = new List<Image1>();
        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select M.Code,M.Name,M.d2 as Price,M.ParentGrp as SubCategoryCode from ES_PartyFavourite A Inner Join Master1 M On A.ProductID = M.Code Where A.PartyID = " + clsMain.MyInt(PartyID) + " And M.MasterType = 6 Order By M.Name";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    //DataTable dt = obj.getTable(strQry);

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        ProductList pl = new ProductList();

        //                        foreach (DataRow item in table.Rows)
        //                        {
        //                            pl = new ProductList();
        //                            pl.Code = clsMain.MyInt(item["Code"]);
        //                            pl.Name = clsMain.MyString(item["Name"]);
        //                            pl.SubCategoryCode = clsMain.MyString(item["SubCategoryCode"]);
        //                            pl.Price = clsMain.MyString(item["Price"]);
        //                            pl.Description = "";
        //                            pl.MinQTY = "";
        //                            pl.MaxQTY = "";
        //                            pl.Fevourite = 0;
        //                            string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + ".jpg";
        //                            pl.imgURL = url;
        //                            objResult.Add(pl);
        //                        }
        //                    }

        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult.ToList() };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //            }


        //            [HttpGet]
        //            public dynamic GetProducts(string SubCategoryCode, int PartyID, int CType, int UserCode, int UserType, string CompCode, string FY, int Status)
        //            {
        //                List<ProductList> objResult = new List<ProductList>();
        //                List<Image1> objProductImage = new List<Image1>();

        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                if (Provider == 1)
        //                {
        //                    objResult = GetProductsAccess(SubCategoryCode, PartyID, CType, UserCode, UserType, ConnectionString, Status);
        //                }
        //                else
        //                {
        //                    objResult = GetProductsSQL(SubCategoryCode, PartyID, CType, UserCode, UserType, ConnectionString, Status);
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //            }

        //            public List<ProductList> GetProductsSQL(string SubCategoryCode, int PartyID, int CType, int UserCode, int UserType, string ConnectionString, int Status)
        //            {
        //                List<ProductList> objResult = new List<ProductList>();
        //                List<Image1> objProductImage = new List<Image1>();

        //                try
        //                {

        //                    double PPrice = 0;
        //                    double PMRP = 0;
        //                    SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    SqlParameter[] Para = new SqlParameter[5];
        //                    Para[0] = new SqlParameter("@SubCategoryCode", clsMain.MyInt(SubCategoryCode));
        //                    Para[1] = new SqlParameter("@PartyID", clsMain.MyInt(PartyID));
        //                    Para[2] = new SqlParameter("@CType", clsMain.MyInt(CType));
        //                    Para[3] = new SqlParameter("@UserCode", clsMain.MyInt(UserCode));
        //                    Para[4] = new SqlParameter("@UserType", clsMain.MyInt(UserType));

        //                    DataTable dt = obj.getTable("SP_GetProducts", Para);

        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ProductList pl = new ProductList();

        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            if (Status == 0)
        //                            {

        //                                int itemCode = clsMain.MyInt(item["Code"]);
        //                                bool itemFound = false;
        //                                for (int i = 0; i < objResult.Count; i++)
        //                                {
        //                                    if (objResult[i].Code == itemCode)
        //                                    {
        //                                        itemFound = true;
        //                                        pl = objResult[i];
        //                                        break;
        //                                    }
        //                                }
        //                                if (!itemFound)
        //                                {
        //                                    pl = new ProductList();
        //                                    pl.Code = itemCode;
        //                                    pl.Name = clsMain.MyString(item["Name"]);
        //                                    pl.Alias = clsMain.MyString(item["Alias"]);
        //                                    pl.SubCategoryCode = clsMain.MyString(item["SubCategoryCode"]);

        //                                    PPrice = clsMain.MyDouble(item["PPrice"]);
        //                                    PMRP = clsMain.MyDouble(item["PMRP"]);

        //                                    if (PPrice > 0)
        //                                    {
        //                                        pl.Price = clsMain.MyString(PPrice);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.Price = clsMain.MyString(item["Price"]);
        //                                    }

        //                                    if (PMRP > 0)
        //                                    {
        //                                        pl.MRP = clsMain.MyDouble(PMRP);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                                    }
        //                                    pl.Description = clsMain.MyString(item["Description"]);
        //                                    pl.MinQTY = clsMain.MyString(item["minqty"]);
        //                                    if (clsMain.MyInt(pl.MinQTY) <= 0) { pl.MinQTY = "1"; }
        //                                    pl.MaxQTY = clsMain.MyString(item["MaxQty"]);
        //                                    if (item["Fevourite"] != null)
        //                                    {
        //                                        pl.Fevourite = clsMain.MyInt(item["Fevourite"]);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.Fevourite = 0;
        //                                    }
        //                                    pl.AltUnit = clsMain.MyString(item["AltUnit"]);
        //                                    pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //                                    int ApplyPrice = 0;
        //                                    ApplyPrice = clsMain.MyInt(item["ApplyPrice"]);
        //                                    pl.Confactor = clsMain.MyDouble(item["ConFactor"]);
        //                                    pl.CFMode = clsMain.MyInt(item["CFMode"]);
        //                                    if (ApplyPrice == 0)
        //                                    {
        //                                        pl.Price = clsMain.MyString(item["Price"]);
        //                                        pl.AltPrice = clsMain.MyDouble(item["Price"]) / clsMain.MyDouble(item["ConFactor"]);
        //                                    }
        //                                    else if (ApplyPrice == 1)
        //                                    {
        //                                        pl.Price = clsMain.MyString(clsMain.MyDouble(item["AltPrice"]) * clsMain.MyDouble(item["ConFactor"]));
        //                                        pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.Price = clsMain.MyString(item["Price"]);
        //                                        pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                    }
        //                                    pl.Stock = clsMain.MyDouble(item["Stock"]);
        //                                    pl.DiscPer = clsMain.MyDouble(item["DiscPer"]);
        //                                    pl.Unit = clsMain.MyString(item["Unit"]);
        //                                    string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + ".jpg";
        //                                    pl.imgURL = url;
        //                                    pl.Description1 = clsMain.MyString(item["Desc1"]);
        //                                    pl.Description2 = clsMain.MyString(item["Desc2"]);
        //                                    pl.Description3 = clsMain.MyString(item["Desc3"]);
        //                                    pl.Description4 = clsMain.MyString(item["Desc4"]);
        //                                    objResult.Add(pl);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                if (clsMain.MyDouble(item["Stock"]) > 0)
        //                                {
        //                                    int itemCode = clsMain.MyInt(item["Code"]);
        //                                    bool itemFound = false;
        //                                    for (int i = 0; i < objResult.Count; i++)
        //                                    {
        //                                        if (objResult[i].Code == itemCode)
        //                                        {
        //                                            itemFound = true;
        //                                            pl = objResult[i];
        //                                            break;
        //                                        }
        //                                    }
        //                                    if (!itemFound)
        //                                    {
        //                                        pl = new ProductList();
        //                                        pl.Code = itemCode;
        //                                        pl.Name = clsMain.MyString(item["Name"]);
        //                                        pl.Alias = clsMain.MyString(item["Alias"]);
        //                                        pl.SubCategoryCode = clsMain.MyString(item["SubCategoryCode"]);
        //                                        pl.AltUnit = clsMain.MyString(item["AltUnit"]);
        //                                        PPrice = clsMain.MyDouble(item["PPrice"]);
        //                                        PMRP = clsMain.MyDouble(item["PMRP"]);

        //                                        if (PPrice > 0)
        //                                        {
        //                                            pl.Price = clsMain.MyString(PPrice);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.Price = clsMain.MyString(item["Price"]);
        //                                        }

        //                                        if (PMRP > 0)
        //                                        {
        //                                            pl.MRP = clsMain.MyDouble(PMRP);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                                        }
        //                                        pl.CFMode = clsMain.MyInt(item["CFMode"]);
        //                                        pl.Description = clsMain.MyString(item["Description"]);
        //                                        pl.MinQTY = clsMain.MyString(item["minqty"]);
        //                                        if (clsMain.MyInt(pl.MinQTY) <= 0) { pl.MinQTY = "1"; }
        //                                        pl.MaxQTY = clsMain.MyString(item["MaxQty"]);
        //                                        if (item["Fevourite"] != null)
        //                                        {
        //                                            pl.Fevourite = clsMain.MyInt(item["Fevourite"]);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.Fevourite = 0;
        //                                        }

        //                                        pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //                                        int ApplyPrice = 0;
        //                                        pl.Confactor = clsMain.MyDouble(item["ConFactor"]);
        //                                        ApplyPrice = clsMain.MyInt(item["ApplyPrice"]);
        //                                        if (ApplyPrice == 0)
        //                                        {
        //                                            pl.Price = clsMain.MyString(item["Price"]);
        //                                            pl.AltPrice = clsMain.MyDouble(item["Price"]) / clsMain.MyDouble(item["ConFactor"]);
        //                                        }
        //                                        else if (ApplyPrice == 1)
        //                                        {
        //                                            pl.Price = clsMain.MyString(clsMain.MyDouble(item["AltPrice"]) * clsMain.MyDouble(item["ConFactor"]));
        //                                            pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.Price = clsMain.MyString(item["Price"]);
        //                                            pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                        }
        //                                        pl.Stock = clsMain.MyDouble(item["Stock"]);
        //                                        pl.DiscPer = clsMain.MyDouble(item["DiscPer"]);
        //                                        pl.Unit = clsMain.MyString(item["Unit"]);
        //                                        string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + ".jpg";
        //                                        pl.imgURL = url;
        //                                        pl.Description1 = clsMain.MyString(item["Desc1"]);
        //                                        pl.Description2 = clsMain.MyString(item["Desc2"]);
        //                                        pl.Description3 = clsMain.MyString(item["Desc3"]);
        //                                        pl.Description4 = clsMain.MyString(item["Desc4"]);
        //                                        objResult.Add(pl);
        //                                    }
        //                                }
        //                            }

        //                        }
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public List<ProductList> GetProductsAccess(string SubCategoryCode, int PartyID, int CType, int UserCode, int UserType, string ConnectionString, int Status)
        //            {
        //                List<ProductList> objResult = new List<ProductList>();
        //                List<Image1> objProductImage = new List<Image1>();

        //                try
        //                {
        //                    double PPrice = 0;
        //                    double PMRP = 0;
        //                    string sql = "";
        //                    DataTable dt = new DataTable();
        //                    int Atype = 0;
        //                    string MCStr = "";
        //                    Atype = GetchkAllMCType(UserCode, ConnectionString);
        //                    if (Atype == 1)
        //                    {
        //                        if (CType == 2)
        //                        {
        //                            sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = m1.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code And RecType = 2 And [Date] <= Date())) as Stock";
        //                            sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                            sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from ((((Master1 m1 Inner Join MasterSupport MS On M1.Code = MS.MasterCode) Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where MS.CM1 = " + SubCategoryCode + " and m1.mastertype = 6 Order by m1.Name";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                        }
        //                        else
        //                        {
        //                            if (clsMain.MyInt(SubCategoryCode) > 0)
        //                            {
        //                                sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = m1.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code And RecType = 2 And [Date] <= Date())) as Stock";
        //                                sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                                sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from (((Master1 m1 Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where m1.ParentGrp = " + SubCategoryCode + " and m1.mastertype = 6 Order by m1.Name";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                            }
        //                            else
        //                            {
        //                                int SIType = 0;
        //                                sql = "Select Top 1 IIF(IsNull(ApplyOn), 0,ApplyOn) as AppOn from ESSFACatalougeConfig";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                                if (dt != null && dt.Rows.Count > 0)
        //                                {
        //                                    SIType = clsMain.MyInt(dt.Rows[0]["AppOn"]);
        //                                }

        //                                if (SIType == 1)
        //                                {
        //                                    sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = m1.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code And RecType = 2 And [Date] <= Date())) as Stock";
        //                                    sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                                    sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from (((Master1 m1 Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where m1.mastertype = 6 Order by m1.Name";
        //                                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                                }
        //                                else
        //                                {
        //                                    sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = m1.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code And RecType = 2 And [Date] <= Date())) as Stock";
        //                                    sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                                    sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from (((Master1 m1 Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where m1.mastertype = 6 Order by m1.Name";
        //                                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                                }
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MCStr = GetAllMCQueryStr(UserCode, ConnectionString);
        //                        if (CType == 2)
        //                        {
        //                            sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ") And RecType = 2 And [Date] <= Date())) as Stock";
        //                            sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                            sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from ((((Master1 m1 Inner Join MasterSupport MS On M1.Code = MS.MasterCode) Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where MS.CM1 = " + SubCategoryCode + " and m1.mastertype = 6 Order by m1.Name";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                        }
        //                        else
        //                        {
        //                            if (clsMain.MyInt(SubCategoryCode) > 0)
        //                            {
        //                                sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ") And RecType = 2 And [Date] <= Date())) as Stock";
        //                                sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                                sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from (((Master1 m1 Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where m1.ParentGrp = " + SubCategoryCode + " and m1.mastertype = 6 Order by m1.Name";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                            }
        //                            else
        //                            {
        //                                int SIType = 0;
        //                                sql = "Select Top 1 IIF(IsNull(ApplyOn), 0,ApplyOn) as AppOn from ESSFACatalougeConfig";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                                if (dt != null && dt.Rows.Count > 0)
        //                                {
        //                                    SIType = clsMain.MyInt(dt.Rows[0]["AppOn"]);
        //                                }

        //                                if (SIType == 1)
        //                                {
        //                                    sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ") And RecType = 2 And [Date] <= Date())) as Stock";
        //                                    sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                                    sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from (((Master1 m1 Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where m1.mastertype = 6 Order by m1.Name";
        //                                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                                }
        //                                else
        //                                {
        //                                    sql = "select m1.ParentGrp as SubCategoryCode,m1.Code, m1.d2 as MRP,m1.D3 as Price,IIF(IsNull(m1.D16),0,m1.D16) as DiscPer,iif(IsNull(M1.I9),1,M1.i9) as CFMode,iif(isnull(M3.Name),'',M3.Name) as AltUnit,M1.D21 as AltPrice,M1.I7 as ApplyPrice,IIF(IsNull(M1.D1),1,M1.D1) as ConFactor,m1.D10 as MinPrice,IIF(IsNull(m2.Name), '', m2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = m1.Code and Mastercode2 in (" + MCStr + ") And RecType = 2 And [Date] <= Date())) as Stock";
        //                                    sql = sql + ",IIF(IsNull(m1.MinOrderQty),0,m1.MinOrderQty) as MinQty,IIF(IsNull(m1.MaxOrderQty), 0,m1.MaxOrderQty) as MaxQty,m1.Code,m1.Name,m1.Alias,0 as PPrice,0 as PMRP,'' as ProductImage";
        //                                    sql = sql + ",(Select Top 1 IIF(IsNull(ProductID),0,1) From ES_PartyFavourite Where PartyID = " + PartyID + " and ProductID = m1.Code) as Fevourite,IIF(IsNull(mai.Address1), '',mai.Address1) as Desc1,IIF(IsNull(mai.Address2), '',mai.Address2) as Desc2,IIF(IsNull(mai.Address3), '',mai.Address3) as Desc3,IIF(IsNull(mai.Address4), '',mai.Address4) as Desc4,m1.MasterNotes as Description from (((Master1 m1 Left Join Master1 m2 On m1.CM1 = m2.Code) Left Join MasterAddressInfo mai on mai.MasterCode = m1.Code) left Join Master1 M3 on M1.cm2 = M3.code) where m1.mastertype = 6 Order by m1.Name";
        //                                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                                }
        //                            }
        //                        }
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ProductList pl = new ProductList();

        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            if (Status == 0)
        //                            {
        //                                int itemCode = clsMain.MyInt(item["Code"]);
        //                                bool itemFound = false;
        //                                for (int i = 0; i < objResult.Count; i++)
        //                                {
        //                                    if (objResult[i].Code == itemCode)
        //                                    {
        //                                        itemFound = true;
        //                                        pl = objResult[i];
        //                                        break;
        //                                    }
        //                                }
        //                                if (!itemFound)
        //                                {
        //                                    pl = new ProductList();
        //                                    pl.Code = itemCode;
        //                                    pl.Name = clsMain.MyString(item["Name"]);
        //                                    pl.Alias = clsMain.MyString(item["Alias"]);
        //                                    pl.SubCategoryCode = clsMain.MyString(item["SubCategoryCode"]);

        //                                    PPrice = clsMain.MyDouble(item["PPrice"]);
        //                                    PMRP = clsMain.MyDouble(item["PMRP"]);

        //                                    if (PPrice > 0)
        //                                    {
        //                                        pl.Price = clsMain.MyString(PPrice);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.Price = clsMain.MyString(item["Price"]);
        //                                    }

        //                                    if (PMRP > 0)
        //                                    {
        //                                        pl.MRP = clsMain.MyDouble(PMRP);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                                    }
        //                                    pl.Description = clsMain.MyString(item["Description"]);
        //                                    pl.MinQTY = clsMain.MyString(item["minqty"]);
        //                                    if (clsMain.MyInt(pl.MinQTY) <= 0) { pl.MinQTY = "1"; }
        //                                    pl.MaxQTY = clsMain.MyString(item["MaxQty"]);
        //                                    if (item["Fevourite"] != null)
        //                                    {
        //                                        pl.Fevourite = clsMain.MyInt(item["Fevourite"]);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.Fevourite = 0;
        //                                    }
        //                                    pl.AltUnit = clsMain.MyString(item["AltUnit"]);
        //                                    pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //                                    int ApplyPrice = 0;
        //                                    ApplyPrice = clsMain.MyInt(item["ApplyPrice"]);
        //                                    pl.Confactor = clsMain.MyDouble(item["ConFactor"]);
        //                                    pl.CFMode = clsMain.MyInt(item["CFMode"]);
        //                                    if (ApplyPrice == 0)
        //                                    {
        //                                        pl.Price = clsMain.MyString(item["Price"]);
        //                                        pl.AltPrice = clsMain.MyDouble(item["Price"]) / clsMain.MyDouble(item["ConFactor"]);
        //                                    }
        //                                    else if (ApplyPrice == 1)
        //                                    {
        //                                        pl.Price = clsMain.MyString(clsMain.MyDouble(item["AltPrice"]) * clsMain.MyDouble(item["ConFactor"]));
        //                                        pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                    }
        //                                    else
        //                                    {
        //                                        pl.Price = clsMain.MyString(item["Price"]);
        //                                        pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                    }
        //                                    pl.Stock = clsMain.MyDouble(item["Stock"]);
        //                                    pl.DiscPer = clsMain.MyDouble(item["DiscPer"]);
        //                                    pl.Unit = clsMain.MyString(item["Unit"]);
        //                                    string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + ".jpg";
        //                                    pl.imgURL = url;
        //                                    pl.Description1 = clsMain.MyString(item["Desc1"]);
        //                                    pl.Description2 = clsMain.MyString(item["Desc2"]);
        //                                    pl.Description3 = clsMain.MyString(item["Desc3"]);
        //                                    pl.Description4 = clsMain.MyString(item["Desc4"]);
        //                                    objResult.Add(pl);
        //                                }

        //                            }
        //                            else
        //                            {
        //                                if (clsMain.MyDouble(item["Stock"]) > 0)
        //                                {
        //                                    int itemCode = clsMain.MyInt(item["Code"]);
        //                                    bool itemFound = false;
        //                                    for (int i = 0; i < objResult.Count; i++)
        //                                    {
        //                                        if (objResult[i].Code == itemCode)
        //                                        {
        //                                            itemFound = true;
        //                                            pl = objResult[i];
        //                                            break;
        //                                        }
        //                                    }
        //                                    if (!itemFound)
        //                                    {
        //                                        pl = new ProductList();
        //                                        pl.Code = itemCode;
        //                                        pl.Name = clsMain.MyString(item["Name"]);
        //                                        pl.Alias = clsMain.MyString(item["Alias"]);
        //                                        pl.SubCategoryCode = clsMain.MyString(item["SubCategoryCode"]);

        //                                        PPrice = clsMain.MyDouble(item["PPrice"]);
        //                                        PMRP = clsMain.MyDouble(item["PMRP"]);

        //                                        if (PPrice > 0)
        //                                        {
        //                                            pl.Price = clsMain.MyString(PPrice);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.Price = clsMain.MyString(item["Price"]);
        //                                        }

        //                                        if (PMRP > 0)
        //                                        {
        //                                            pl.MRP = clsMain.MyDouble(PMRP);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                                        }
        //                                        pl.Description = clsMain.MyString(item["Description"]);
        //                                        pl.MinQTY = clsMain.MyString(item["minqty"]);
        //                                        if (clsMain.MyInt(pl.MinQTY) <= 0) { pl.MinQTY = "1"; }
        //                                        pl.MaxQTY = clsMain.MyString(item["MaxQty"]);
        //                                        if (item["Fevourite"] != null)
        //                                        {
        //                                            pl.Fevourite = clsMain.MyInt(item["Fevourite"]);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.Fevourite = 0;
        //                                        }

        //                                        pl.AltUnit = clsMain.MyString(item["AltUnit"]);
        //                                        pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //                                        int ApplyPrice = 0;
        //                                        ApplyPrice = clsMain.MyInt(item["ApplyPrice"]);
        //                                        pl.Confactor = clsMain.MyDouble(item["ConFactor"]);
        //                                        pl.CFMode = clsMain.MyInt(item["CFMode"]);
        //                                        if (ApplyPrice == 0)
        //                                        {
        //                                            pl.Price = clsMain.MyString(item["Price"]);
        //                                            pl.AltPrice = clsMain.MyDouble(item["Price"]) / clsMain.MyDouble(item["ConFactor"]);
        //                                        }
        //                                        else if (ApplyPrice == 1)
        //                                        {
        //                                            pl.Price = clsMain.MyString(clsMain.MyDouble(item["AltPrice"]) * clsMain.MyDouble(item["ConFactor"]));
        //                                            pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                        }
        //                                        else
        //                                        {
        //                                            pl.Price = clsMain.MyString(item["Price"]);
        //                                            pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                        }
        //                                        pl.Stock = clsMain.MyDouble(item["Stock"]);
        //                                        pl.DiscPer = clsMain.MyDouble(item["DiscPer"]);
        //                                        pl.Unit = clsMain.MyString(item["Unit"]);
        //                                        string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + ".jpg";
        //                                        pl.imgURL = url;
        //                                        pl.Description1 = clsMain.MyString(item["Desc1"]);
        //                                        pl.Description2 = clsMain.MyString(item["Desc2"]);
        //                                        pl.Description3 = clsMain.MyString(item["Desc3"]);
        //                                        pl.Description4 = clsMain.MyString(item["Desc4"]);
        //                                        objResult.Add(pl);
        //                                    }
        //                                }
        //                            }

        //                        }
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            //public dynamic GetProducts(string SubCategoryCode, int PartyID, int CType,int UserCode,int UserType)
        //            //{
        //            //    List<ProductList> objResult = new List<ProductList>();
        //            //    List<Image1> objProductImage = new List<Image1>();

        //            //    double PPrice = 0;
        //            //    double PMRP = 0;
        //            //    SQLHELPER obj = new SQLHELPER(ConnectionString);
        //            //    SqlParameter[] Para = new SqlParameter[5];
        //            //    Para[0] = new SqlParameter("@SubCategoryCode", clsMain.MyInt(SubCategoryCode));
        //            //    Para[1] = new SqlParameter("@PartyID", clsMain.MyInt(PartyID));
        //            //    Para[2] = new SqlParameter("@CType", clsMain.MyInt(CType));
        //            //    Para[3] = new SqlParameter("@UserCode", clsMain.MyInt(UserCode));
        //            //    Para[4] = new SqlParameter("@UserType", clsMain.MyInt(UserType));

        //            //    DataTable dt = obj.getTable("SP_GetProducts",Para);

        //            //    if (dt != null && dt.Rows.Count > 0)
        //            //    {
        //            //        ProductList pl = new ProductList();

        //            //        foreach (DataRow item in dt.Rows)
        //            //        {
        //            //            int itemCode = clsMain.MyInt(item["Code"]);
        //            //            bool itemFound = false;
        //            //            for (int i = 0; i < objResult.Count; i++)
        //            //            {
        //            //                if (objResult[i].Code == itemCode)
        //            //                {
        //            //                    itemFound = true;
        //            //                    pl = objResult[i];
        //            //                    break;
        //            //                }
        //            //            }
        //            //            if (!itemFound)
        //            //            {
        //            //                pl = new ProductList();
        //            //                pl.Code = itemCode;
        //            //                pl.Name = clsMain.MyString(item["Name"]);
        //            //                pl.Alias = clsMain.MyString(item["Alias"]);
        //            //                pl.SubCategoryCode = clsMain.MyString(item["SubCategoryCode"]);

        //            //                PPrice = clsMain.MyDouble(item["PPrice"]);
        //            //                PMRP = clsMain.MyDouble(item["PMRP"]);

        //            //                if (PPrice > 0)
        //            //                {
        //            //                    pl.Price = clsMain.MyString(PPrice);
        //            //                }
        //            //                else
        //            //                {
        //            //                    pl.Price = clsMain.MyString(item["Price"]);
        //            //                }

        //            //                if (PMRP > 0)
        //            //                {
        //            //                    pl.MRP = clsMain.MyDouble(PMRP);
        //            //                }
        //            //                else
        //            //                {
        //            //                    pl.MRP = clsMain.MyDouble(item["MRP"]);
        //            //                }
        //            //                pl.Description = clsMain.MyString(item["Description"]);
        //            //                pl.MinQTY = clsMain.MyString(item["minqty"]);
        //            //                if (clsMain.MyInt(pl.MinQTY) <= 0) { pl.MinQTY = "1"; }
        //            //                pl.MaxQTY = clsMain.MyString(item["MaxQty"]);
        //            //                if (item["Fevourite"] != null)
        //            //                {
        //            //                    pl.Fevourite = clsMain.MyInt(item["Fevourite"]);
        //            //                }
        //            //                else
        //            //                {
        //            //                    pl.Fevourite = 0;
        //            //                }

        //            //                pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //            //                pl.Stock = clsMain.MyDouble(item["Stock"]);
        //            //                pl.DiscPer = clsMain.MyDouble(item["DiscPer"]);
        //            //                pl.Unit = clsMain.MyString(item["Unit"]);

        //            //                //string folderPath = HttpContext.Current.Server.MapPath("~/CatalogImages");
        //            //                //string[] filePaths = Directory.GetFiles(folderPath, pl.Name + ".*");
        //            //                //foreach (string file in filePaths)
        //            //                //{
        //            //                //    FileInfo f = new FileInfo(file);
        //            //                //    string url = "http://103.207.64.9:99/SFA/CatalogImages/" + f.Name;
        //            //                //    pl.imgURL = url;
        //            //                //}
        //            //                string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + ".jpg";
        //            //                pl.imgURL = url;
        //            //                pl.Description1 = clsMain.MyString(item["Desc1"]);
        //            //                pl.Description2 = clsMain.MyString(item["Desc2"]);
        //            //                pl.Description3 = clsMain.MyString(item["Desc3"]);
        //            //                pl.Description4 = clsMain.MyString(item["Desc4"]);
        //            //                objResult.Add(pl);
        //            //            }
        //            //        }
        //            //    }
        //            //    return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //            //}

        //            public dynamic GetMultipalProductsImage1(string ProductCode, string CompCode, string FY)
        //            {
        //                List<MultipalProductImages> objResult = new List<MultipalProductImages>();
        //                List<Image1> objProductImage = new List<Image1>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                queryStr = "select ep.SubCategoryCode, m1.d4 as Price,1 as minqty ,ep.Code,ep.Name,'' as ProductImage" +
        //                " from ESProduct ep " +
        //                //" left outer join ESProductImage epi on epi.Product=ep.Code" +
        //                " left outer join Master1 m1 on m1.Code=ep.Code" +
        //                " where ep.Code=" + ProductCode + " Order by ep.Code ";
        //                //DataTable dt = obj.getTable(strQry);
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    MultipalProductImages pl = new MultipalProductImages();

        //                    foreach (DataRow item in table.Rows)
        //                    {
        //                        int itemCode = clsMain.MyInt(item["Code"]);
        //                        bool itemFound = false;

        //                        for (int i = 0; i < objResult.Count; i++)
        //                        {
        //                            if (objResult[i].Code == itemCode)
        //                            {
        //                                itemFound = true;
        //                                pl = objResult[i];
        //                                break;
        //                            }
        //                        }
        //                        if (!itemFound)
        //                        {
        //                            pl = new MultipalProductImages();
        //                            pl.Code = itemCode;
        //                            pl.Name = clsMain.MyString(item["Name"]);

        //                            pl.ProductImage = new List<Image1>();
        //                            if (clsMain.MyLen(item["ProductImage"]) > 0)
        //                            {
        //                                string folderPath = HttpContext.Current.Server.MapPath("~" + ImgFolderPath + "");
        //                                string[] filePaths = Directory.GetFiles(folderPath, pl.Name + "*.*");

        //                                Image1 im = new Image1();
        //                                string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + "" + clsMain.MyString(item["ProductImage"]) + "*.*";
        //                                im.ProductImage = url;
        //                                pl.ProductImage.Add(im);
        //                            }
        //                            objResult.Add(pl);
        //                        }
        //                        else
        //                        {
        //                            if (clsMain.MyLen(item["ProductImage"]) > 0)
        //                            {
        //                                Image1 im = new Image1();
        //                                string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["Name"]) + "" + clsMain.MyString(item["ProductImage"]) + "*.*";
        //                                im.ProductImage = url;
        //                                pl.ProductImage.Add(im);
        //                            }
        //                        }
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //                //return objResult.ToList();
        //            }

        //            public dynamic GetMultipalProductsImage(string ProductCode, string CompCode, string FY)
        //            {
        //                //MultipalProductImages pl = new MultipalProductImages();
        //                List<Image1> objProductImage = new List<Image1>();

        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                queryStr = "select top 1 m1.ParentGrp as SubCategoryCode, m1.d4 as Price,1 as minqty ,m1.Code,m1.Name,'' as ProductImage" + Environment.NewLine +
        //                " from Master1 m1" + Environment.NewLine +
        //                "  where  MasterType=6 and m1.Code=" + ProductCode + " Order by m1.Code ";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    //pl.Code = clsMain.MyInt(ProductCode);
        //                    //pl.Name = clsMain.MyString(table.Rows[0]["Name"]);
        //                    string folderPath = HttpContext.Current.Server.MapPath("~" + ImgFolderPath + "");
        //                    string[] filePaths = Directory.GetFiles(folderPath, table.Rows[0]["Name"].ToString() + "_*.jpg");
        //                    foreach (string file in filePaths)
        //                    {
        //                        FileInfo f = new FileInfo(file);
        //                        Image1 im = new Image1();
        //                        string url = clsMain.MyString(IMGFolder) + f.Name;
        //                        im.ProductImage = url;
        //                        objProductImage.Add(im);
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objProductImage };
        //            }

        //            public dynamic GetState(string CompCode, string FY)
        //            {
        //                List<State> objResult = new List<State>();

        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                //string strwhere = "1=1 ";
        //                //if (clsMain.MyLen(StateCode) > 0)
        //                //{
        //                //    strwhere += " and StateCode='" + StateCode + "'  ";
        //                //}
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                queryStr = "select * from Master1 where mastertype=56";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in table.Rows)
        //                    {
        //                        objResult.Add(new State
        //                        {

        //                            StateCode = (int)dr["Code"],
        //                            StateName = (string)dr["Name"]
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetSalesManList(int SCode, string CompCode, string FY)
        //            {
        //                List<SalesManList> objResult = new List<SalesManList>();
        //                BusyVoucher vch = new BusyVoucher();

        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                queryStr = "Select Name,Code from ESSFASalesHeadConfig S Left Join Master1 M1 on S.saleshead = M1.code where Rectype =1 and Salescode  =" + SCode + "";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in table.Rows)
        //                    {
        //                        objResult.Add(new SalesManList
        //                        {

        //                            SCode = (int)dr["Code"],
        //                            SName = (string)dr["Name"]
        //                        });
        //                    }
        //                }
        //                objResult.Add(new SalesManList
        //                {

        //                    SCode = SCode,
        //                    SName = vch.GetMasterCodeToName(Provider, ConnectionString, SCode),
        //                });
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetAccountGroupFromBusy(string CompCode, string FY)
        //            {
        //                List<AccGroup> objResult = new List<AccGroup>();

        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();

        //                    queryStr = "Select Code,NameAlias from Help1 Where MasterType = 1 And RecType = 203 And NameOrAlias = 1 And MasterSeries = 0 Order By NameAlias";
        //                    //DataTable dt = obj.getTable(str);
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);

        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in table.Rows)
        //                        {
        //                            objResult.Add(new AccGroup
        //                            {

        //                                Code = clsMain.MyInt(dr["Code"]),
        //                                Name = clsMain.MyString(dr["NameAlias"])
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Fail", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetExpenseHeads(string CompCode, string FY)
        //            {
        //                List<ExpenseHead> objResult = new List<ExpenseHead>();

        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();

        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select C1 from ESExpenseVchConfig where RecType = 2 Order By SrNo";
        //                        //  DataTable dt = obj.getTable(str);
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);

        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select C1 from ESExpenseVchConfig where RecType = 2 Order By SrNo";
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);

        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in table.Rows)
        //                        {
        //                            objResult.Add(new ExpenseHead
        //                            {
        //                                Expense = clsMain.MyString(dr["C1"])
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Fail", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            public dynamic GetCity(string StateCode, string CompCode, string FY)
        //            {
        //                List<City> objResult = new List<City>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                string strwhere = " where MType = 2 ";
        //                if (clsMain.MyInt(StateCode) > 0)
        //                {
        //                    strwhere += " and ParentGrp=" + StateCode + "";
        //                }
        //                if (Provider == 1)
        //                {
        //                    //string str = "select * from ESMaster1 " + strwhere + "";
        //                    // DataTable dt = obj.getTable(str);
        //                    queryStr = "select * from ESMaster1 " + strwhere + "";
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "select * from ESMaster1 " + strwhere + "";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in table.Rows)
        //                    {
        //                        objResult.Add(new City
        //                        {

        //                            CityCode = (int)dr["Code"],
        //                            CityName = (string)dr["Name"],
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };

        //            }

        //            public dynamic GetBeat(string CityCode, string CompCode, string FY)
        //            {
        //                List<BeatList> objResult = new List<BeatList>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                string strwhere = " where MType = 1 ";
        //                if (clsMain.MyInt(CityCode) > 0)
        //                {
        //                    strwhere += " and ParentGrp = " + CityCode + "";
        //                }
        //                if (Provider == 1)
        //                {
        //                    queryStr = "Select Cint(Code) as BCode,Name  from ESMaster1 " + strwhere + "";
        //                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "Select Cast(Code as Int) as BCode,Name  from ESMaster1 " + strwhere + "";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in table.Rows)
        //                    {
        //                        objResult.Add(new BeatList
        //                        {

        //                            BeatId = clsMain.MyString(dr["BCode"]),
        //                            BeatName = (string)dr["Name"],
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };

        //            }

        //            [HttpGet]
        //            public List<Location> CurrentLocation(string UserId, string PartyCode, string Latitude, string Longitude, string CAddress, string CompCode, string FY)
        //            {

        //                List<Location> objResult = new List<Location>();
        //                User objResult1 = new User();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    if (Provider == 1)
        //                    {
        //                        objResult = CurrentLocationSQL(UserId, PartyCode, Latitude, Longitude, CAddress, ConnectionString);
        //                    }
        //                    else
        //                    {
        //                        objResult = CurrentLocationAcccess(UserId, PartyCode, Latitude, Longitude, CAddress, ConnectionString);
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public List<Location> CurrentLocationSQL(string UserId, string PartyCode, string Latitude, string Longitude, string CAddress, string ConnectionString)
        //            {

        //                List<Location> objResult = new List<Location>();
        //                User objResult1 = new User();
        //                try
        //                {
        //                    SqlParameter[] Para = new SqlParameter[5];

        //                    Para[0] = new SqlParameter("@UserId", clsMain.MyString(UserId));
        //                    Para[1] = new SqlParameter("@Latitude", clsMain.MyString(Latitude));
        //                    Para[2] = new SqlParameter("@Longitude", clsMain.MyString(Longitude));
        //                    Para[3] = new SqlParameter("@PartyCode", clsMain.MyString(PartyCode));
        //                    Para[4] = new SqlParameter("@CAddress", clsMain.MyString(CAddress));

        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_SaveLocation", Para);

        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        objResult = dt.AsEnumerable()
        //                            .Select(row => new Location()
        //                            {
        //                                Message = row.Field<string>("msg"),
        //                                Sucess = row.Field<int>("Sucess"),
        //                                Latitude = row.Field<string>("Latitude"),
        //                                Longitude = row.Field<string>("Longitude"),
        //                                CAddress = row.Field<string>("CAddress"),
        //                                UserId = row.Field<int>("UserId"),
        //                                PartyCode = row.Field<int>("PartyCode"),
        //                            }).ToList();
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public List<Location> CurrentLocationAcccess(string UserId, string PartyCode, string Latitude, string Longitude, string CAddress, string ConnectionString)
        //            {

        //                List<Location> objResult = new List<Location>();
        //                User objResult1 = new User();
        //                int Status = 0;
        //                string Msg = "Failed";

        //                try
        //                {
        //                    string sql = "";
        //                    DataTable dt = new DataTable();
        //                    int R = 0;

        //                    sql = "Select Top 1 * from ESAppAccountDet where PartyCode = " + PartyCode + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        sql = "Update ESAppAccountDet set Latitude = '" + Latitude.Replace("'", "''") + "',Longitude = '" + Longitude.Replace("'", "''") + "',SalesmanID = " + UserId + ",CAddress = '" + CAddress.Replace("'", "''") + "',Approval = 0 where PartyCode = " + PartyCode + "";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        if (R > 0)
        //                        {
        //                            Status = 1;
        //                            Msg = "Updated";
        //                        }
        //                    }
        //                    else
        //                    {
        //                        Status = 0;
        //                        Msg = "Party Details does not exist";
        //                    }
        //                    objResult = dt.AsEnumerable()
        //                        .Select(row => new Location()
        //                        {
        //                            Message = Msg,
        //                            Sucess = Status,
        //                            Latitude = Latitude.ToString(),
        //                            Longitude = Longitude.ToString(),
        //                            CAddress = CAddress.ToString(),
        //                            UserId = clsMain.MyInt(UserId),
        //                            PartyCode = clsMain.MyInt(PartyCode)
        //                        }).ToList();
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpGet]
        //            public List<CheckIn> Checkin(string UserId, string PartyCode, string Latitude, string Longitude, string CheckOut, string Revisit, string Distance)
        //            {

        //                List<CheckIn> objResult = new List<CheckIn>();
        //                User objResult1 = new User();
        //                try
        //                {
        //                    SqlParameter[] Para = new SqlParameter[7];
        //                    Para[0] = new SqlParameter("@UserId", clsMain.MyString(UserId));
        //                    Para[1] = new SqlParameter("@Latitude", clsMain.MyString(Latitude));
        //                    Para[2] = new SqlParameter("@Longitude", clsMain.MyString(Longitude));
        //                    Para[3] = new SqlParameter("@PartyCode", clsMain.MyString(PartyCode));
        //                    Para[4] = new SqlParameter("@CheckOut", clsMain.MyString(CheckOut));
        //                    Para[5] = new SqlParameter("@Revisit", clsMain.MyString(Revisit));
        //                    Para[6] = new SqlParameter("@Distance", clsMain.MyString(Distance));
        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_CheckIn", Para);

        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        objResult = dt.AsEnumerable()
        //                        .Select(row => new CheckIn()
        //                        {
        //                            Message = row.Field<string>("msg"),
        //                            Sucess = row.Field<int>("Sucess"),
        //                            Latitude = row.Field<string>("Latitude"),
        //                            Longitude = row.Field<string>("Longitude"),
        //                            UserId = row.Field<int>("UserId"),
        //                            PartyCode = row.Field<int>("PartyCode"),
        //                            PartyName = row.Field<string>("PartyName"),
        //                            CheckedIn = row.Field<int>("CheckIn"),
        //                            Visited = row.Field<int>("Visited"),
        //                        }).ToList();
        //                    }

        //                    return objResult;

        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //            }


        //            [HttpPost]
        //            public List<CheckIn> CheckinSFA(CheckInSFA Obj, string CompCode, string FY)
        //            {
        //                List<CheckIn> objResult = new List<CheckIn>();
        //                User objResult1 = new User();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    //if (Provider == 1)
        //                    //{
        //                    objResult = CheckinSFAAcccess(Obj, ConnectionString);
        //                    //}
        //                    //else
        //                    //{
        //                    //    objResult = CheckinSFASQL(Obj, ConnectionString);
        //                    //}
        //                    return objResult;
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //            }
        //            public List<CheckIn> CheckinSFASQL(CheckInSFA Obj, string ConnectionString)
        //            {
        //                List<CheckIn> objResult = new List<CheckIn>();
        //                User objResult1 = new User();
        //                try
        //                {
        //                    SqlParameter[] Para = new SqlParameter[9];
        //                    Para[0] = new SqlParameter("@UserId", clsMain.MyString(Obj.UserId));
        //                    Para[1] = new SqlParameter("@Latitude", clsMain.MyString(Obj.Latitude));
        //                    Para[2] = new SqlParameter("@Longitude", clsMain.MyString(Obj.Longitude));
        //                    Para[3] = new SqlParameter("@PartyCode", clsMain.MyString(Obj.PartyCode));
        //                    Para[4] = new SqlParameter("@CheckOut", clsMain.MyString(Obj.CheckOut));
        //                    Para[5] = new SqlParameter("@Revisit", clsMain.MyString(Obj.Revisit));
        //                    Para[6] = new SqlParameter("@Distance", clsMain.MyString(Obj.Distance));
        //                    Para[7] = new SqlParameter("@Description", clsMain.MyString(Obj.Description));
        //                    Para[8] = new SqlParameter("@base64", clsMain.MyString(Obj.Image64));
        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_CheckIn", Para);

        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        objResult = dt.AsEnumerable()
        //                        .Select(row => new CheckIn()
        //                        {
        //                            Message = row.Field<string>("msg"),
        //                            Sucess = row.Field<int>("Sucess"),
        //                            Latitude = row.Field<string>("Latitude"),
        //                            Longitude = row.Field<string>("Longitude"),
        //                            UserId = row.Field<int>("UserId"),
        //                            PartyCode = row.Field<int>("PartyCode"),
        //                            PartyName = row.Field<string>("PartyName"),
        //                            CheckedIn = row.Field<int>("CheckIn"),
        //                            Visited = row.Field<int>("Visited"),
        //                        }).ToList();
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }
        //            [HttpGet]
        //            public int GetAutoApproveConfig(string ConnectionString)
        //            {
        //                int AutoApprove = 0;
        //                try
        //                {

        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    string sql = "Select AutoApprove from ESVchConfig";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        AutoApprove = clsMain.MyInt(dt.Rows[0]["AutoApprove"]);

        //                    }
        //                }
        //                catch
        //                {
        //                    return AutoApprove;
        //                }
        //                return AutoApprove;
        //            }
        //            [HttpPost]
        //            public dynamic SalesMantagData(string CompCode, string FY, SalesMantag Obj)
        //            {
        //                try
        //                {

        //                    string Sql = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable dt = new DataTable();
        //                    APIResponse msg = new APIResponse();

        //                    int R = 0;
        //                    Sql = "select * from ESAppAccountDet where PartyCode = " + Obj.PartyCode + "";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(Sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable(Sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count == 0)
        //                    {
        //                        Sql = "Insert Into ESAppAccountDet ([PartyCode],[SalesManId],[Beat],[Latitude],[longitude],[distance],[Visited],[CheckIn],[Revisit]) Values (" + Obj.PartyCode + ",0,0,'','','',0,0,0)";
        //                        if (Provider == 1)
        //                        {
        //                            R = new ESCommon.OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                        }
        //                        else
        //                        {
        //                            R = new ESCommon.SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                        }
        //                    }
        //                    //if (R > 1)
        //                    //{
        //                    Sql = "select Top 1 * from ESAppAccountDet where (LEN(Latitude) >0 OR LEN(Longitude) > 0) and PartyCode = " + Obj.PartyCode + " and Approval = 1";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(Sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable(Sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        msg.msg = "Location AlReady Tagged";
        //                        msg.Sucess = 1;
        //                        msg.Value = -2;
        //                    }
        //                    else
        //                    {
        //                        if (GetAutoApproveConfig(ConnectionString) == 1)
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                Sql = "Update ESAppAccountDet Set SalesManId = " + Obj.SCode + ",Latitude = '" + Obj.Latitude.Replace("'", "''") + "',Longitude = '" + Obj.Longitude.Replace("'", "''") + "',VisitedDate = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CAddress = '" + Obj.Address.Replace("'", "''") + "',Approval =1 where PartyCode = " + Obj.PartyCode + "";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                            }
        //                            else
        //                            {
        //                                Sql = "Update ESAppAccountDet Set  SalesManId = " + Obj.SCode + ",Latitude = '" + Obj.Latitude.Replace("'", "''") + "',Longitude = '" + Obj.Longitude.Replace("'", "''") + "',VisitedDate = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CAddress = '" + Obj.Address.Replace("'", "''") + "',Approval=1 where PartyCode = " + Obj.PartyCode + "";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                            }
        //                            if (R > 0)
        //                            {
        //                                msg.msg = "Done Sucessfully";
        //                                msg.Sucess = 1;
        //                                msg.Value = 1;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                Sql = "Update ESAppAccountDet Set SalesManId = " + Obj.SCode + ",Latitude = '" + Obj.Latitude.Replace("'", "''") + "',Longitude = '" + Obj.Longitude.Replace("'", "''") + "',VisitedDate = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CAddress = '" + Obj.Address.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                            }
        //                            else
        //                            {
        //                                Sql = "Update ESAppAccountDet Set  SalesManId = " + Obj.SCode + ",Latitude = '" + Obj.Latitude.Replace("'", "''") + "',Longitude = '" + Obj.Longitude.Replace("'", "''") + "',VisitedDate = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CAddress = '" + Obj.Address.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                            }
        //                            if (R > 0)
        //                            {
        //                                msg.msg = "Done Sucessfully";
        //                                msg.Sucess = 1;
        //                                msg.Value = 1;
        //                            }

        //                        }
        //                    }

        //                    //}
        //                    return msg;
        //                }
        //                catch (Exception ex)
        //                {
        //                    APIResponse msg = new APIResponse();
        //                    msg.msg = ex.Message;
        //                    msg.Sucess = -1;
        //                    return msg;
        //                }
        //            }

        //            public List<CheckIn> CheckinSFAAcccess(CheckInSFA Obj, string ConnectionString)
        //            {
        //                List<CheckIn> objResult = new List<CheckIn>();
        //                User objResult1 = new User();
        //                int Status = 0;
        //                string Msg = "Failed";
        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    DataTable dt = new DataTable();
        //                    string sql = "";
        //                    int R = 0;
        //                    int CheckIn = 1;
        //                    int Visited = 0;
        //                    int ReVisit = 0;
        //                    int ID = 0;
        //                    int RVisit = 0;

        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select Top 1 * from ESRepData where PartyCode = " + Obj.PartyCode + " and CheckInTime is not null and CheckOutTime is not null";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select Top 1 * from ESRepData where PartyCode = " + Obj.PartyCode + " and CheckInTime is not null and CheckOutTime is not null";
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }

        //                    if (dt != null && dt.Rows.Count > 0) { RVisit = 1; }

        //                    if (clsMain.MyInt(Obj.CheckOut) == 1 && RVisit == 0) { Visited = 1; ReVisit = 0; }
        //                    if (clsMain.MyInt(Obj.CheckOut) == 1 && RVisit == 1) { Visited = 1; ReVisit = 1; }
        //                    if (clsMain.MyInt(Obj.CheckOut) == 0 && RVisit == 0) { Visited = 0; ReVisit = 0; }
        //                    if (clsMain.MyInt(Obj.CheckOut) == 0 && RVisit == 1) { Visited = 1; ReVisit = 1; }

        //                    if (clsMain.MyInt(Obj.CheckOut) == 1) { CheckIn = 0; }

        //                    string PartyName = BVch.GetMasterCodeToName(Provider, ConnectionString, Obj.PartyCode);
        //                    //if (Provider == 1)
        //                    //{
        //                    //    sql = "Update ESAppAccountDet Set Latitude = '" + Obj.Latitude.Replace("'", "''") + "',Longitude = '" + Obj.Longitude.Replace("'", "''") + "',CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CheckOutTime = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,Distance = '" + Obj.Distance.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                    //    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    //}
        //                    //else
        //                    //{
        //                    //    sql = "Update ESAppAccountDet Set Latitude = '" + Obj.Latitude.Replace("'", "''") + "',Longitude = '" + Obj.Longitude.Replace("'", "''") + "',CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CheckOutTime = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',Distance = '" + Obj.Distance.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                    //    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    //}
        //                    sql = "Select * From ESRepData where PartyCode = " + Obj.PartyCode + "And SalesManID = " + Obj.UserId + "";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        if (clsMain.MyInt(Obj.CheckOut) == 0)
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                sql = "Update ESRepData Set CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CheckInTime = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CAddress = '" + Obj.Distance.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "And SalesManID = " + Obj.UserId + "";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = "Update ESRepData Set CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CheckInTime = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CAddress = '" + Obj.Distance.Replace("'", "''") + "' where  PartyCode = " + Obj.PartyCode + "And SalesManID = " + Obj.UserId + "";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                sql = "Update ESRepData Set CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CheckOutTime = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CAddress = '" + Obj.Distance.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "And SalesManID = " + Obj.UserId + "";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = "Update ESRepData Set CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CheckOutTime = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CAddress = '" + Obj.Distance.Replace("'", "''") + "' where  PartyCode = " + Obj.PartyCode + "And SalesManID = " + Obj.UserId + "";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                        }

        //                    }
        //                    else
        //                    {
        //                        if (clsMain.MyInt(Obj.CheckOut) == 0)
        //                        {
        //                            if (Provider == 1)

        //                            {
        //                                sql = "Insert Into ESRepData(PartyCode,SalesManID,Visited,[VisitedDate],[CheckIn],[CheckInTime],[Revisit],CAddress)Values(" + Obj.PartyCode + "," + Obj.UserId + "," + Visited + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + CheckIn + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + ReVisit + ",'" + Obj.Distance.Replace("'", "''") + "')";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = "Insert Into ESRepData(PartyCode,SalesManID,Visited,[VisitedDate],[CheckIn],[CheckInTime],[Revisit],CAddress)Values(" + Obj.PartyCode + "," + Obj.UserId + "," + Visited + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "'," + CheckIn + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "'," + ReVisit + ",'" + Obj.Distance.Replace("'", "''") + "')";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                sql = "Insert Into ESRepData(PartyCode,SalesManID,Visited,[VisitedDate],[CheckIn],[CheckOutTime],[Revisit],CAddress)Values(" + Obj.PartyCode + "," + Obj.UserId + "," + Visited + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + CheckIn + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + ReVisit + ",'" + Obj.Distance.Replace("'", "''") + "')";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = "Insert Into ESRepData(PartyCode,SalesManID,Visited,[VisitedDate],[CheckIn],[CheckOutTime],[Revisit],CAddress)Values(" + Obj.PartyCode + "," + Obj.UserId + "," + Visited + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "'," + CheckIn + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "'," + ReVisit + ",'" + Obj.Distance.Replace("'", "''") + "')";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                        }
        //                    }

        //                    if (Provider == 1)
        //                    {
        //                        sql = "Update ESAppAccountDet Set CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,CheckOutTime = #" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,Distance = '" + Obj.Distance.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Update ESAppAccountDet Set CheckIn = " + CheckIn + ",Visited = " + Visited + ",Revisit = " + ReVisit + ",VisitedDate = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',CheckOutTime = '" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',Distance = '" + Obj.Distance.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }


        //                    if (Obj.Description.Length > 0)
        //                    {
        //                        sql = "Update ESAppAccountDet set [Description] = '" + Obj.Description.Replace("'", "''") + "' where PartyCode = " + Obj.PartyCode + "";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }

        //                    }

        //                    if (clsMain.MyInt(Obj.CheckOut) == 0)
        //                    {
        //                        sql = "Insert Into ESPartyVisitLog([SalesmanCode],[AccCode],[AccName],[VisitDate],[Distance])";
        //                        if (Provider == 1)
        //                        {
        //                            sql = sql + " Values (" + Obj.UserId + "," + Obj.PartyCode + ",'" + PartyName.Replace("'", "''") + "',#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + Obj.Distance.Replace("'", "''") + "')";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " Values (" + Obj.UserId + "," + Obj.PartyCode + ",'" + PartyName.Replace("'", "''") + "','" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + Obj.Distance.Replace("'", "''") + "')";
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                    }
        //                    sql = "Insert Into ESSFACheckInLog([CIType],[SalesManId],[PartyId],[InOutTime],[Latitude],[Longtitude],Distance,Distance2)";
        //                    if (clsMain.MyInt(Obj.CheckOut) == 0)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            sql = sql + " Values (1," + Obj.UserId + "," + Obj.PartyCode + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + Obj.Latitude + "','" + Obj.Longitude + "','" + Obj.Distance.Replace("'", "''") + "','" + Obj.Distance2.Replace("'", "''") + "')";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " Values (1," + Obj.UserId + "," + Obj.PartyCode + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + Obj.Latitude + "','" + Obj.Longitude + "','" + Obj.Distance.Replace("'", "''") + "','" + Obj.Distance2.Replace("'", "''") + "')";
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            sql = sql + " Values (2," + Obj.UserId + "," + Obj.PartyCode + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + Obj.Latitude + "','" + Obj.Longitude + "','" + Obj.Distance.Replace("'", "''") + "','" + Obj.Distance2.Replace("'", "''") + "')";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " Values (2," + Obj.UserId + "," + Obj.PartyCode + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + Obj.Latitude + "','" + Obj.Longitude + "','" + Obj.Distance.Replace("'", "''") + "','" + Obj.Distance2.Replace("'", "''") + "')";
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                    }
        //                    if (clsMain.MyInt(Obj.CheckOut) == 0)
        //                    {
        //                        sql = "Select Max(ID) as ID1 from ESSFACheckInLog";
        //                        if (Provider == 1)
        //                        {
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                        }
        //                        else
        //                        {
        //                            dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                        }
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            ID = clsMain.MyInt(dt.Rows[0]["ID1"]);
        //                            //clsMain.MyInt(table.Rows[0]["ChkIn"]);
        //                        }
        //                        int chkin = GetCustImgConfig(ConnectionString, 3);
        //                        if (chkin == 1)
        //                        {
        //                            int chkdb = GetCustImgConfig(ConnectionString, 4);
        //                            if (chkdb == 1)
        //                            {
        //                                sql = "Update ESSFACheckInLog Set ImgType = 2,Base64Str = '" + Obj.Image64 + "',Exte = '" + Obj.Exte + "' Where ID = " + ID + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                            }
        //                            else
        //                            {
        //                                string SPath = GetImgPathConfig(ConnectionString, 2);
        //                                string FileName = "";
        //                                if (Directory.Exists(SPath) == true)
        //                                {
        //                                    FileName = FinYr + "-" + ID + "." + Obj.Exte;
        //                                    byte[] imgByteArray = Convert.FromBase64String(Obj.Image64);
        //                                    if (imgByteArray.Length > 0)
        //                                    {
        //                                        string FIName = string.Concat(SPath, "\\" + FileName);
        //                                        File.WriteAllBytes(FIName, imgByteArray);
        //                                        sql = "Update ESSFACheckInLog Set ImgType = 1,Base64Str = '" + FileName + "',Exte = '" + Obj.Exte + "' Where Id = " + ID + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                    Status = 1;
        //                    Msg = "CheckIn Sucessfully";
        //                    if (clsMain.MyInt(Obj.CheckOut) == 1) { Msg = "CheckOut Sucessfully"; }

        //                    objResult.Add(new CheckIn
        //                    {
        //                        Message = Msg,
        //                        Sucess = Status,
        //                        Latitude = Obj.Latitude,
        //                        Longitude = Obj.Longitude,
        //                        UserId = clsMain.MyInt(Obj.UserId),
        //                        PartyCode = clsMain.MyInt(Obj.PartyCode),
        //                        PartyName = PartyName,
        //                        CheckedIn = CheckIn,
        //                        Visited = Visited
        //                    });

        //                    return objResult;
        //                }
        //                catch
        //                {

        //                    return objResult;
        //                }
        //            }

        //            [HttpGet]
        //            public dynamic CustomerOTPVerification(string MobileNo, string Name, string CompCode, string FY)
        //            {
        //                int RNo = 0;
        //                int Status = 0;
        //                string MSG = "";
        //                try
        //                {
        //                    Random RNumber = new Random();

        //                    RNo = RNumber.Next(1000, 9999);

        //                    OTPVerifyData OVData = GetOPTVerificationDetails(CompCode, FY);

        //                    string RStr = "";
        //                    string SMSBody = OVData.SMSBody.Replace("<Party Name>", Name.ToString()).Replace("<OTP>", RNo.ToString());
        //                    if (OVData.ModeSMS == 1)
        //                    {
        //                        RStr = SendSMSThroughBusyAPI(MobileNo, OVData.SMSFormat, SMSBody, CompCode, FY);
        //                        if (RStr.ToUpper().ToString() == "SUCCESS")
        //                        {
        //                            Status = 1;
        //                            MSG = "Success";
        //                        }
        //                    }
        //                    else if (OVData.ModeWA == 1)
        //                    {
        //                        RStr = SendWhatsAppThroughBusyAPI(MobileNo, OVData.WAType, OVData.WAURL, OVData.WAUserName, OVData.WAPassword, SMSBody, CompCode, FY);

        //                        if (RStr.ToUpper().ToString() == "SUCCESS")
        //                        {
        //                            Status = 1;
        //                            MSG = "Success";
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), OTP = 0 };
        //                }
        //                return new { Status = Status, Msg = MSG, OTP = RNo };
        //            }

        //            public string SendSMSThroughBusyAPI(string MobileNo, string SMSAPI, string SMSBody, string CompCode, string FY)
        //            {
        //                string MSG = "";
        //                {
        //                    try
        //                    {
        //                        SMSAPI smsapi = GetBusySMSAPIDetails(SMSAPI, CompCode, FY);
        //                        string URL = clsMain.MyString(smsapi.SMSAPIFormat);

        //                        if (URL.Length > 0)
        //                        {
        //                            if (smsapi.SMSAPIUNameP.Length > 0) { URL = URL.Replace(smsapi.SMSAPIUNameP, smsapi.SMSAPIUNameV); }
        //                            if (smsapi.SMSAPIUPassP.Length > 0) { URL = URL.Replace(smsapi.SMSAPIUPassP, smsapi.SMSAPIUPassV); }
        //                            if (smsapi.SMSAPISenderIDP.Length > 0) { URL = URL.Replace(smsapi.SMSAPISenderIDP, smsapi.SMSAPISenderIDV); }
        //                            if (smsapi.SMSAPIMobileP.Length > 0) { URL = URL.Replace(smsapi.SMSAPIMobileP, MobileNo); }
        //                            if (smsapi.SMSAPIMsgP.Length > 0) { URL = URL.Replace(smsapi.SMSAPIMsgP, SMSBody); }

        //                            HttpWebRequest _createRequest = (HttpWebRequest)WebRequest.Create(URL);

        //                            SecurityProtocolType origSecurityProtocol = System.Net.ServicePointManager.SecurityProtocol;
        //                            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls
        //                                         | SecurityProtocolType.Tls11
        //                                         | SecurityProtocolType.Tls12
        //                                         | SecurityProtocolType.Ssl3;

        //                            HttpWebResponse myResp = (HttpWebResponse)_createRequest.GetResponse();
        //                            System.IO.StreamReader _responseStreamReader = new System.IO.StreamReader(myResp.GetResponseStream());
        //                            string responseString = _responseStreamReader.ReadToEnd();
        //                            _responseStreamReader.Close();
        //                            myResp.Close();
        //                            if (responseString.Trim().Length > 0)
        //                            {
        //                                MSG = "Success";
        //                            }
        //                        }
        //                    }
        //                    catch (Exception EX)
        //                    {
        //                        return EX.Message.ToString();
        //                    }
        //                    return MSG;
        //                }
        //            }

        //            public string SendWhatsAppThroughBusyAPI(string MobileNo, string WAType, string WAURL, string WAUserName, string WAPassword, string SMSBody, string CompCode, string FY)
        //            {
        //                string Message = "";
        //                try
        //                {
        //                    string URL = "";
        //                    if (WAType.ToLower().ToString() == "local")
        //                    {
        //                        URL = "http://maslocalclient:7110/message/new?addContact=true";
        //                    }
        //                    else
        //                    {
        //                        URL = "http://app.messageautosender.com/message/new?addContact=true";
        //                    }

        //                    string Result = "";

        //                    var client = new RestClient(URL);
        //                    var request = new RestRequest(Method.POST);
        //                    request.AlwaysMultipartFormData = true;
        //                    request.AddParameter("username", WAUserName);
        //                    request.AddParameter("password", WAPassword);
        //                    request.AddParameter("receiverMobileNo", MobileNo);
        //                    request.AddParameter("message", SMSBody);
        //                    IRestResponse response = client.Execute(request);
        //                    Result = response.Content;

        //                    if (Result == "success")
        //                    {
        //                        return "Success";
        //                    }
        //                    else
        //                    {
        //                        Message = "Failed";
        //                        return Message;
        //                    }
        //                }
        //                catch
        //                {
        //                    Message = "Failed";
        //                    return Message;
        //                }
        //            }

        //            public OTPVerifyData GetOPTVerificationDetails(string CompCode, string FY)
        //            {

        //                OTPVerifyData OTP = new OTPVerifyData();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();

        //                queryStr = "Select ChkS,ChkW,SMSFormat,URL,LUserName,LPassword,TpHeader,KeyURL From ESSFAOTPConfig";
        //                //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                if (Provider == 1)
        //                {
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    OTP.ModeSMS = clsMain.MyInt(dt.Rows[0]["ChkS"]);
        //                    OTP.SMSFormat = clsMain.MyString(dt.Rows[0]["SMSFormat"]);
        //                    OTP.ModeWA = clsMain.MyInt(dt.Rows[0]["ChkW"]);
        //                    OTP.WAType = clsMain.MyString(dt.Rows[0]["URL"]);
        //                    OTP.WAURL = clsMain.MyString(dt.Rows[0]["KeyURL"]);
        //                    OTP.WAUserName = clsMain.MyString(dt.Rows[0]["LUserName"]);
        //                    OTP.WAPassword = clsMain.MyString(dt.Rows[0]["LPassword"]);
        //                    OTP.SMSBody = clsMain.MyString(dt.Rows[0]["TpHeader"]);
        //                }

        //                return OTP;
        //            }


        //            public SMSAPI GetBusySMSAPIDetails(string SMSFormat, string CompCode, string FY)
        //            {

        //                SMSAPI SAPI = new SMSAPI();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();

        //                if (Provider == 1)
        //                {
        //                    queryStr = "Select iif(IsNull(M1),'',M1) as SMSAPI,iif(IsNull(C1),'',C1) as UNameP,iif(IsNull(C2),'',C2) as UPassP,iif(IsNull(C3),'',C3) as MobileP,iif(IsNull(C4),'',C4) as MsgP,iif(IsNull(C5),'',C5) as SenderIDP,iif(IsNull(C21),'',C21) as UNameV,iif(IsNull(C22),'',C22) as UPassV,iif(IsNull(C25),'',C25) as SenderIDV From Config Where DocName = '" + SMSFormat.Trim() + "' And RecType = 57";
        //                }
        //                else
        //                {
        //                    queryStr = "Select IsNull(M1,'') as SMSAPI,IsNull(C1,'') as UNameP,IsNull(C2,'') as UPassP,IsNull(C3,'') as MobileP,IsNull(C4,'') as MsgP,IsNull(C5,'') as SenderIDP,IsNull(C21,'') as UNameV,IsNull(C22,'') as UPassV,IsNull(C25,'') as SenderIDV From Config Where DocName = '" + SMSFormat.Trim() + "' And RecType = 57";

        //                }
        //                // DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    SAPI.SMSAPIFormat = clsMain.MyString(dt.Rows[0]["SMSAPI"]);
        //                    SAPI.SMSAPIUNameP = clsMain.MyString(dt.Rows[0]["UNameP"]);
        //                    SAPI.SMSAPIUPassP = clsMain.MyString(dt.Rows[0]["UPassP"]);
        //                    SAPI.SMSAPISenderIDP = clsMain.MyString(dt.Rows[0]["SenderIDP"]);
        //                    SAPI.SMSAPISenderIDV = clsMain.MyString(dt.Rows[0]["SenderIDV"]);
        //                    SAPI.SMSAPIMobileP = clsMain.MyString(dt.Rows[0]["MobileP"]);
        //                    SAPI.SMSAPIMsgP = clsMain.MyString(dt.Rows[0]["MsgP"]);
        //                    SAPI.SMSAPIUNameV = clsMain.MyString(dt.Rows[0]["UNameV"]);
        //                    SAPI.SMSAPIUPassV = clsMain.MyString(dt.Rows[0]["UPassV"]);
        //                }

        //                return SAPI;
        //            }

        //            public string GetAccountXML(CrParty obje, string ConStr)
        //            {
        //                string XMLStr = "";

        //                try
        //                {

        //                    BusyVoucher BVch = new BusyVoucher();
        //                    List<BusyVoucher.Address> Acc3 = new List<BusyVoucher.Address>();
        //                    BusyVoucher.AccMaster AccObj = new BusyVoucher.AccMaster();
        //                    BusyVoucher.Accounts Acc1Obj = new BusyVoucher.Accounts();
        //                    BusyVoucher.Account Acc2Obj = new BusyVoucher.Account();
        //                    BusyVoucher.Address Acc3Obj = new BusyVoucher.Address();


        //                    Acc2Obj.Name = obje.Name;
        //                    Acc2Obj.PrintName = obje.Name;
        //                    Acc2Obj.ParentGroup = BVch.GetMasterCodeToName(Provider, ConStr, 116);
        //                    Acc2Obj.tmpParentGrpCode = 116;
        //                    Acc2Obj.ChequePrintName = obje.Name;
        //                    Acc2Obj.BrokerAssigned = true;
        //                    Acc2Obj.BrokerName = BVch.GetMasterCodeToName(Provider, ConStr, int.Parse(obje.UserId));
        //                    /////Address -------------------

        //                    Acc3Obj.Address1 = obje.Address1;
        //                    Acc3Obj.Address2 = obje.Address2;
        //                    Acc3Obj.Address3 = obje.Address3;
        //                    // Acc3Obj.Address4 = obje.OwnerName;
        //                    Acc3Obj.CountryName = "INDIA";
        //                    Acc3Obj.StateName = BVch.GetMasterCodeToName(Provider, ConStr, int.Parse(obje.StateCode));
        //                    Acc3Obj.PINCode = int.Parse(obje.StateCode);
        //                    Acc3Obj.Mobile = obje.MobileNo;
        //                    Acc3Obj.GSTNo = obje.GSTNO;
        //                    Acc3Obj.ITPAN = obje.PAN;
        //                    Acc3Obj.C3 = obje.AdharNo;
        //                    Acc3Obj.Contact = obje.OwnerName;
        //                    Acc3Obj.Email = obje.Email;
        //                    Acc3Obj.RegionName = "---Others---";
        //                    Acc3Obj.AreaName = "---Others---";
        //                    Acc2Obj.Address = Acc3Obj;

        //                    //Acc1.BillByBillBalancing = "True";
        //                    //Acc2.Add(Acc2Obj);
        //                    Acc1Obj.Account = Acc2Obj;
        //                    // Acc.AccDet = Acc1;
        //                    AccObj.Accounts = Acc1Obj;

        //                    XMLStr = CreateXML(Acc2Obj).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "").Replace("<BillRefDT>", "").Replace("</BillRefDT>", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }

        //                return XMLStr;
        //            }
        //            [HttpPost]
        //            public AlertOrder SaveAccAuto(CrParty obje, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();
        //                string Sql = "";
        //                string MSG = "";
        //                int Status = 0;
        //                object Code = 0;
        //                object MType = 2;
        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    CFixedInterface FI = new CFixedInterface();
        //                    string XMLStr = "";

        //                    XMLStr = GetAccountXML(obje, ConnectionString);
        //                    bool Connect = false;

        //                    FI.CloseDB();

        //                    if (Provider == 1)
        //                    {
        //                        Connect = FI.OpenDBForYear(BusyPath, BusyDataPath, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    else
        //                    {
        //                        Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    if (Connect == true)
        //                    {
        //                        object Err = "";
        //                        int Return = FI.AddMasterFromXML(MType, XMLStr, ref Err);   //SaveMasterFromXML(MType, XMLStr, ref Err, false, 0, ref Code);
        //                        if (Return > 0)
        //                        {
        //                            //string BillNo = FI.GetVchNoFromVchCode(clsMain.MyInt(VchCode));
        //                            if (obje.Base64Str.Length > 0)
        //                            {
        //                                if (ChkImageMaintainInDB(ConnectionString, 2, 1) == true)
        //                                {
        //                                    if (GetBusyImageSaveinginfo(ConnectionString, 2, 1) == true)
        //                                    {
        //                                        string SaveImage = SaveImageAccInDB(ConnectionString, obje.Base64Str, obje.Exte, clsMain.MyInt(Return), 2, 1, 0, obje.Name);
        //                                    }
        //                                    else
        //                                    {
        //                                        string SaveImage = SaveImageAccInDB(ConnectionString, obje.Base64Str, obje.Exte, clsMain.MyInt(Return), 2, 1, 0, obje.Name);

        //                                    }
        //                                }

        //                            }
        //                            int R = 0;
        //                            if (Provider == 1)
        //                            {
        //                                Sql = "Insert Into ESAppAccountDet ([PartyCode],[SalesManId],[Beat],[Latitude],[longitude],[distance],[Visited],[CheckIn],[Revisit]) Values (" + Return + ",0,0,'','','',0,0,0)";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                                if (obje.BeatID > 0)
        //                                {
        //                                    Sql = "Delete From ESAppAccBeatDT Where [PartyCode] = " + Return + " And [Beat] = " + obje.BeatID + "";
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);


        //                                    Sql = "Insert Into ESAppAccBeatDT ([PartyCode],[SrNo],[Beat]) Values (" + Return + ",1," + obje.BeatID + ")";
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                                }

        //                            }
        //                            else
        //                            {
        //                                Sql = "Insert Into ESAppAccountDet ([PartyCode],[SalesManId],[Beat],[Latitude],[longitude],[distance],[Visited],[CheckIn],[Revisit]) Values (" + Return + ",0,0,'','','',0,0,0)";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                                if (obje.BeatID > 0)
        //                                {
        //                                    Sql = "Delete From ESAppAccBeatDT Where [PartyCode] = " + Return + " And [Beat] = " + obje.BeatID + "";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);


        //                                    Sql = "Insert Into ESAppAccBeatDT ([PartyCode],[SrNo],[Beat]) Values (" + Return + ",1," + obje.BeatID + ")";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                                }

        //                            }
        //                            if (R > 0)
        //                            {
        //                                MSG = "Party Registered Sucessfully";
        //                                Status = 1;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            MSG = Err.ToString();
        //                            Status = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MSG = "Unable To Connect To Company";
        //                        Status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Sucess = 0;
        //                    objResult.Message = EX.Message.ToString();
        //                    objResult.OrderId = 0;
        //                    return objResult;
        //                }

        //                objResult.Sucess = Status;
        //                objResult.Message = MSG;
        //                objResult.OrderId = clsMain.MyInt(Code);
        //                return objResult;
        //            }



        //            [HttpPost]
        //            public APIResponse PartyRegister(CrParty obje, string CompCode, string FY)
        //            {
        //                try
        //                {
        //                    // string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    APIResponse msg = new APIResponse();
        //                    DataTable dt = new DataTable();
        //                    int MImgNewCust = 0;
        //                    int MaininDatabase = 0;
        //                    int AutoPost = 0;
        //                    string ImgPath = "";
        //                    MImgNewCust = GetCustImgConfig(ConnectionString, 1);
        //                    MImgNewCust = GetCustImgConfig(ConnectionString, 1);
        //                    string sql = "";
        //                    int R = 0;
        //                    //AutoPost = chkAutoNotPost(ConnectionString, 8);

        //                    sql = "select Top 1 * from ESPartyDetails where MobileNo='" + obje.MobileNo.Replace("'", "''") + "' And Itype =2";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        msg.msg = "Party Already Exist";
        //                        msg.Sucess = 1;
        //                        msg.Value = -2;
        //                    }
        //                    else
        //                    {
        //                        if (MImgNewCust == 1)
        //                        {
        //                            MaininDatabase = GetCustImgConfig(ConnectionString, 2);
        //                            if (MaininDatabase == 1)
        //                            {
        //                                sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[ImgType],[Base64Str],[Exte],[AdharNo],[OwnerName],Itype,Pass,DeviceID)";
        //                                if (Provider == 1)
        //                                {
        //                                    sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,2,'" + obje.Base64Str + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',2,'" + obje.Pass + "','" + obje.Deviceid + "')";
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',2,'" + obje.Base64Str + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',2,'" + obje.Pass + "','" + obje.Deviceid + "')";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                if (R > 0)
        //                                {
        //                                    msg.Sucess = 1;
        //                                    msg.msg = "Device Registerd Sucessfully wait for Approval";
        //                                }
        //                            }
        //                            else
        //                            {

        //                                string SPath = GetImgPathConfig(ConnectionString, 1);
        //                                string FileName = "";
        //                                if (Directory.Exists(SPath) == true)
        //                                {
        //                                    FileName = obje.Name.Replace("'", "''") + "." + obje.Exte;
        //                                    byte[] imgByteArray = Convert.FromBase64String(obje.Base64Str);
        //                                    if (imgByteArray.Length > 0)
        //                                    {
        //                                        string FIName = string.Concat(SPath, "\\" + FileName);
        //                                        File.WriteAllBytes(FIName, imgByteArray);
        //                                        sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[ImgType],[Base64Str],[Exte],[AdharNo],[OwnerName],Itype,Pass,DeviceID)";
        //                                        if (Provider == 1)
        //                                        {
        //                                            sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,1,'" + FileName + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',2,'" + obje.Pass + "','" + obje.Deviceid + "')";
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',1,'" + FileName + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',2,'" + obje.Pass + "','" + obje.Deviceid + "')";
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        if (R > 0)
        //                                        {
        //                                            msg.Sucess = 1;
        //                                            msg.msg = "Device Registerd Sucessfully wait for Approval";
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        else
        //                        {
        //                            sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[AdharNo],[OwnerName],Itype,Pass,DeviceID)";
        //                            if (Provider == 1)
        //                            {
        //                                sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + clsMain.MyInt(obje.PinCode) + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + obje.AdharNo + "','" + obje.OwnerName + "',2,'" + obje.Pass + "','" + obje.Deviceid + "')";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + clsMain.MyInt(obje.PinCode) + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + obje.AdharNo + "','" + obje.OwnerName + "',2,'" + obje.Pass + "','" + obje.Deviceid + "')";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            if (R > 0)
        //                            {
        //                                msg.Sucess = 1;
        //                                msg.msg = "Device Registerd Sucessfully wait for Approval";
        //                            }

        //                        }


        //                    }
        //                    return msg;
        //                }
        //                catch (Exception ex)
        //                {
        //                    APIResponse msg = new APIResponse();
        //                    msg.msg = ex.Message;
        //                    msg.Sucess = -1;
        //                    return msg;
        //                }
        //            }



        //            [HttpPost]
        //            public APIResponse CreateParty(CrParty obje, string CompCode, string FY)
        //            {
        //                try
        //                {
        //                    // string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    APIResponse msg = new APIResponse();
        //                    DataTable dt = new DataTable();
        //                    int MImgNewCust = 0;
        //                    int MaininDatabase = 0;
        //                    int AutoPost = 0;
        //                    string ImgPath = "";
        //                    MImgNewCust = GetCustImgConfig(ConnectionString, 1);
        //                    MImgNewCust = GetCustImgConfig(ConnectionString, 1);
        //                    string sql = "";
        //                    int R = 0;
        //                    AutoPost = chkAutoNotPost(ConnectionString, 8);

        //                    if (AutoPost == 1)
        //                    {
        //                        AlertOrder alertorder = SaveAccAuto(obje, CompCode, FY);
        //                        msg.msg = alertorder.Message.ToString();
        //                        msg.Sucess = alertorder.Sucess;
        //                        return msg;
        //                    }
        //                    else
        //                    {
        //                        if (clsMain.MyInt(obje.ConfmReg) == 1)
        //                        {
        //                            if (MImgNewCust == 1)
        //                            {
        //                                MaininDatabase = GetCustImgConfig(ConnectionString, 2);
        //                                if (MaininDatabase == 1)
        //                                {
        //                                    sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[ImgType],[Base64Str],[Exte],[AdharNo],[OwnerName],ITYPE)";
        //                                    if (Provider == 1)
        //                                    {
        //                                        sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,2,'" + obje.Base64Str + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                    else
        //                                    {
        //                                        sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',2,'" + obje.Base64Str + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    string SPath = GetImgPathConfig(ConnectionString, 1);
        //                                    string FileName = "";
        //                                    if (Directory.Exists(SPath) == true)
        //                                    {
        //                                        FileName = obje.Name.Replace("'", "''") + "." + obje.Exte;
        //                                        byte[] imgByteArray = Convert.FromBase64String(obje.Base64Str);
        //                                        if (imgByteArray.Length > 0)
        //                                        {
        //                                            string FIName = string.Concat(SPath, "\\" + FileName);
        //                                            File.WriteAllBytes(FIName, imgByteArray);
        //                                            sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[ImgType],[Base64Str],[Exte],[AdharNo],OwnerName,ITYPE)";
        //                                            if (Provider == 1)
        //                                            {
        //                                                sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,1,'" + FileName + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                            }
        //                                            else
        //                                            {
        //                                                sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',1,'" + FileName + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                            else
        //                            {
        //                                sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[AdharNo],[OwnerName],ITYPE)";
        //                                if (Provider == 1)
        //                                {
        //                                    sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                            }


        //                            if (Provider == 1)
        //                            {
        //                                sql = "Insert Into ESPartyVisitLog([SalesmanCode],[AccCode],[AccName],[VisitDate],[Distance]) Values(" + obje.UserId + ",0,'" + obje.Name.Replace("'", "''") + "',#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'')";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = "Insert Into ESPartyVisitLog([SalesmanCode],[AccCode],[AccName],[VisitDate],[Distance]) Values(" + obje.UserId + ",0,'" + obje.Name.Replace("'", "''") + "','" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','')";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            if (R > 0)
        //                            {
        //                                msg.msg = "Party Registered Sucessfully";
        //                                msg.Sucess = 1;
        //                                msg.Value = 1;
        //                            }

        //                        }
        //                        else
        //                        {
        //                            sql = "select Top 1 * from ESPartyDetails where MobileNo='" + obje.MobileNo.Replace("'", "''") + "'";
        //                            if (Provider == 1)
        //                            {
        //                                dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                            }
        //                            else
        //                            {
        //                                dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                            }
        //                            if (dt != null && dt.Rows.Count > 0)
        //                            {
        //                                msg.msg = "Party Already Exist";
        //                                msg.Sucess = 1;
        //                                msg.Value = -2;
        //                            }
        //                            else
        //                            {
        //                                if (MImgNewCust == 1)
        //                                {
        //                                    MaininDatabase = GetCustImgConfig(ConnectionString, 2);
        //                                    if (MaininDatabase == 1)
        //                                    {
        //                                        sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[ImgType],[Base64Str],[Exte],[AdharNo],[OwnerName],ITYPE)";
        //                                        if (Provider == 1)
        //                                        {
        //                                            sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,2,'" + obje.Base64Str + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',2,'" + obje.Base64Str + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                    }
        //                                    else
        //                                    {

        //                                        string SPath = GetImgPathConfig(ConnectionString, 1);
        //                                        string FileName = "";
        //                                        if (Directory.Exists(SPath) == true)
        //                                        {
        //                                            FileName = obje.Name.Replace("'", "''") + "." + obje.Exte;
        //                                            byte[] imgByteArray = Convert.FromBase64String(obje.Base64Str);
        //                                            if (imgByteArray.Length > 0)
        //                                            {
        //                                                string FIName = string.Concat(SPath, "\\" + FileName);
        //                                                File.WriteAllBytes(FIName, imgByteArray);
        //                                                sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[ImgType],[Base64Str],[Exte],[AdharNo],[OwnerName],ITYPE)";
        //                                                if (Provider == 1)
        //                                                {
        //                                                    sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,1,'" + FileName + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                                }
        //                                                else
        //                                                {
        //                                                    sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + obje.PinCode + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "',1,'" + FileName + "','" + obje.Exte + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                                }
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    sql = "Insert Into ESPartyDetails (SalesManId, Name, Email, MobileNo, GSTNO, CityCode, AreaCode, PinCode, Address1, Address2, Address3, Latitude, Longitude, StateCode, BeatID,[AccGrpCode],[PANNo],[CrDays],[CreditLimit],[CreationDate],[AdharNo],[OwnerName],ITYPE)";
        //                                    if (Provider == 1)
        //                                    {
        //                                        sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + clsMain.MyInt(obje.PinCode) + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                    else
        //                                    {
        //                                        sql = sql + " Values (" + obje.UserId + ",'" + obje.Name.Replace("'", "''") + "','" + obje.Email.Replace("'", "''") + "','" + obje.MobileNo.Replace("'", "''") + "','" + obje.GSTNO.Replace("'", "''") + "'," + clsMain.MyInt(obje.CityCode) + "," + clsMain.MyInt(obje.AreaCode) + "," + clsMain.MyInt(obje.PinCode) + ",'" + obje.Address1.Replace("'", "''") + "','" + obje.Address2.Replace("'", "''") + "','" + obje.Address3.Replace("'", "''") + "','" + obje.Latitude.Replace("'", "''") + "','" + obje.Longitude.Replace("'", "''") + "'," + obje.StateCode + "," + obje.BeatID + "," + obje.AgrpCode + ",'" + obje.PAN.Replace("'", "''") + "'," + obje.CRDays + "," + obje.CreditLimit + ",'" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + obje.AdharNo + "','" + obje.OwnerName + "',1)";
        //                                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }

        //                                }
        //                                if (Provider == 1)
        //                                {
        //                                    sql = "Insert Into ESPartyVisitLog([SalesmanCode],[AccCode],[AccName],[VisitDate],[Distance]) Values(" + obje.UserId + ",0,'" + obje.Name.Replace("'", "''") + "',#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'')";
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    sql = "Insert Into ESPartyVisitLog([SalesmanCode],[AccCode],[AccName],[VisitDate],[Distance]) Values(" + obje.UserId + ",0,'" + obje.Name.Replace("'", "''") + "','" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','')";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                if (R > 0)
        //                                {
        //                                    msg.msg = "Party Registered Sucessfully";
        //                                    msg.Sucess = 1;
        //                                    msg.Value = 1;
        //                                }


        //                            }
        //                        }

        //                    }
        //                    return msg;
        //                }
        //                catch (Exception ex)
        //                {
        //                    APIResponse msg = new APIResponse();
        //                    msg.msg = ex.Message;
        //                    msg.Sucess = -1;
        //                    return msg;
        //                }
        //            }






        //            //[HttpPost]
        //            //public List<Response> AddToCart(addcart obje)
        //            //{
        //            //    List<Response> objResult = new List<Response>();
        //            //    List<CartDetails> objstatus = new List<CartDetails>();
        //            //    try
        //            //    {
        //            //        SqlParameter[] sqlParam = new SqlParameter[22];

        //            //        sqlParam[0] = new SqlParameter("@ProductCode", clsMain.MyString(obje.ProductId));
        //            //        sqlParam[1] = new SqlParameter("@PartyId", clsMain.MyString(obje.PartyId));
        //            //        sqlParam[2] = new SqlParameter("@SalesManId", clsMain.MyString(obje.SalesManId));
        //            //        sqlParam[3] = new SqlParameter("@Price", clsMain.MyString(obje.Price));
        //            //        sqlParam[4] = new SqlParameter("@MinQty", clsMain.MyString(obje.MinQty));
        //            //        sqlParam[5] = new SqlParameter("@Status", clsMain.MyString(obje.Status));
        //            //        sqlParam[6] = new SqlParameter("@TotalPrice", clsMain.MyString(obje.TotalPrice));
        //            //        sqlParam[7] = new SqlParameter("@Disc", clsMain.MyString(obje.Disc));
        //            //        sqlParam[8] = new SqlParameter("@DiscAmt", clsMain.MyDouble(obje.DiscAmt));
        //            //        sqlParam[9] = new SqlParameter("@FItemCode", clsMain.MyInt(obje.FItemCode));
        //            //        sqlParam[10] = new SqlParameter("@FreeQty", clsMain.MyDouble(obje.FreeQty));
        //            //        sqlParam[11] = new SqlParameter("@FItemPrice", clsMain.MyDouble(obje.FItemPrice));
        //            //        sqlParam[12] = new SqlParameter("@SchemeCode", clsMain.MyInt(obje.SchemeCode));
        //            //        sqlParam[13] = new SqlParameter("@SchemeType", clsMain.MyInt(obje.SchemeType));
        //            //        sqlParam[14] = new SqlParameter("@AltQty", clsMain.MyString(obje.AltQty));
        //            //        sqlParam[15] = new SqlParameter("@Confactor", clsMain.MyString(obje.Confactor));
        //            //        sqlParam[16] = new SqlParameter("@SalePrice", clsMain.MyDouble(obje.SalePrice));
        //            //        sqlParam[17] = new SqlParameter("@Remarks", clsMain.MyString(obje.Remarks));
        //            //        sqlParam[18] = new SqlParameter("@Description1", clsMain.MyString(obje.Description1));
        //            //        sqlParam[19] = new SqlParameter("@Description2", clsMain.MyString(obje.Description2));
        //            //        sqlParam[20] = new SqlParameter("@Description3", clsMain.MyString(obje.Description3));
        //            //        sqlParam[21] = new SqlParameter("@Description4", clsMain.MyString(obje.Description4));

        //            //        DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddToCart", sqlParam);
        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            Response pl = new Response();

        //            //            foreach (DataRow item in dt.Rows)
        //            //            {

        //            //                pl = new Response();
        //            //                pl.msg = clsMain.MyString(item["msg"]);
        //            //                pl.Sucess = clsMain.MyInt(item["Sucess"]);

        //            //                pl.CartList = new List<CartDetails>();
        //            //                if (clsMain.MyLen(item["Sucess"]) > 0)
        //            //                {
        //            //                    CartDetails im = new CartDetails();
        //            //                    im.SalesManId = clsMain.MyString(item["SalesManId"]);
        //            //                    im.PartyId = clsMain.MyString(item["PartyId"]);
        //            //                    im.Price = clsMain.MyString(item["Price"]);
        //            //                    im.ProductId = clsMain.MyString(item["ProductCode"]);
        //            //                    im.MinQty = clsMain.MyString(item["minqty"]);
        //            //                    im.Status = clsMain.MyString(item["Status"]);
        //            //                    im.TotalPrice = clsMain.MyString(item["TotalPrice"]);
        //            //                    im.Disc = clsMain.MyString(item["Disc"]);
        //            //                    im.DiscAmt = clsMain.MyDouble(item["DiscAmt"]);
        //            //                    im.FItemCode = clsMain.MyInt(item["FItemCode"]);
        //            //                    im.FreeQty = clsMain.MyDouble(item["FreeQty"]);
        //            //                    im.FItemPrice = clsMain.MyDouble(item["FItemPrice"]);
        //            //                    im.SchemeCode = clsMain.MyInt(item["SchemeCode"]);
        //            //                    im.SchemeType = clsMain.MyInt(item["SchemeType"]);
        //            //                    pl.CartList.Add(im);
        //            //                }
        //            //                objResult.Add(pl);
        //            //            }
        //            //        }

        //            //    }
        //            //    catch
        //            //    {
        //            //        return objResult;
        //            //    }
        //            //    return objResult;
        //            //}

        //            [HttpPost]
        //            public List<Response> AddToCart(addcart obje, string CompCode, string FY)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    if (Provider == 1)
        //                    {
        //                        objResult = AddToCartAccess(obje, ConnectionString);
        //                    }
        //                    else
        //                    {
        //                        objResult = AddToCartSQL(obje, ConnectionString);
        //                    }
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            private List<Response> AddToCartSQL(addcart obje, string ConnectionString)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                List<CartDetails> objstatus = new List<CartDetails>();
        //                try
        //                {
        //                    SqlParameter[] sqlParam = new SqlParameter[22];

        //                    sqlParam[0] = new SqlParameter("@ProductCode", clsMain.MyString(obje.ProductId));
        //                    sqlParam[1] = new SqlParameter("@PartyId", clsMain.MyString(obje.PartyId));
        //                    sqlParam[2] = new SqlParameter("@SalesManId", clsMain.MyString(obje.SalesManId));
        //                    sqlParam[3] = new SqlParameter("@Price", clsMain.MyString(obje.Price));
        //                    sqlParam[4] = new SqlParameter("@MinQty", clsMain.MyString(obje.MinQty));
        //                    sqlParam[5] = new SqlParameter("@Status", clsMain.MyString(obje.Status));
        //                    sqlParam[6] = new SqlParameter("@TotalPrice", clsMain.MyString(obje.TotalPrice));
        //                    sqlParam[7] = new SqlParameter("@Disc", clsMain.MyString(obje.Disc));
        //                    sqlParam[8] = new SqlParameter("@DiscAmt", clsMain.MyDouble(obje.DiscAmt));
        //                    sqlParam[9] = new SqlParameter("@FItemCode", clsMain.MyInt(obje.FItemCode));
        //                    sqlParam[10] = new SqlParameter("@FreeQty", clsMain.MyDouble(obje.FreeQty));
        //                    sqlParam[11] = new SqlParameter("@FItemPrice", clsMain.MyDouble(obje.FItemPrice));
        //                    sqlParam[12] = new SqlParameter("@SchemeCode", clsMain.MyInt(obje.SchemeCode));
        //                    sqlParam[13] = new SqlParameter("@SchemeType", clsMain.MyInt(obje.SchemeType));
        //                    sqlParam[14] = new SqlParameter("@AltQty", clsMain.MyString(obje.AltQty));
        //                    sqlParam[15] = new SqlParameter("@Confactor", clsMain.MyString(obje.Confactor));
        //                    sqlParam[16] = new SqlParameter("@SalePrice", clsMain.MyDouble(obje.SalePrice));
        //                    sqlParam[17] = new SqlParameter("@Remarks", clsMain.MyString(obje.Remarks));
        //                    sqlParam[18] = new SqlParameter("@Description1", clsMain.MyString(obje.Description1));
        //                    sqlParam[19] = new SqlParameter("@Description2", clsMain.MyString(obje.Description2));
        //                    sqlParam[20] = new SqlParameter("@Description3", clsMain.MyString(obje.Description3));
        //                    sqlParam[21] = new SqlParameter("@Description4", clsMain.MyString(obje.Description4));

        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddToCart", sqlParam);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Response pl = new Response();

        //                        foreach (DataRow item in dt.Rows)
        //                        {

        //                            pl = new Response();
        //                            pl.msg = clsMain.MyString(item["msg"]);
        //                            pl.Sucess = clsMain.MyInt(item["Sucess"]);

        //                            pl.CartList = new List<CartDetails>();
        //                            if (clsMain.MyLen(item["Sucess"]) > 0)
        //                            {
        //                                CartDetails im = new CartDetails();
        //                                im.SalesManId = clsMain.MyString(item["SalesManId"]);
        //                                im.PartyId = clsMain.MyString(item["PartyId"]);
        //                                im.Price = clsMain.MyString(item["Price"]);
        //                                im.ProductId = clsMain.MyString(item["ProductCode"]);
        //                                im.MinQty = clsMain.MyString(item["minqty"]);
        //                                im.Status = clsMain.MyString(item["Status"]);
        //                                im.TotalPrice = clsMain.MyString(item["TotalPrice"]);
        //                                im.Disc = clsMain.MyString(item["Disc"]);
        //                                im.DiscAmt = clsMain.MyDouble(item["DiscAmt"]);
        //                                im.FItemCode = clsMain.MyInt(item["FItemCode"]);
        //                                im.FreeQty = clsMain.MyDouble(item["FreeQty"]);
        //                                im.FItemPrice = clsMain.MyDouble(item["FItemPrice"]);
        //                                im.SchemeCode = clsMain.MyInt(item["SchemeCode"]);
        //                                im.SchemeType = clsMain.MyInt(item["SchemeType"]);
        //                                pl.CartList.Add(im);
        //                            }
        //                            objResult.Add(pl);
        //                        }
        //                    }

        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            private List<Response> AddToCartAccess(addcart obje, string ConnectionString)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                try
        //                {
        //                    string sql = "";
        //                    int R = 0;
        //                    Response pl = new Response();

        //                    pl.msg = "Failed";
        //                    pl.Sucess = 0;
        //                    pl.CartList = new List<CartDetails>();

        //                    double SalePrice = clsMain.MyDouble(obje.SalePrice);
        //                    double AltQty = clsMain.MyDouble(obje.AltQty);

        //                    if (SalePrice == 0) { SalePrice = clsMain.MyDouble(obje.Price); }
        //                    if (AltQty == 0) { AltQty = clsMain.MyDouble(obje.MinQty); }

        //                    if (clsMain.MyInt(obje.Status) == 1)
        //                    {
        //                        sql = "select Top 1 * from ESSalesMenCart where SalesManId = " + obje.SalesManId + " and PartyId = " + obje.PartyId + " and ProductCode = " + obje.ProductId + "";
        //                        DataTable dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            pl.msg = "Already in Kart";
        //                            pl.Sucess = 1;
        //                        }
        //                        else
        //                        {
        //                            sql = "insert into ESSalesMenCart(ProductCode, PartyId, SalesManId, Price, Qty, CreatedDate, TotalPrice, Disc, DiscAmt, FItemCode, FreeQty, FItemPrice, SchemeCode, SchemeType, AltQty, Confactor, SalePrice, Remarks, Description1, Description2, Description3, Description4)";
        //                            sql = " values (" + obje.ProductId + "," + obje.PartyId + "," + obje.SalesManId + "," + obje.Price + "," + obje.MinQty + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + obje.TotalPrice + "," + obje.Disc + "," + obje.DiscAmt + "," + obje.FItemCode + "," + obje.FreeQty + "," + obje.FItemPrice + "," + obje.SchemeCode + "," + obje.SchemeType + "," + AltQty + "," + obje.Confactor + "," + SalePrice + ",'" + obje.Remarks.Replace("'", "''") + "','" + obje.Description1.Replace("'", "''") + "','" + obje.Description2.Replace("'", "''") + "','" + obje.Description3.Replace("'", "''") + "','" + obje.Description4.Replace("'", "''") + "')";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            if (R > 0)
        //                            {
        //                                pl.msg = "Save";
        //                                pl.Sucess = 1;
        //                            }
        //                        }
        //                    }
        //                    else if (clsMain.MyInt(obje.Status) == 2)
        //                    {
        //                        sql = "Update ESSalesMenCart set Price = " + obje.Price + ",Qty = " + obje.MinQty + ",Disc = " + obje.Disc + ",DiscAmt = " + obje.DiscAmt + ",FItemCode = " + obje.FItemCode + ",FreeQty = " + obje.FreeQty + ",FItemPrice = " + obje.FItemPrice + ",SchemeCode = " + obje.SchemeCode + ",SchemeType = " + obje.SchemeType + ",";
        //                        sql = sql + " AltQty = " + AltQty + ",Confactor = " + obje.Confactor + ",SalePrice = " + SalePrice + ",Remarks = '" + obje.Remarks.Replace("'", "''") + "',Description1 = '" + obje.Description1.Replace("'", "''") + "',Description2 = '" + obje.Description2.Replace("'", "''") + "',Description3 = '" + obje.Description3.Replace("'", "''") + "',Description4 = '" + obje.Description4.Replace("'", "''") + "'";
        //                        sql = sql + " where SalesManId = " + obje.SalesManId + " and PartyId = " + obje.PartyId + " and ProductCode = " + obje.ProductId + "";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        if (R > 0)
        //                        {
        //                            pl.msg = "Updated";
        //                            pl.Sucess = 1;
        //                        }
        //                    }
        //                    else if (clsMain.MyInt(obje.Status) == 3)
        //                    {
        //                        sql = "Delete from ESSalesMenCart where SalesManId = " + obje.SalesManId + " and PartyId = " + obje.PartyId + " and ProductCode = " + obje.ProductId + "";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        if (R > 0)
        //                        {
        //                            pl.msg = "Removed Sucessfully";
        //                            pl.Sucess = 1;
        //                        }
        //                    }
        //                    CartDetails im = new CartDetails();
        //                    im.SalesManId = clsMain.MyString(obje.SalesManId);
        //                    im.PartyId = clsMain.MyString(obje.PartyId);
        //                    im.Price = clsMain.MyString(obje.Price);
        //                    im.ProductId = clsMain.MyString(obje.ProductId);
        //                    im.MinQty = clsMain.MyString(obje.MinQty);
        //                    im.Status = clsMain.MyString(obje.Status);
        //                    im.TotalPrice = clsMain.MyString(obje.TotalPrice);
        //                    im.Disc = clsMain.MyString(obje.Disc);
        //                    im.DiscAmt = clsMain.MyDouble(obje.DiscAmt);
        //                    im.FItemCode = clsMain.MyInt(obje.FItemCode);
        //                    im.FreeQty = clsMain.MyDouble(obje.FreeQty);
        //                    im.FItemPrice = clsMain.MyDouble(obje.FItemPrice);
        //                    im.SchemeCode = clsMain.MyInt(obje.SchemeCode);
        //                    im.SchemeType = clsMain.MyInt(obje.SchemeType);
        //                    pl.CartList.Add(im);
        //                    objResult.Add(pl);
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }


        //            //[HttpPost]
        //            //public List<Response> AddToCartSFA(addcart obje)
        //            //{
        //            //    List<Response> objResult = new List<Response>();
        //            //    List<CartDetails> objstatus = new List<CartDetails>();
        //            //    try
        //            //    {
        //            //        SqlParameter[] sqlParam = new SqlParameter[23];

        //            //        sqlParam[0] = new SqlParameter("@ProductCode", clsMain.MyString(obje.ProductId));
        //            //        sqlParam[1] = new SqlParameter("@PartyId", clsMain.MyString(obje.PartyId));
        //            //        sqlParam[2] = new SqlParameter("@SalesManId", clsMain.MyString(obje.SalesManId));
        //            //        sqlParam[3] = new SqlParameter("@Price", clsMain.MyString(obje.Price));
        //            //        sqlParam[4] = new SqlParameter("@MinQty", clsMain.MyString(obje.MinQty));
        //            //        sqlParam[5] = new SqlParameter("@Status", clsMain.MyString(obje.Status));
        //            //        sqlParam[6] = new SqlParameter("@TotalPrice", clsMain.MyString(obje.TotalPrice));
        //            //        sqlParam[7] = new SqlParameter("@Disc", clsMain.MyString(obje.Disc));
        //            //        sqlParam[8] = new SqlParameter("@DiscAmt", clsMain.MyDouble(obje.DiscAmt));
        //            //        sqlParam[9] = new SqlParameter("@FItemCode", clsMain.MyInt(obje.FItemCode));
        //            //        sqlParam[10] = new SqlParameter("@FreeQty", clsMain.MyDouble(obje.FreeQty));
        //            //        sqlParam[11] = new SqlParameter("@FItemPrice", clsMain.MyDouble(obje.FItemPrice));
        //            //        sqlParam[12] = new SqlParameter("@SchemeCode", clsMain.MyInt(obje.SchemeCode));
        //            //        sqlParam[13] = new SqlParameter("@SchemeType", clsMain.MyInt(obje.SchemeType));
        //            //        sqlParam[14] = new SqlParameter("@AltQty", clsMain.MyString(obje.AltQty));
        //            //        sqlParam[15] = new SqlParameter("@Confactor", clsMain.MyString(obje.Confactor));
        //            //        sqlParam[16] = new SqlParameter("@SalePrice", clsMain.MyDouble(obje.SalePrice));
        //            //        sqlParam[17] = new SqlParameter("@CartID", clsMain.MyString(obje.CartId));
        //            //        sqlParam[18] = new SqlParameter("@Remarks", clsMain.MyString(obje.Remarks));
        //            //        sqlParam[19] = new SqlParameter("@Description1", clsMain.MyString(obje.Description1));
        //            //        sqlParam[20] = new SqlParameter("@Description2", clsMain.MyString(obje.Description2));
        //            //        sqlParam[21] = new SqlParameter("@Description3", clsMain.MyString(obje.Description3));
        //            //        sqlParam[22] = new SqlParameter("@Description4", clsMain.MyString(obje.Description4));


        //            //        DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddToCartSFA", sqlParam);
        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            Response pl = new Response();

        //            //            foreach (DataRow item in dt.Rows)
        //            //            {

        //            //                pl = new Response();
        //            //                pl.msg = clsMain.MyString(item["msg"]);
        //            //                pl.Sucess = clsMain.MyInt(item["Sucess"]);

        //            //                pl.CartList = new List<CartDetails>();
        //            //                if (clsMain.MyLen(item["Sucess"]) > 0)
        //            //                {
        //            //                    CartDetails im = new CartDetails();
        //            //                    im.SalesManId = clsMain.MyString(item["SalesManId"]);
        //            //                    im.PartyId = clsMain.MyString(item["PartyId"]);
        //            //                    im.Price = clsMain.MyString(item["Price"]);
        //            //                    im.ProductId = clsMain.MyString(item["ProductCode"]);
        //            //                    im.MinQty = clsMain.MyString(item["minqty"]);
        //            //                    im.Status = clsMain.MyString(item["Status"]);
        //            //                    im.TotalPrice = clsMain.MyString(item["TotalPrice"]);
        //            //                    im.Disc = clsMain.MyString(item["Disc"]);
        //            //                    im.DiscAmt = clsMain.MyDouble(item["DiscAmt"]);
        //            //                    im.FItemCode = clsMain.MyInt(item["FItemCode"]);
        //            //                    im.FreeQty = clsMain.MyDouble(item["FreeQty"]);
        //            //                    im.FItemPrice = clsMain.MyDouble(item["FItemPrice"]);
        //            //                    im.SchemeCode = clsMain.MyInt(item["SchemeCode"]);
        //            //                    im.SchemeType = clsMain.MyInt(item["SchemeType"]);
        //            //                    pl.CartList.Add(im);
        //            //                }
        //            //                objResult.Add(pl);
        //            //            }
        //            //        }

        //            //    }
        //            //    catch
        //            //    {
        //            //        return objResult;
        //            //    }
        //            //    return objResult;
        //            //}
        //            [HttpPost]
        //            public List<Response> AddToCartSFA(addcart obje, string CompCode, string FY)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    if (Provider == 1)
        //                    {
        //                        objResult = AddToCartSFAAccess(obje, ConnectionString);
        //                    }
        //                    else
        //                    {
        //                        objResult = AddToCartSFASQL(obje, ConnectionString);
        //                    }
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpPost]
        //            public List<Response> AddToCartSFASQL(addcart obje, string ConnectionString)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                List<CartDetails> objstatus = new List<CartDetails>();
        //                try
        //                {
        //                    SqlParameter[] sqlParam = new SqlParameter[24];

        //                    sqlParam[0] = new SqlParameter("@ProductCode", clsMain.MyString(obje.ProductId));
        //                    sqlParam[1] = new SqlParameter("@PartyId", clsMain.MyString(obje.PartyId));
        //                    sqlParam[2] = new SqlParameter("@SalesManId", clsMain.MyString(obje.SalesManId));
        //                    sqlParam[3] = new SqlParameter("@Price", clsMain.MyString(obje.Price));
        //                    sqlParam[4] = new SqlParameter("@MinQty", clsMain.MyString(obje.MinQty));
        //                    sqlParam[5] = new SqlParameter("@Status", clsMain.MyString(obje.Status));
        //                    sqlParam[6] = new SqlParameter("@TotalPrice", clsMain.MyString(obje.TotalPrice));
        //                    sqlParam[7] = new SqlParameter("@Disc", clsMain.MyString(obje.Disc));
        //                    sqlParam[8] = new SqlParameter("@DiscAmt", clsMain.MyDouble(obje.DiscAmt));
        //                    sqlParam[9] = new SqlParameter("@FItemCode", clsMain.MyInt(obje.FItemCode));
        //                    sqlParam[10] = new SqlParameter("@FreeQty", clsMain.MyDouble(obje.FreeQty));
        //                    sqlParam[11] = new SqlParameter("@FItemPrice", clsMain.MyDouble(obje.FItemPrice));
        //                    sqlParam[12] = new SqlParameter("@SchemeCode", clsMain.MyInt(obje.SchemeCode));
        //                    sqlParam[13] = new SqlParameter("@SchemeType", clsMain.MyInt(obje.SchemeType));
        //                    sqlParam[14] = new SqlParameter("@AltQty", clsMain.MyString(obje.AltQty));
        //                    sqlParam[15] = new SqlParameter("@Confactor", clsMain.MyString(obje.Confactor));
        //                    sqlParam[16] = new SqlParameter("@SalePrice", clsMain.MyDouble(obje.SalePrice));
        //                    sqlParam[17] = new SqlParameter("@CartID", clsMain.MyString(obje.CartId));
        //                    sqlParam[18] = new SqlParameter("@Remarks", clsMain.MyString(obje.Remarks));
        //                    sqlParam[19] = new SqlParameter("@Description1", clsMain.MyString(obje.Description1));
        //                    sqlParam[20] = new SqlParameter("@Description2", clsMain.MyString(obje.Description2));
        //                    sqlParam[21] = new SqlParameter("@Description3", clsMain.MyString(obje.Description3));
        //                    sqlParam[22] = new SqlParameter("@Description4", clsMain.MyString(obje.Description4));
        //                    sqlParam[23] = new SqlParameter("@BillingUnit", clsMain.MyInt(obje.BillingUnit));


        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddToCartSFA", sqlParam);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Response pl = new Response();

        //                        foreach (DataRow item in dt.Rows)
        //                        {

        //                            pl = new Response();
        //                            pl.msg = clsMain.MyString(item["msg"]);
        //                            pl.Sucess = clsMain.MyInt(item["Sucess"]);

        //                            pl.CartList = new List<CartDetails>();
        //                            if (clsMain.MyLen(item["Sucess"]) > 0)
        //                            {
        //                                CartDetails im = new CartDetails();
        //                                im.SalesManId = clsMain.MyString(item["SalesManId"]);
        //                                im.PartyId = clsMain.MyString(item["PartyId"]);
        //                                im.Price = clsMain.MyString(item["Price"]);
        //                                im.ProductId = clsMain.MyString(item["ProductCode"]);
        //                                im.MinQty = clsMain.MyString(item["minqty"]);
        //                                im.Status = clsMain.MyString(item["Status"]);
        //                                im.TotalPrice = clsMain.MyString(item["TotalPrice"]);
        //                                im.Disc = clsMain.MyString(item["Disc"]);
        //                                im.DiscAmt = clsMain.MyDouble(item["DiscAmt"]);
        //                                im.FItemCode = clsMain.MyInt(item["FItemCode"]);
        //                                im.FreeQty = clsMain.MyDouble(item["FreeQty"]);
        //                                im.FItemPrice = clsMain.MyDouble(item["FItemPrice"]);
        //                                im.SchemeCode = clsMain.MyInt(item["SchemeCode"]);
        //                                im.SchemeType = clsMain.MyInt(item["SchemeType"]);
        //                                im.BillingUnit = clsMain.MyInt(item["BillingUnit"]);
        //                                pl.CartList.Add(im);
        //                            }
        //                            objResult.Add(pl);
        //                        }
        //                    }

        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            private List<Response> AddToCartSFAAccess(addcart obje, string ConnectionString)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                try
        //                {
        //                    string sql = "";
        //                    int R = 0;
        //                    Response pl = new Response();
        //                    DataTable dt = new DataTable();
        //                    pl.msg = "Failed";
        //                    pl.Sucess = 0;
        //                    pl.CartList = new List<CartDetails>();

        //                    double SalePrice = clsMain.MyDouble(obje.SalePrice);
        //                    double AltQty = clsMain.MyDouble(obje.AltQty);

        //                    if (SalePrice == 0) { SalePrice = clsMain.MyDouble(obje.Price); }
        //                    if (AltQty == 0) { AltQty = clsMain.MyDouble(obje.MinQty); }

        //                    if (clsMain.MyInt(obje.Status) == 1)
        //                    {
        //                        sql = "insert into ESSalesMenCart(ProductCode, PartyId, SalesManId, Price, Qty, CreatedDate, TotalPrice, Disc, DiscAmt, FItemCode, FreeQty, FItemPrice, SchemeCode, SchemeType, AltQty, Confactor, SalePrice, Remarks, Description1, Description2, Description3, Description4,BillingUnit)";
        //                        sql = sql + " Values (" + obje.ProductId + "," + obje.PartyId + "," + obje.SalesManId + "," + obje.Price + "," + obje.MinQty + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + obje.TotalPrice + "," + obje.Disc + "," + obje.DiscAmt + "," + obje.FItemCode + "," + obje.FreeQty + "," + obje.FItemPrice + "," + obje.SchemeCode + "," + obje.SchemeType + "," + AltQty + "," + obje.Confactor + "," + SalePrice + ",'" + obje.Remarks.Replace("'", "''") + "','" + obje.Description1.Replace("'", "''") + "','" + obje.Description2.Replace("'", "''") + "','" + obje.Description3.Replace("'", "''") + "','" + obje.Description4.Replace("'", "''") + "'," + obje.BillingUnit + ")";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        if (R > 0)
        //                        {
        //                            pl.msg = "Save";
        //                            pl.Sucess = 1;
        //                        }
        //                    }
        //                    else if (clsMain.MyInt(obje.Status) == 2)
        //                    {
        //                        sql = "select Top 1 ID from ESSalesMenCart where SalesManId = " + obje.SalesManId + " and PartyId = " + obje.PartyId + " and ProductCode = " + obje.ProductId + "";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            sql = "Update ESSalesMenCart set Price = " + obje.Price + ",Qty = " + obje.MinQty + ",Disc = " + obje.Disc + ",DiscAmt = " + obje.DiscAmt + ",FItemCode = " + obje.FItemCode + ",FreeQty = " + obje.FreeQty + ",FItemPrice = " + obje.FItemPrice + ",SchemeCode = " + obje.SchemeCode + ",SchemeType = " + obje.SchemeType + ",";
        //                            sql = sql + "AltQty = " + AltQty + ",Confactor = " + obje.Confactor + ",SalePrice = " + SalePrice + ",Remarks = '" + obje.Remarks.Replace("'", "''") + "',Description1 = '" + obje.Description1.Replace("'", "''") + "',Description2 = '" + obje.Description2.Replace("'", "''") + "',Description3 = '" + obje.Description3.Replace("'", "''") + "',Description4 = '" + obje.Description4.Replace("'", "''") + "',BillingUnit=" + obje.BillingUnit + "";
        //                            sql = sql + " where ID = " + clsMain.MyInt(dt.Rows[0]["ID"]) + "";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            if (R > 0)
        //                            {
        //                                sql = "Update ESSalesMenCart Set TotalPrice = Qty * Price where Id = " + clsMain.MyInt(dt.Rows[0]["ID"]) + "";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);

        //                                pl.msg = "Updated";
        //                                pl.Sucess = 1;
        //                            }
        //                        }
        //                    }
        //                    else if (clsMain.MyInt(obje.Status) == 3)
        //                    {
        //                        sql = "Delete from ESSalesMenCart where Id = " + obje.CartId + "";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        if (R > 0)
        //                        {
        //                            pl.msg = "Removed Sucessfully";
        //                            pl.Sucess = 1;
        //                        }
        //                    }
        //                    CartDetails im = new CartDetails();
        //                    im.SalesManId = clsMain.MyString(obje.SalesManId);
        //                    im.PartyId = clsMain.MyString(obje.PartyId);
        //                    im.Price = clsMain.MyString(obje.Price);
        //                    im.ProductId = clsMain.MyString(obje.ProductId);
        //                    im.MinQty = clsMain.MyString(obje.MinQty);
        //                    im.Status = clsMain.MyString(obje.Status);
        //                    im.TotalPrice = clsMain.MyString(obje.TotalPrice);
        //                    im.Disc = clsMain.MyString(obje.Disc);
        //                    im.DiscAmt = clsMain.MyDouble(obje.DiscAmt);
        //                    im.FItemCode = clsMain.MyInt(obje.FItemCode);
        //                    im.FreeQty = clsMain.MyDouble(obje.FreeQty);
        //                    im.FItemPrice = clsMain.MyDouble(obje.FItemPrice);
        //                    im.SchemeCode = clsMain.MyInt(obje.SchemeCode);
        //                    im.SchemeType = clsMain.MyInt(obje.SchemeType);
        //                    im.BillingUnit = clsMain.MyInt(obje.BillingUnit);
        //                    pl.CartList.Add(im);
        //                    objResult.Add(pl);
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }
        //            //[HttpPost]
        //            //public dynamic AddToCartMultiple(List<addcart> obje)
        //            //{
        //            //    List<Response> objResult = new List<Response>();
        //            //    List<CartDetails> objstatus = new List<CartDetails>();
        //            //    try
        //            //    {
        //            //        string XMlStr = "";

        //            //        XMlStr = CreateXML(obje);

        //            //        SqlParameter[] sqlParam = new SqlParameter[1];

        //            //        sqlParam[0] = new SqlParameter("@XMlStr", clsMain.MyString(XMlStr));


        //            //        DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddToCartMultiple", sqlParam);
        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            Response pl = new Response();

        //            //            foreach (DataRow item in dt.Rows)
        //            //            {

        //            //                pl = new Response();
        //            //                pl.msg = clsMain.MyString(item["msg"]);
        //            //                pl.Sucess = clsMain.MyInt(item["Sucess"]);

        //            //                //pl.CartList = new List<CartDetails>();
        //            //                //if (clsMain.MyLen(item["Sucess"]) > 0)
        //            //                //{
        //            //                //    CartDetails im = new CartDetails();
        //            //                //    im.SalesManId = clsMain.MyString(item["SalesManId"]);
        //            //                //    im.PartyId = clsMain.MyString(item["PartyId"]);
        //            //                //    im.Price = clsMain.MyString(item["Price"]);
        //            //                //    im.ProductId = clsMain.MyString(item["ProductCode"]);
        //            //                //    im.MinQty = clsMain.MyString(item["minqty"]);
        //            //                //    im.Status = clsMain.MyString(item["Status"]);
        //            //                //    im.TotalPrice = clsMain.MyString(item["TotalPrice"]);
        //            //                //    im.Remarks = clsMain.MyString(item["Remarks"]);
        //            //                //    pl.CartList.Add(im);
        //            //                //}
        //            //                objResult.Add(pl);
        //            //            }
        //            //        }

        //            //    }
        //            //    catch
        //            //    {
        //            //        return new { msg = "Failed", Sucess = 0 };
        //            //    }
        //            //    return objResult;
        //            //}

        //            [HttpPost]
        //            public dynamic AddToCartMultiple(List<addcart> obje, string CompCode, string FY)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    if (Provider == 1)
        //                    {
        //                        objResult = AddToCartMultipleAccess(obje, ConnectionString);
        //                    }
        //                    else
        //                    {
        //                        objResult = AddToCartMultipleSQL(obje, ConnectionString);
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { msg = "Failed", Sucess = 0 };
        //                }
        //                return objResult;
        //            }

        //            public dynamic AddToCartMultipleAccess(List<addcart> obje, string ConnectionString)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                List<CartDetails> objstatus = new List<CartDetails>();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    string sql = "";
        //                    int R = 0;

        //                    Response pl = new Response();

        //                    foreach (var item in obje)
        //                    {
        //                        double SalePrice = clsMain.MyDouble(item.SalePrice);
        //                        double AltQty = clsMain.MyDouble(item.AltQty);

        //                        if (SalePrice == 0) { SalePrice = clsMain.MyDouble(item.Price); }
        //                        if (AltQty == 0) { AltQty = clsMain.MyDouble(item.MinQty); }

        //                        sql = "Select Top 1 * From ESSalesMenCart Where SalesManId = " + item.SalesManId + " and PartyId = " + item.PartyId + " and ProductCode = " + item.ProductId + "";
        //                        dt = new ESCommon.OLEDBHELPER(ConnectionString).getTable(sql);
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            sql = "Update ESSalesMenCart Set Price = " + item.Price + ",Qty = " + item.MinQty + ",TotalPrice = " + item.TotalPrice + ",Disc = " + item.Disc + ",DiscAmt = " + item.DiscAmt + ",FItemCode = " + item.FItemCode + ",FreeQty = " + item.FreeQty + ",FItemPrice = " + item.FItemPrice + ",SchemeCode = " + item.SchemeCode + ",SchemeType = " + item.SchemeType + ",AltQty = " + AltQty + ",Confactor = " + item.Confactor + ",SalePrice = " + SalePrice + ",Remarks = '" + item.Remarks.Replace("'", "''") + "',Description1 = '" + item.Description1.Replace("'", "''") + "',Description2 = '" + item.Description2.Replace("'", "''") + "',Description3 = '" + item.Description3.Replace("'", "''") + "',Description4 = '" + item.Description4.Replace("'", "''") + "'";
        //                            sql = sql + " where SalesManId = " + item.SalesManId + " and PartyId = " + item.PartyId + " and ProductCode = " + item.ProductId + "";
        //                        }
        //                        else
        //                        {
        //                            sql = "insert into ESSalesMenCart(ProductCode, PartyId, SalesManId, Price, Qty, CreatedDate, TotalPrice, Disc, DiscAmt, FItemCode, FreeQty, FItemPrice, SchemeCode, SchemeType, AltQty, Confactor, SalePrice, Remarks, Description1, Description2, Description3, Description4)";
        //                            sql = sql + " Values(" + item.ProductId + "," + item.PartyId + "," + item.SalesManId + "," + item.Price + "," + item.MinQty + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + item.TotalPrice + "," + item.Disc + "," + item.DiscAmt + "," + item.FItemCode + "," + item.FreeQty + "," + item.FItemPrice + "," + item.SchemeCode + "," + item.SchemeType + "," + AltQty + "," + item.Confactor + "," + SalePrice + ",'" + item.Remarks.Replace("'", "''") + "','" + item.Description1.Replace("'", "''") + "','" + item.Description2.Replace("'", "''") + "','" + item.Description3.Replace("'", "''") + "','" + item.Description4.Replace("'", "''") + "')";
        //                            R = new ESCommon.OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                    }

        //                    pl = new Response();
        //                    pl.msg = "Save";
        //                    pl.Sucess = 1;
        //                    objResult.Add(pl);
        //                }
        //                catch
        //                {
        //                    return new { msg = "Failed", Sucess = 0 };
        //                }
        //                return objResult;
        //            }

        //            public dynamic AddToCartMultipleSQL(List<addcart> obje, string ConnectionString)
        //            {
        //                List<Response> objResult = new List<Response>();
        //                List<CartDetails> objstatus = new List<CartDetails>();
        //                try
        //                {
        //                    string XMlStr = "";

        //                    XMlStr = CreateXML(obje);

        //                    SqlParameter[] sqlParam = new SqlParameter[1];

        //                    sqlParam[0] = new SqlParameter("@XMlStr", clsMain.MyString(XMlStr));


        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddToCartMultiple", sqlParam);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Response pl = new Response();

        //                        foreach (DataRow item in dt.Rows)
        //                        {

        //                            pl = new Response();
        //                            pl.msg = clsMain.MyString(item["msg"]);
        //                            pl.Sucess = clsMain.MyInt(item["Sucess"]);

        //                            objResult.Add(pl);
        //                        }
        //                    }

        //                }
        //                catch
        //                {
        //                    return new { msg = "Failed", Sucess = 0 };
        //                }
        //                return objResult;
        //            }

        public static string CreateXML(Object YourClassObject)
        {
            XmlDocument xmlDoc = new XmlDocument();   //Represents an XML document, 
                                                      // Initializes a new instance of the XmlDocument class.          
            XmlSerializer xmlSerializer = new XmlSerializer(YourClassObject.GetType());
            // Creates a stream whose backing store is memory. 
            using (MemoryStream xmlStream = new MemoryStream())
            {
                xmlSerializer.Serialize(xmlStream, YourClassObject);
                xmlStream.Position = 0;
                //Loads the XML document from the specified string.
                xmlDoc.Load(xmlStream);
                return xmlDoc.InnerXml;
            }
        }

        //            [HttpPost]
        //            public Response SaveAppLog(AppLogInfo obje, string CompCode, string FY)
        //            {
        //                Response pl = new Response();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string sql = "";
        //                    int R = 0;
        //                    if (Provider == 1)
        //                    {
        //                        sql = "insert into ESAppLogInfo (LogDate,UserType,UserID,MsgID,MSG,MasterNm)";
        //                        sql = sql + " Values (#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + obje.UserType + "," + obje.UserID + "," + obje.MsgID + ",'" + obje.MSG.Replace("'", "''") + "','" + obje.MasterName.Replace("'", "''") + "')";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "insert into ESAppLogInfo (LogDate,UserType,UserID,MsgID,MSG,MasterNm)";
        //                        sql = sql + " Values ('" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "'," + obje.UserType + "," + obje.UserID + "," + obje.MsgID + ",'" + obje.MSG.Replace("'", "''") + "','" + obje.MasterName.Replace("'", "''") + "')";
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }

        //                    pl = new Response();
        //                    pl.msg = "Success";
        //                    pl.Sucess = 1;
        //                    pl.CartList = new List<CartDetails>();
        //                }
        //                catch
        //                {
        //                    pl = new Response();
        //                    pl.msg = "Failure";
        //                    pl.Sucess = 0;
        //                    pl.CartList = new List<CartDetails>();
        //                    return pl;
        //                }
        //                return pl;
        //            }


        //            [HttpPost]
        //            public APIResponse AddFavourite(AddFavourite Obj, string CompCode, string FY)
        //            {
        //                APIResponse ObjResponse = new APIResponse();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable dt = new DataTable();
        //                    string sql = "";
        //                    int R = 0;

        //                    int Success = 0;
        //                    string msg = "Failed";

        //                    if (Provider == 1)
        //                    {
        //                        if (Obj.FType == 1)
        //                        {
        //                            sql = "delete from ES_PartyFavourite Where PartyID = " + Obj.PartyId + " And ProductID = " + Obj.ProductId + "";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);

        //                            sql = "Insert into ES_PartyFavourite([PartyID],[ProductID]) Values(" + Obj.PartyId + "," + Obj.ProductId + ")";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            if (R > 0)
        //                            {
        //                                Success = 1;
        //                                msg = "Product Saved to Favourite List";
        //                            }
        //                        }
        //                        else
        //                        {
        //                            sql = "delete from ES_PartyFavourite Where PartyID = " + Obj.PartyId + " And ProductID = " + Obj.ProductId + "";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            if (R > 0)
        //                            {
        //                                Success = 1;
        //                                msg = "Product Removed from Favourite List";
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        SqlParameter[] Para = new SqlParameter[3];
        //                        Para[0] = new SqlParameter("@PartyID", clsMain.MyInt(Obj.PartyId));
        //                        Para[1] = new SqlParameter("@ProductID", clsMain.MyInt(Obj.ProductId));
        //                        Para[2] = new SqlParameter("@FType", clsMain.MyInt(Obj.FType));
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_Favourite", Para);
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            foreach (DataRow Row in dt.Rows)
        //                            {
        //                                Success = clsMain.MyInt(Row["Status"]);
        //                                msg = clsMain.MyString(Row["Msg"]);
        //                            }
        //                        }
        //                    }
        //                    ObjResponse.Sucess = Success;
        //                    ObjResponse.msg = msg;
        //                }
        //                catch (Exception EX)
        //                {
        //                    ObjResponse.Sucess = 0;
        //                    ObjResponse.msg = EX.Message.ToString();
        //                    return ObjResponse;
        //                }
        //                return ObjResponse;
        //            }

        //            [HttpGet]
        //            public dynamic UserBlocked(string DeviceID, string CompCode, string FY)
        //            {
        //                try
        //                {
        //                    string str;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    int R;

        //                    queryStr = "SElect 1 From ESUserLogin Where DeviceId = '" + DeviceID.ToString() + "'";
        //                    //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(str);
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        str = "Update ESUserLogin Set [Deactivate] = 1 Where DeviceId = '" + DeviceID.ToString() + "'";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                        }
        //                        if (R == 1)
        //                        {
        //                            return new { status = 1, msg = "User Blocked Successfully" };
        //                        }
        //                        else
        //                        {
        //                            return new { status = 0, msg = "User Failed to Block" };
        //                        }
        //                    }
        //                    else
        //                    {
        //                        return new { status = 0, msg = "Device ID Not Exist" };
        //                    }

        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { status = 0, msg = EX.Message };
        //                }
        //            }

        //            [HttpGet]
        //            public dynamic GetUserTypeFromDeviceID(string DeviceID, string CompCode, string FY)
        //            {
        //                try
        //                {
        //                    //string str;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "SElect UserType From ESUserLogin Where DeviceId = '" + DeviceID.ToString() + "'";
        //                    //DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable(str);
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        if (table.Rows[0]["UserType"] != null)
        //                        {
        //                            return new { status = 1, UserType = Convert.ToInt16(table.Rows[0]["UserType"]) };
        //                        }
        //                        else
        //                        {
        //                            return new { status = 0, UserType = 0 };
        //                        }
        //                    }
        //                    else
        //                    {
        //                        return new { status = 0, UserType = 0 };
        //                    }

        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { status = 0, UserType = EX.Message };
        //                }
        //            }

        //            [HttpPost]
        //            public List<Alert> UpdateToCartJson(List<addcart> obje, string CompCode, string FY)
        //            {
        //                List<Alert> objResult = new List<Alert>();
        //                int R1 = 0;
        //                int R = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    string sql = "";
        //                    //if (Provider == 1)
        //                    //{
        //                    foreach (var item in obje)
        //                    {
        //                        sql = "Update ESSalesMenCart set Price = " + item.Price + ",Qty = " + item.MinQty + ",TotalPrice = " + item.TotalPrice + ",Disc = " + item.Disc + ",DiscAmt = " + item.DiscAmt + ",FItemCode = " + item.FItemCode + ",FreeQty = " + item.FreeQty + ",FItemPrice = " + item.FItemPrice + ",SchemeCode = " + item.SchemeCode + "";
        //                        sql = sql + ",SchemeType = " + item.SchemeType + ",AltQty = " + item.AltQty + ",Confactor = " + item.Confactor + ",SalePrice = " + item.SalePrice + ",Remarks = '" + item.Remarks.Replace("'", "''") + "',Description1 = '" + item.Description1.Replace("'", "''") + "',Description2 = '" + item.Description2.Replace("'", "''") + "'";
        //                        sql = sql + ",Description3 = '" + item.Description3.Replace("'", "''") + "',Description4 = '" + item.Description4.Replace("'", "''") + "',BillingUnit=" + item.BillingUnit + " where Id = " + item.CartId + "";
        //                        if (Provider == 1)
        //                        {
        //                            R1 = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R1 = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        if (R1 > 0) { R = R + 1; }
        //                    }
        //                    //}
        //                    if (R > 0)
        //                    {
        //                        Alert pl = new Alert();

        //                        pl = new Alert();
        //                        pl.Message = clsMain.MyString("Updated Suceessfullly");
        //                        pl.Sucess = clsMain.MyInt(1);
        //                        objResult.Add(pl);
        //                    }
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpPost]
        //            public List<Alert> UpdateToCart(UpdateCart obje)
        //            {
        //                List<Alert> objResult = new List<Alert>();

        //                string[] CartId = obje.CartId.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] Price = obje.Price.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] Qty = obje.Qty.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] TotalPrice = obje.TotalPrice.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] DiscP = obje.Disc.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] DiscA = obje.DiscAmt.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] FItemC = obje.FItemCode.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] FreeQ = obje.FreeQty.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] FItemP = obje.FItemPrice.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] SchemeCodeC = obje.SchemeCode.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                string[] SchemeTypeC = obje.SchemeType.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    for (int i = 0; i < CartId.Length; i++)
        //                    {
        //                        SqlParameter[] sqlParam = new SqlParameter[13];
        //                        sqlParam[0] = new SqlParameter("@CartId", clsMain.MyString(CartId[i]));
        //                        sqlParam[1] = new SqlParameter("@PartyId", clsMain.MyString(obje.PartyId));
        //                        sqlParam[2] = new SqlParameter("@SalesManId", clsMain.MyString(obje.SalesManId));
        //                        sqlParam[3] = new SqlParameter("@Price", clsMain.MyString(Price[i]));
        //                        sqlParam[4] = new SqlParameter("@Qty", clsMain.MyString(Qty[i]));
        //                        sqlParam[5] = new SqlParameter("@TotalPrice", clsMain.MyString(TotalPrice[i]));
        //                        sqlParam[6] = new SqlParameter("@Disc", clsMain.MyString(DiscP[i]));
        //                        sqlParam[7] = new SqlParameter("@DiscAmt", clsMain.MyDouble(DiscA[i]));
        //                        sqlParam[8] = new SqlParameter("@FItemCode", clsMain.MyInt(FItemC[i]));
        //                        sqlParam[9] = new SqlParameter("@FreeQty", clsMain.MyDouble(FreeQ[i]));
        //                        sqlParam[10] = new SqlParameter("@FItemPrice", clsMain.MyDouble(FItemP[i]));
        //                        sqlParam[11] = new SqlParameter("@SchemeCode", clsMain.MyDouble(SchemeCodeC[i]));
        //                        sqlParam[12] = new SqlParameter("@SchemeType", clsMain.MyDouble(SchemeTypeC[i]));
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_UpdateToCart", sqlParam);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Alert pl = new Alert();
        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            pl = new Alert();
        //                            pl.Message = clsMain.MyString(item["msg"]);
        //                            pl.Sucess = clsMain.MyInt(item["Sucess"]);
        //                            objResult.Add(pl);
        //                        }
        //                    }

        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            public AutoOrderDT GetAutoOtderDetails(string ConnectionString)
        //            {

        //                AutoOrderDT OrderDet = new AutoOrderDT();
        //                //string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                queryStr = "Select AutoOrderSFA,AutoOrderSFAM,SOSeries,Stype,MCCode,RSeries from ESVchConfig";
        //                //DataTable dt = obj.getTable(queryStr);
        //                if (Provider == 1)
        //                {
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    OrderDet.AutoOrder = clsMain.MyInt(dt.Rows[0]["AutoOrderSFA"]);
        //                    OrderDet.AutoOrderM = clsMain.MyInt(dt.Rows[0]["AutoOrderSFAM"]);
        //                    OrderDet.SeriesCode = clsMain.MyInt(dt.Rows[0]["SOSeries"]);
        //                    OrderDet.STPTCode = clsMain.MyInt(dt.Rows[0]["Stype"]);
        //                    OrderDet.MCCode = clsMain.MyInt(dt.Rows[0]["MCCode"]);
        //                    OrderDet.RcptSeriesCode = clsMain.MyInt(dt.Rows[0]["RSeries"]);
        //                }
        //                return OrderDet;
        //            }

        //            public ExpVchConfigDT GetExpenseConfig(string ConnectionString)
        //            {

        //                ExpVchConfigDT ExpDet = new ExpVchConfigDT();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                // string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                queryStr = "Select * from ESExpenseVchConfig where RecType = 1 Order By SrNo";
        //                // DataTable dt = obj.getTable(queryStr);
        //                if (Provider == 1)
        //                {
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    ExpDet.SeriesCode = clsMain.MyInt(dt.Rows[0]["MasterCode1"]);
        //                    ExpDet.SaveDoc = clsMain.MyInt(dt.Rows[0]["I1"]);
        //                    ExpDet.SaveDocInDB = clsMain.MyInt(dt.Rows[0]["I2"]);
        //                    ExpDet.DocPath = clsMain.MyString(dt.Rows[0]["C1"]);
        //                }
        //                return ExpDet;
        //            }

        //            [HttpGet]
        //            public dynamic VoucherValidation(string CompCode, string FY)
        //            {
        //                int MinPriceV = 0;
        //                int QtyAbsV = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string str = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        str = "Select IIF(IsNull(MinPriceV),0,MinPriceV) as MinPriceV,IIF(IsNull(QtyV),0,QtyV) as QtyAbsV from ESVchConfig";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(str);
        //                    }
        //                    else
        //                    {
        //                        str = "Select IsNull(MinPriceV,0) as MinPriceV,IsNull(QtyV,0) as QtyAbsV from ESVchConfig";
        //                        dt = new SQLHELPER(ConnectionString).getTable(str);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        MinPriceV = clsMain.MyInt(dt.Rows[0]["MinPriceV"]);
        //                        QtyAbsV = clsMain.MyInt(dt.Rows[0]["QtyAbsV"]);
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), MinPriceV = MinPriceV, QtyAbsV = QtyAbsV };
        //                }
        //                return new { Status = 1, Msg = "Valid", MinPriceV = MinPriceV, QtyAbsV = QtyAbsV };
        //            }

        //            [HttpGet]
        //            public List<AccList> GetBusyMaster(int MasterType, int VchType, string CompCode, string FY)
        //            {
        //                List<AccList> lst = new List<AccList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        if (MasterType == 21)
        //                        {
        //                            queryStr = "Select Code,Mid(Name,3,25) as Name,0 as Price From Master1 Where MasterType = " + MasterType + " And I1 = " + VchType + " Order By Name";
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select Code,Name,IIF(IsNull(D3),0,D3) as Price from Master1 where Mastertype = " + MasterType + " Order by Name";
        //                        }
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        if (MasterType == 21)
        //                        {
        //                            queryStr = "SElect Code,substring(Name,3,25) as Name,0 as Price From Master1 Where MasterType = " + MasterType + " And I1 = " + VchType + " Order By Name";
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select Code,Name,IsNull(D3,0) as Price from Master1 where Mastertype = " + MasterType + " Order by Name";
        //                        }
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            AccList lstObj = new AccList();

        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.Price = clsMain.MyDouble(dr1["Price"]);

        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetBusyBillSundryList(int Code, string CompCode, string FY)
        //            {
        //                List<BillSundrylist> lst = new List<BillSundrylist>();
        //                int IGCode = 0;
        //                double IGST = 0;
        //                double CGST = 0;
        //                double SGST = 0;

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select iif(isnull(D1),0,D1) as IGST,iif(isnull(D4),0,D4) as CGST,iif(isnull(D5),0,D5) as SGST from Master1 Where Code = " + Code + "";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select isnull(D1,01) as IGST,isnull(D4,0) as CGST,isnull(D5,0) as SGST from Master1 Where Code = " + Code + "";
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        IGST = clsMain.MyDouble(table.Rows[0]["IGST"]);
        //                        CGST = clsMain.MyDouble(table.Rows[0]["CGST"]);
        //                        SGST = clsMain.MyDouble(table.Rows[0]["SGST"]);
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select Name, Code,0 as D1,I1 AS BSType ,IIF(I1 = 1, 'Additive', IIF(i1 <> 1, 'Subtractive')) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,IIF(I2 = 1, 'Percentage', IIF(I2 = 0, 'Absoulte Amt', IIF(I2 = 2, 'Per Main Qty', IIF(I2 = 3, 'Per Alt Qty')))) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select Name,Code,I1 BSType ,(case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            BillSundrylist lstObj = new BillSundrylist();

        //                            lstObj.Code = clsMain.MyInt(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.BSType = clsMain.MyInt(dr1["BSType"]);
        //                            lstObj.BSTypeName = clsMain.MyString(dr1["BSTypeName"]);
        //                            lstObj.CalBasis = clsMain.MyInt(dr1["CalBasis"]);
        //                            lstObj.CalBasisName = clsMain.MyString(dr1["CalBasisName"]);
        //                            lstObj.AppliedOn = clsMain.MyInt(dr1["AppliedOn"]);
        //                            lstObj.BSNature = clsMain.MyInt(dr1["BSNature"]);
        //                            lstObj.BSAmount = 0;
        //                            lstObj.PercentOperatedOn = 0;
        //                            if (lstObj.BSNature == 51 || lstObj.BSNature == 52 || lstObj.BSNature == 53)
        //                            {
        //                                if (lstObj.BSNature == 51)
        //                                {
        //                                    if (SGST > 0) { lstObj.BSPercent = SGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
        //                                }
        //                                if (lstObj.BSNature == 52)
        //                                {
        //                                    if (CGST > 0) { lstObj.BSPercent = CGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
        //                                }
        //                                if (lstObj.BSNature == 53)
        //                                {
        //                                    if (IGST > 0) { lstObj.BSPercent = IGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
        //                                }
        //                            }

        //                            else
        //                            {
        //                                lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]);
        //                            }

        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetBusyBillSundryList1(int Code, int SeriesCode, int Vchtype, string CompCode, string FY)
        //            {
        //                List<BillSundrylist> lst = new List<BillSundrylist>();
        //                int IGCode = 0;
        //                double IGST = 0;
        //                double CGST = 0;
        //                double SGST = 0;

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select iif(isnull(D1),0,D1) as IGST,iif(isnull(D4),0,D4) as CGST,iif(isnull(D5),0,D5) as SGST from Master1 Where Code = " + Code + "";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select isnull(D1,01) as IGST,isnull(D4,0) as CGST,isnull(D5,0) as SGST from Master1 Where Code = " + Code + "";
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        IGST = clsMain.MyDouble(table.Rows[0]["IGST"]);
        //                        CGST = clsMain.MyDouble(table.Rows[0]["CGST"]);
        //                        SGST = clsMain.MyDouble(table.Rows[0]["SGST"]);
        //                    }

        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select B.Code,B.Name,B.D1,B.BSType,B.BSTypeName,A.D1 as BSPercent,B.CalBasis,B.CalBasisName,B.AppliedOn,B.BSNature From(Select SrNo, MasterCode3, D1 from Tran10 Where Mastercode1 = " + SeriesCode + " And Mastercode2 = " + Code + " And Vchtype = " + Vchtype + ") A Left Join (Select Name, Code,0 as D1,I1 AS BSType ,IIF(I1 = 1, 'Additive', IIF(i1 <> 1, 'Subtractive')) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,IIF(I2 = 1, 'Percentage', IIF(I2 = 0, 'Absoulte Amt', IIF(I2 = 2, 'Per Main Qty', IIF(I2 = 3, 'Per Alt Qty')))) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9) B On A.MasterCode3 = B.Code Order By A.SrNo";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select B.Code,B.Name,B.D1,B.BSType,B.BSTypeName,A.D1 as BSPercent,B.CalBasis,B.CalBasisName,B.AppliedOn,B.BSNature From(Select SrNo, MasterCode3, D1 from Tran10 Where Mastercode1 = " + SeriesCode + " And Mastercode2 = " + Code + " And Vchtype = " + Vchtype + ") A Left Join (Select Name, Code, 0 as D1, I1 BSType, (case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9) B On A.MasterCode3 = B.Code Order By A.SrNo";
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    //if (Provider == 1)
        //                    //{
        //                    //    queryStr = "Select Name,Code,I1 BSType ,(case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
        //                    //    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    //}
        //                    //else
        //                    //{
        //                    //    queryStr = "Select Name,Code,I1 BSType ,(case when I1 = 1 then 'Additive' else 'Subtractive' end) as BSTypeName ,D2 as BSPercent, I2 As  CalBasis,(case when I2 = 1 then 'Percentage' When I2 = 0 then 'Absoulte Amt' When I2 = 2 Then 'Per Main Qty' when I2 = 3 then 'Per Alt Qty' end) as CalBasisName,I3 as AppliedOn, I5 as BSNature from Master1 where Mastertype = 9 order By Name";
        //                    //    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    //}
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            BillSundrylist lstObj = new BillSundrylist();

        //                            lstObj.Code = clsMain.MyInt(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.BSType = clsMain.MyInt(dr1["BSType"]);
        //                            lstObj.BSTypeName = clsMain.MyString(dr1["BSTypeName"]);
        //                            lstObj.CalBasis = clsMain.MyInt(dr1["CalBasis"]);
        //                            lstObj.CalBasisName = clsMain.MyString(dr1["CalBasisName"]);
        //                            lstObj.AppliedOn = clsMain.MyInt(dr1["AppliedOn"]);
        //                            lstObj.BSNature = clsMain.MyInt(dr1["BSNature"]);
        //                            lstObj.BSAmount = 0;
        //                            lstObj.PercentOperatedOn = 0;
        //                            if (lstObj.BSNature == 51 || lstObj.BSNature == 52 || lstObj.BSNature == 53)
        //                            {
        //                                if (lstObj.BSNature == 51)
        //                                {
        //                                    if (SGST > 0) { lstObj.BSPercent = SGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
        //                                }
        //                                if (lstObj.BSNature == 52)
        //                                {
        //                                    if (CGST > 0) { lstObj.BSPercent = CGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
        //                                }
        //                                if (lstObj.BSNature == 53)
        //                                {
        //                                    if (IGST > 0) { lstObj.BSPercent = IGST; } else { lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]); }
        //                                }
        //                            }

        //                            else
        //                            {
        //                                if (lstObj.CalBasis == 0)
        //                                {
        //                                    lstObj.BSAmount = clsMain.MyDouble(dr1["BSPercent"]);
        //                                }
        //                                else
        //                                {
        //                                    lstObj.BSPercent = clsMain.MyDouble(dr1["BSPercent"]);
        //                                }

        //                            }


        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            ///////////////////////////////////////////////PARDOSH///////////////////////////////////////////////////////////////////////

        //            public string GetInvStockJXML(int VchType, VchStockJ Inv, ref double InvAmount, string ConnectionString)
        //            {
        //                string XMLStr = "";
        //                double TaxableAmount = 0;
        //                int CompoundDiscount = 0;
        //            try
        //            {
        //                int SN = 0;
        //                double Disc1 = 0;
        //                double Disc2 = 0;
        //                BusyVoucher BVch = new BusyVoucher();
        //                BusyVoucher.StockJournal ORD = new BusyVoucher.StockJournal();
        //                ORD.VchSeriesName = BVch.GetMasterCodeToName(Provider, ConnectionString, Inv.SeriesCode).Replace("08", "");
        //                ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                ORD.VchType = "8";
        //                ORD.StockUpdationDate = ORD.Date;
        //                ORD.MasterName1 = BVch.GetMasterCodeToName(Provider, ConnectionString, Inv.MCCode1);
        //                ORD.MasterName2 = BVch.GetMasterCodeToName(Provider, ConnectionString, Inv.MCCode1);
        //                ORD.TranCurName = "";
        //                ORD.tmpVchCode = "0";
        //                ORD.tmpVchSeriesCode = clsMain.MyString(Inv.SeriesCode);

        //                ORD.ItemEntries1 = new List<BusyVoucher.ItemDetail>();

        //                int SrNo = 1000;
        //                int ISSrNo = 1000;
        //                BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
        //                foreach (var item in Inv.ItemDT)
        //                {

        //                    ID = new BusyVoucher.ItemDetail();
        //                    SrNo = SrNo + 1;
        //                    SN = SrNo;
        //                    ID.SrNo = SrNo;
        //                    ID.VchType = 8;
        //                    ID.Date = ORD.Date;
        //                    ID.VchNo = ORD.VchNo;
        //                    ID.ItemName = item.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));
        //                    ID.ConFactor = 1;
        //                    ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 2);
        //                    ID.Qty = clsMain.MyDouble(item.Qty);
        //                    ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                    ID.QtyAltUnit = clsMain.MyDouble(item.Qty);
        //                    ID.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                    ID.Amt = clsMain.MyDouble(item.ListPrice * ID.Qty);
        //                    ID.Price = clsMain.MyDouble(item.Price);
        //                    ID.PriceAltUnit = 0;
        //                    if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
        //                    ID.STPercent = 0;
        //                    ID.STPercent1 = 0;
        //                    ID.STAmount = 0;
        //                    InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);
        //                    ID.TmpVchCode = 0;
        //                    ID.MC = ORD.MasterName2;
        //                    ID.AF = item.IRemarks;
        //                    ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                    ID.ItemDescInfo.Description1 = item.IDescription1;
        //                    ID.ItemDescInfo.Description2 = item.IDescription2;
        //                    ID.ItemDescInfo.Description3 = item.IDescription3;
        //                    ID.ItemDescInfo.Description4 = item.IDescription4;
        //                    ID.ItemDescInfo.tmpSrNo = SrNo;
        //                    ID.ParamStockEntries = new List<BusyVoucher.ParamStockDetails>();
        //                    ISSrNo = 0;
        //                    foreach (var itemParamDT in item.ItemParamDT)
        //                    {
        //                        ISSrNo = ISSrNo + 1;
        //                        BusyVoucher.ParamStockDetails paramdt = new BusyVoucher.ParamStockDetails();
        //                        paramdt.ItemCode = clsMain.MyString(item.ItemCode);
        //                        paramdt.MCCode = clsMain.MyString(Inv.MCCode1);
        //                        paramdt.VchItemGridSN = clsMain.MyString(ID.SrNo);
        //                        paramdt.SrNo = clsMain.MyString(ISSrNo);
        //                        paramdt.Param1 = itemParamDT.Param1;
        //                        paramdt.Param2 = itemParamDT.Param2;
        //                        paramdt.BCN = itemParamDT.BCN;
        //                        paramdt.MainQty = clsMain.MyString(itemParamDT.Qty);
        //                        paramdt.BCNMode = "1";
        //                        ID.ParamStockEntries.Add(paramdt);
        //                    }
        //                    ORD.ItemEntries1.Add(ID);
        //                }
        //                ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
        //                BusyVoucher.ItemDetail ID2 = new BusyVoucher.ItemDetail();
        //                int SrNo1 = 0;
        //                int ISSrNo1 = 0;
        //                double TQty = 0;
        //                foreach (var item in Inv.Halfitemdt)
        //                {
        //                    ID2 = new BusyVoucher.ItemDetail();
        //                    SrNo = SrNo1 + 1;
        //                    SN = SrNo;
        //                    ID2.SrNo = SrNo;
        //                    ID2.VchType = 8;
        //                    ID2.Date = ORD.Date;
        //                    ID2.VchNo = ORD.VchNo;
        //                    ID2.ItemName = item.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));
        //                    ID2.ConFactor = 1;
        //                    ID2.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 2);
        //                                       ID2.ParamStockEntries = new List<BusyVoucher.ParamStockDetails>();
        //                    ISSrNo1 = 0;
        //                    foreach (var itemParamDT in item.ItemParamDT)
        //                    {
        //                        ISSrNo1 = ISSrNo1 + 1;
        //                        BusyVoucher.ParamStockDetails paramdt = new BusyVoucher.ParamStockDetails();
        //                        paramdt.ItemCode = clsMain.MyString(item.ItemCode);
        //                        paramdt.MCCode = clsMain.MyString(Inv.MCCode1);
        //                        paramdt.VchItemGridSN = clsMain.MyString(ID2.SrNo);
        //                        paramdt.SrNo = clsMain.MyString(ISSrNo1);
        //                        paramdt.Param1 = itemParamDT.Param1;
        //                        paramdt.Param2 = itemParamDT.Param2;
        //                        paramdt.MainQty = clsMain.MyString(itemParamDT.Qty);
        //                        TQty = TQty + clsMain.MyDouble(itemParamDT.Qty);
        //                        paramdt.BCNMode = "1";
        //                        ID2.ParamStockEntries.Add(paramdt);
        //                    }
        //                    item.Qty = TQty;
        //                    ID2.Qty = clsMain.MyDouble(item.Qty);
        //                    ID2.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                    ID2.QtyAltUnit = clsMain.MyDouble(item.Qty);
        //                    ID2.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                    ID2.Amt = clsMain.MyDouble(item.ListPrice * ID2.Qty);
        //                    ID2.Price = clsMain.MyDouble(item.Price);
        //                    ID2.PriceAltUnit = 0;
        //                    if (ID2.QtyAltUnit != 0) { ID2.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID2.Amt) / clsMain.MyDouble(ID2.QtyAltUnit)).ToString("0.00")); }
        //                    ID2.STPercent = 0;
        //                    ID2.STPercent1 = 0;
        //                    ID2.STAmount = 0;
        //                    InvAmount = InvAmount + clsMain.MyDouble(ID2.Amt);
        //                    ID2.TmpVchCode = 0;
        //                    ID2.MC = ORD.MasterName2;
        //                    ID2.AF = item.IRemarks;
        //                    ID2.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                    ID2.ItemDescInfo.Description1 = item.IDescription1;
        //                    ID2.ItemDescInfo.Description2 = item.IDescription2;
        //                    ID2.ItemDescInfo.Description3 = item.IDescription3;
        //                    ID2.ItemDescInfo.Description4 = item.IDescription4;
        //                    ID2.ItemDescInfo.tmpSrNo = SrNo;


        //                    ORD.ItemEntries.Add(ID2);
        //                }


        //                BusyVoucher.ItemDetail ID1 = new BusyVoucher.ItemDetail();
        //                foreach (var item1 in Inv.ItemDT1)
        //                {
        //                    ID1 = new BusyVoucher.ItemDetail();
        //                    SrNo = SrNo1 + 1;
        //                    ID1.SrNo = SrNo;
        //                    ID1.VchType = 8;
        //                    ID1.Date = ORD.Date;
        //                    ID1.VchNo = ORD.VchNo;
        //                    ID1.ItemName = item1.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));
        //                    ID1.ConFactor = 1;
        //                    ID1.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item1.ItemCode), 2);
        //                    ID1.Qty = clsMain.MyDouble(item1.Qty);
        //                    ID1.QtyMainUnit = clsMain.MyDouble(item1.Qty);
        //                    ID1.QtyAltUnit = clsMain.MyDouble(item1.AltQty);
        //                    ID1.ListPrice = clsMain.MyDouble(item1.ListPrice);
        //                    ID1.ConFactor = clsMain.MyDouble(item1.ConFactor);
        //                    ID1.Amt = clsMain.MyDouble(item1.ListPrice * ID1.Qty);
        //                    ID1.Price = clsMain.MyDouble(item1.Price);
        //                    ID1.PriceAltUnit = 0;
        //                    if (ID1.QtyAltUnit != 0) { ID1.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID1.Amt) / clsMain.MyDouble(ID1.QtyAltUnit)).ToString("0.00")); }
        //                    ID1.STPercent = 0;
        //                    ID1.STPercent1 = 0;
        //                    ID1.STAmount = 0;
        //                    InvAmount = InvAmount + clsMain.MyDouble(ID1.Amt);
        //                    ID1.TmpVchCode = 0;
        //                    ID1.MC = ORD.MasterName1;
        //                    ID1.AF = item1.IRemarks;
        //                    ID1.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                    ID1.ItemDescInfo.Description1 = item1.IDescription1;
        //                    ID1.ItemDescInfo.Description2 = item1.IDescription2;
        //                    ID1.ItemDescInfo.Description3 = item1.IDescription3;
        //                    ID1.ItemDescInfo.Description4 = item1.IDescription4;
        //                    ID1.ItemDescInfo.tmpSrNo = SrNo;
        //                    ID1.ParamStockEntries = new List<BusyVoucher.ParamStockDetails>();
        //                    ISSrNo1 = 0;
        //                    foreach (var itemParamDT in item1.ItemParamDT)
        //                    {
        //                        ISSrNo1 = ISSrNo1 + 1;
        //                        BusyVoucher.ParamStockDetails paramdt = new BusyVoucher.ParamStockDetails();
        //                        paramdt.ItemCode = clsMain.MyString(item1.ItemCode);
        //                        paramdt.MCCode = clsMain.MyString(Inv.MCCode1);
        //                        paramdt.VchItemGridSN = clsMain.MyString(ID1.SrNo);
        //                        paramdt.SrNo = clsMain.MyString(ISSrNo1);
        //                        paramdt.Param1 = itemParamDT.Param1;
        //                        paramdt.Param2 = itemParamDT.Param2;
        //                        paramdt.MainQty = clsMain.MyString(itemParamDT.Qty);
        //                        paramdt.BCNMode = "1";
        //                        ID1.ParamStockEntries.Add(paramdt);
        //                    }
        //                    ORD.ItemEntries.Add(ID1);

        //                }
        //                BusyVoucher.ItemDetail ID3 = new BusyVoucher.ItemDetail();
        //                if (Inv.ScrabQty > 0)
        //                {
        //                    int ItemCode =GetScreabItem(ConnectionString);
        //                    ID3 = new BusyVoucher.ItemDetail();
        //                    SrNo = SrNo1 + 1;
        //                    ItemCode = GetScreabItem(ConnectionString);
        //                    double Qty = Inv.ScrabQty;
        //                    ID3.SrNo = SrNo;
        //                    ID3.VchType = 8;
        //                    ID3.Date = ORD.Date;
        //                    ID3.VchNo = ORD.VchNo;
        //                    ID3.ItemName = BVch.GetMasterCodeToName(Provider, ConnectionString, ItemCode);
        //                    ID3.ConFactor = 1;
        //                    ID3.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, ItemCode, 2);
        //                    ID3.Qty = clsMain.MyDouble(Qty);
        //                    ID3.QtyMainUnit = clsMain.MyDouble(Qty);
        //                    ID3.QtyAltUnit = clsMain.MyDouble(Qty);
        //                    ID3.ListPrice = 0;
        //                    ID3.ConFactor = 1;
        //                    ID3.Amt = clsMain.MyDouble(ID3.ListPrice * Qty);
        //                    ID3.Price = 0;
        //                    ID3.PriceAltUnit = 0;
        //                    if (ID3.QtyAltUnit != 0) { ID3.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID3.Amt) / clsMain.MyDouble(ID3.QtyAltUnit)).ToString("0.00")); }
        //                    ID3.STPercent = 0;
        //                    ID3.STPercent1 = 0;
        //                    ID3.STAmount = 0;
        //                    InvAmount = InvAmount + clsMain.MyDouble(ID3.Amt);
        //                    ID3.TmpVchCode = 0;
        //                    ID3.MC = ORD.MasterName1;
        //                    ORD.ItemEntries.Add(ID3);
        //                }




        //                XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return XMLStr;
        //            }
        //            [HttpPost]
        //            public AlertOrder SaveInvoiceSTOCKJAuto(int VchType, VchStockJ Inv, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();
        //                List<AlertOrder> objResult1 = new List<AlertOrder>();
        //                string MSG = "";
        //                int Status = 0;
        //                object VchCode = 0;

        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    CFixedInterface FI = new CFixedInterface();
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string XMLStr = "";

        //                    double InvAmount = 0;

        //                    VchStockJ NewInv = Inv;
        //                    if (VchType == 8) { XMLStr = GetInvStockJXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    bool Connect = false;
        //                    FI.CloseDB();

        //                    if (Provider == 1)
        //                    {
        //                        Connect = FI.OpenDBForYear(BusyPath, BusyDataPath, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    else
        //                    {
        //                        Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    if (Connect == true)
        //                    {
        //                        object Err = "";
        //                        bool Return = FI.SaveVchFromXML(VchType, XMLStr, ref Err, false, 0, ref VchCode);
        //                        if (Return == true)
        //                        {
        //                            UpdateJobIdDetails(clsMain.MyInt(VchCode), ConnectionString);
        //                            MSG = "Success";
        //                            Status = 1;
        //                        }
        //                        else
        //                        {
        //                            MSG = Err.ToString();
        //                            Status = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MSG = "Unable To Connect To Company";
        //                        Status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Sucess = 0;
        //                    objResult.Message = EX.Message.ToString();
        //                    objResult.OrderId = 0;
        //                    return objResult;
        //                }

        //                objResult.Sucess = Status;
        //                objResult.Message = MSG;
        //                objResult.OrderId = clsMain.MyInt(VchCode);
        //                return objResult;
        //            }

        //        public void UpdateJobIdDetails(int VchCode ,string ConnectionString)
        //        {
        //            try
        //            {

        //                string sql = "";
        //                int R = 0;
        //                DataTable table = new DataTable();

        //                sql = "Select Im.BCN,T2.ShortNar from Tran2 t2 left join ItemParamDet IM on t2.VchCode = Im.VchCode and t2.SrNo = im.VchItemSN Where T2.vchcode =" + VchCode + " and Len(ShortNar)>0";
        //                table = new SQLHELPER(ConnectionString).getTable(sql);
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr1 in table.Rows)
        //                    {
        //                        sql = "Update ESPTaskDetail Set [BCN] = '" + clsMain.MyString(dr1["BCN"]) + "',Status = 2,CompleteOn = '" + DateTime.Now.ToString("dd/MMM/yyyy") + "',BusyVchCode ='" + VchCode + "' Where OrderId = '" + clsMain.MyString(dr1["ShortNar"]) + "' and Squence  = 1";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        sql = "Update ESPTaskDetail Set [BCN] = '" + clsMain.MyString(dr1["BCN"]) + "',Status = 1 Where OrderId = '" + clsMain.MyString(dr1["ShortNar"]) + "' and Squence  = 2";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        }
        //                }
        //            }
        //            catch
        //            {

        //            }
        //        }

        //        [HttpGet]
        //            public dynamic GetDepartmentwiseCount(int Department, int Sts, string CompCode, string FY)
        //            {

        //                List<DepartCount> objResult = new List<DepartCount>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select Squence,Count(Squence) as NoofCount,(Case When Squence = 1 then 'Cutting' when Squence = 2 then 'Cutout'  when Squence = 3 then 'Hole'  when Squence = 4 then 'CSK'  when Squence = 5 then 'Process' when Squence = 6 then 'Polish' when Squence = 7 then 'SPLWork' when Squence = 8 then 'QC' end) as SquenceName  From ESPTaskDetail Where Department = " + Department + " And Status =" + Sts + " Group By Squence";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            DepartCount objResult1 = new DepartCount();
        //                            objResult1.Squence = clsMain.MyInt(dr1["Squence"]);
        //                            objResult1.NoofCount = clsMain.MyInt(dr1["NoofCount"]);
        //                            objResult1.SquenceName = clsMain.MyString(dr1["SquenceName"]);
        //                            objResult.Add(objResult1);
        //                        }

        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //                }
        //                return new { Status = 1, Msg = "Sucess", Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetDepartmentPendingItem(int Department, string CompCode, string FY)
        //            {


        //                List<PardoshMList> lst = new List<PardoshMList>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select Distinct isnull(ItemCode,0) as ItemCode,isnull(M5.Name,'') as ItemName From ESPTaskDetail T1 left join ESPRefTran T2 On t1.orderid = t2.OrderID and t1.VchNo= T2.Vchno Left Join Master1 M2 On T2.Size= m2.Code  Left Join Master1 M3 On T2.Type= m3.Code Left Join Master1 M4 On T2.Color= m4.Code Left Join Master1 M5 On T2.ItemCode= m5.Code Where T1.Department = " + Department + "  And T1.Status =1 And Len(M5.Name)>0";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList objResult1 = new PardoshMList();


        //                            objResult1.Name = clsMain.MyString(dr1["ItemName"]);
        //                            objResult1.Code = clsMain.MyString(dr1["ItemCode"]);


        //                            lst.Add(objResult1);
        //                        }

        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = lst };
        //                }
        //                return new { Status = 1, Msg = "Sucess", Data = lst };
        //        }
        //        [HttpGet]
        //        public dynamic GetDepartmentStatus(int Department, int Size, int squ, int Sts, string CompCode, string FY)
        //        {

        //            List<DepartmentSts> objResult = new List<DepartmentSts>();
        //            try
        //            {
        //                BusyVoucher BVch = new BusyVoucher();

        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                //if (Size > 0)
        //                //{
        //                //    queryStr = "Select Case When (len(M3.Name)>0 and len(M4.name) = 0 and len(m5.Name)=0) then CONCAt(isnull(M2.Name,''),' ',isnull(M3.Name,'')) when (len(M4.Name)>0 and len(m5.Name)=0) then CONCAt(isnull(M2.Name,''),' ',isnull(M3.Name,''),' ',isnull(M4.name,'')) else CONCAt(isnull(M2.Name,''),' ',isnull(M3.Name,''),' ',isnull(M4.name,''),' ',isnull(M5.name,'')) end as ItemName,isnull(Size,0) as Size,isnull(M2.Name,'') as SizeName,isnull(t2.Type,0) as SizeType,isnull(M3.Name,'') as SizeTypeName,isnull(T2.Color,0) as Color,isnull(M4.Name,'') as ColorName,isnull(t2.Variety,0) as Variety,isnull(M5.Name,'') as VarietyName,isnull(Taskid,0) as TaskID,isnull(T2.ProcessType,'') as ProcessType,Convert(Varchar,T1.[Date],103) as Date,isnull(T1.VchNo,'') as VchNo,isnull(T1.OrderID,'') as OrderID,isnull(T1.Width,0) as Width,isnull(T1.height,0) as height,ISNULL(M1.Name,'') as Shape,isnull(T1.Qty,0) as Qty,ISNULL(T1.Area,0) as Area,T1.Status From ESPTaskDetail T1 left join ESPMaster1 M1 On T1.shape = M1.code Left join ESPRefTran T2 On t1.orderid = t2.OrderID and t1.VchNo= T2.Vchno Left Join Master1 M2 On T2.Size= m2.Code  Left Join Master1 M3 On T2.Type= m3.Code Left Join Master1 M4 On T2.Color= m4.Code Left Join Master1 M5 On T2.Variety= m5.Code Where T1.Department = " + Department + " And T1. Squence = " + squ + " And T1.Status =" + Sts + " and T2.Size = " + Size + "";

        //                //}
        //                //else
        //                //{
        //                //    queryStr = "Select Case When (len(M3.Name)>0 and len(M4.name) = 0 and len(m5.Name)=0) then CONCAt(isnull(M2.Name,''),' ',isnull(M3.Name,'')) when (len(M4.Name)>0 and len(m5.Name)=0) then CONCAt(isnull(M2.Name,''),' ',isnull(M3.Name,''),' ',isnull(M4.name,'')) else CONCAt(isnull(M2.Name,''),' ',isnull(M3.Name,''),' ',isnull(M4.name,''),' ',isnull(M5.name,'')) end as ItemName,isnull(Size,0) as Size,isnull(M2.Name,'') as SizeName,isnull(t2.Type,0) as SizeType,isnull(M3.Name,'') as SizeTypeName,isnull(T2.Color,0) as Color,isnull(M4.Name,'') as ColorName,isnull(t2.Variety,0) as Variety,isnull(M5.Name,'') as VarietyName,isnull(Taskid,0) as TaskID,isnull(T2.ProcessType,'') as ProcessType,Convert(Varchar,T1.[Date],103) as Date,isnull(T1.VchNo,'') as VchNo,isnull(T1.OrderID,'') as OrderID,isnull(T1.Width,0) as Width,isnull(T1.height,0) as height,ISNULL(M1.Name,'') as Shape,isnull(T1.Qty,0) as Qty,ISNULL(T1.Area,0) as Area,T1.Status From ESPTaskDetail T1 left join ESPMaster1 M1 On T1.shape = M1.code Left join ESPRefTran T2 On t1.orderid = t2.OrderID and t1.VchNo= T2.Vchno Left Join Master1 M2 On T2.Size= m2.Code  Left Join Master1 M3 On T2.Type= m3.Code Left Join Master1 M4 On T2.Color= m4.Code Left Join Master1 M5 On T2.Variety= m5.Code Where T1.Department = " + Department + " And T1. Squence = " + squ + " And T1.Status =" + Sts + "";

        //                //}
        //                if (Size > 0)
        //                {
        //                    queryStr = "Select t2.ItemCode,M6.Name,isnull(Size,0) as Size,isnull(M2.Name,'') as SizeName,isnull(t2.Type,0) as SizeType,isnull(M3.Name,'') as SizeTypeName,isnull(T2.Color,0) as Color,isnull(M4.Name,'') as ColorName,isnull(t2.Variety,0) as Variety,isnull(M5.Name,'') as VarietyName,isnull(Taskid,0) as TaskID,isnull(T2.ProcessType,'') as ProcessType,Convert(Varchar,T1.[Date],103) as Date,isnull(T1.VchNo,'') as VchNo,isnull(T1.OrderID,'') as OrderID,isnull(T1.Width,0) as Width,isnull(T1.height,0) as height,ISNULL(M1.Name,'') as Shape,isnull(T1.Qty,0) as Qty,ISNULL(T1.Area,0) as Area,T1.Status From ESPTaskDetail T1 left join ESPMaster1 M1 On T1.shape = M1.code Left join ESPRefTran T2 On t1.orderid = t2.OrderID and t1.VchNo= T2.Vchno Left Join Master1 M2 On T2.Size= m2.Code  Left Join Master1 M3 On T2.Type= m3.Code Left Join Master1 M4 On T2.Color= m4.Code Left Join Master1 M5 On T2.Variety= m5.Code Left Join Master1 M6 On T2.ItemCode = M6.Code Where T1.Department = " + Department + " And T1. Squence = " + squ + " And T1.Status =" + Sts + " and T2.ItemCode = " + Size + " AND LEN(m6.nAME)>0";

        //                }
        //                else
        //                {
        //                    queryStr = "Select t2.ItemCode,M6.Name,isnull(Size,0) as Size,isnull(M2.Name,'') as SizeName,isnull(t2.Type,0) as SizeType,isnull(M3.Name,'') as SizeTypeName,isnull(T2.Color,0) as Color,isnull(M4.Name,'') as ColorName,isnull(t2.Variety,0) as Variety,isnull(M5.Name,'') as VarietyName,isnull(Taskid,0) as TaskID,isnull(T2.ProcessType,'') as ProcessType,Convert(Varchar,T1.[Date],103) as Date,isnull(T1.VchNo,'') as VchNo,isnull(T1.OrderID,'') as OrderID,isnull(T1.Width,0) as Width,isnull(T1.height,0) as height,ISNULL(M1.Name,'') as Shape,isnull(T1.Qty,0) as Qty,ISNULL(T1.Area,0) as Area,T1.Status From ESPTaskDetail T1 left join ESPMaster1 M1 On T1.shape = M1.code Left join ESPRefTran T2 On t1.orderid = t2.OrderID and t1.VchNo= T2.Vchno Left Join Master1 M2 On T2.Size= m2.Code  Left Join Master1 M3 On T2.Type= m3.Code Left Join Master1 M4 On T2.Color= m4.Code Left Join Master1 M5 On T2.Variety= m5.Code Left Join Master1 M6 On T2.ItemCode = M6.Code Where T1.Department = " + Department + " And T1. Squence = " + squ + " And T1.Status =" + Sts + " AND LEN(m6.nAME)>0";

        //                }
        //               table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr1 in table.Rows)
        //                    {
        //                        DepartmentSts objResult1 = new DepartmentSts();
        //                        objResult1.Size = clsMain.MyString(dr1["SizeName"]);
        //                        objResult1.Type = clsMain.MyString(dr1["SizeTypeName"]);
        //                        objResult1.Color = clsMain.MyString(dr1["ColorName"]);
        //                        objResult1.Variety = clsMain.MyString(dr1["VarietyName"]);
        //                        objResult1.ItemName = clsMain.MyString(dr1["Name"]).Trim();
        //                        objResult1.ItemCode = clsMain.MyInt(dr1["ItemCode"]);
        //                        objResult1.Unit = BVch.GetItemMainUnitName(Provider, ConnectionString, objResult1.ItemCode, 1);
        //                        objResult1.TaskID = clsMain.MyInt(dr1["TaskID"]);
        //                        objResult1.ProcessType = clsMain.MyString(dr1["ProcessType"]);
        //                        objResult1.Date = clsMain.MyString(dr1["Date"]);
        //                        objResult1.VchNo = clsMain.MyString(dr1["VchNo"]);
        //                        objResult1.OrderId = clsMain.MyString(dr1["OrderID"]);
        //                        objResult1.Shape = clsMain.MyString(dr1["Shape"]);
        //                        objResult1.Width = clsMain.MyDouble(dr1["Width"]);
        //                        objResult1.Height = clsMain.MyDouble(dr1["height"]);
        //                        objResult1.Qty = clsMain.MyDouble(dr1["Qty"]);
        //                        objResult1.Area = clsMain.MyDouble(dr1["Area"]);
        //                        objResult1.Status = clsMain.MyDouble(dr1["Status"]);
        //                        objResult.Add(objResult1);
        //                    }

        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //            }
        //            return new { Status = 1, Msg = "Sucess", Data = objResult };
        //        }
        //        [HttpGet]
        //        public dynamic GetJobIdDetails(string JobId, int squ, string CompCode, string FY)
        //        {

        //            List<DepartmentSts> objResult = new List<DepartmentSts>();
        //            try
        //            {
        //                BusyVoucher BVch = new BusyVoucher();

        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();

        //                queryStr = "Select t2.ItemCode,M6.Name,isnull(Size,0) as Size,isnull(M2.Name,'') as SizeName,isnull(t2.Type,0) as SizeType,isnull(M3.Name,'') as SizeTypeName,isnull(T2.Color,0) as Color,isnull(M4.Name,'') as ColorName,isnull(t2.Variety,0) as Variety,isnull(M5.Name,'') as VarietyName,isnull(Taskid,0) as TaskID,isnull(T2.ProcessType,'') as ProcessType,Convert(Varchar,T1.[Date],103) as Date,isnull(T1.VchNo,'') as VchNo,isnull(T1.OrderID,'') as OrderID,isnull(T1.Width,0) as Width,isnull(T1.height,0) as height,ISNULL(M1.Name,'') as Shape,isnull(T1.Qty,0) as Qty,ISNULL(T1.Area,0) as Area,T1.Status From ESPTaskDetail T1 left join ESPMaster1 M1 On T1.shape = M1.code Left join ESPRefTran T2 On t1.orderid = t2.OrderID and t1.VchNo= T2.Vchno Left Join Master1 M2 On T2.Size= m2.Code  Left Join Master1 M3 On T2.Type= m3.Code Left Join Master1 M4 On T2.Color= m4.Code Left Join Master1 M5 On T2.Variety= m5.Code Left Join Master1 M6 On T2.ItemCode = M6.Code Where T1.OrderID = '" + JobId + "' And T1. Squence = " + squ + " And T1.Status =1";
        //                table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr1 in table.Rows)
        //                    {
        //                        DepartmentSts objResult1 = new DepartmentSts();
        //                        objResult1.Size = clsMain.MyString(dr1["SizeName"]);
        //                        objResult1.Type = clsMain.MyString(dr1["SizeTypeName"]);
        //                        objResult1.Color = clsMain.MyString(dr1["ColorName"]);
        //                        objResult1.Variety = clsMain.MyString(dr1["VarietyName"]);
        //                        objResult1.ItemName = clsMain.MyString(dr1["Name"]).Trim();
        //                        objResult1.ItemCode = clsMain.MyInt(dr1["ItemCode"]);
        //                        objResult1.Unit = BVch.GetItemMainUnitName(Provider, ConnectionString, objResult1.ItemCode, 1);
        //                        objResult1.TaskID = clsMain.MyInt(dr1["TaskID"]);
        //                        objResult1.ProcessType = clsMain.MyString(dr1["ProcessType"]);
        //                        objResult1.Date = clsMain.MyString(dr1["Date"]);
        //                        objResult1.VchNo = clsMain.MyString(dr1["VchNo"]);
        //                        objResult1.OrderId = clsMain.MyString(dr1["OrderID"]);
        //                        objResult1.Shape = clsMain.MyString(dr1["Shape"]);
        //                        objResult1.Width = clsMain.MyDouble(dr1["Width"]);
        //                        objResult1.Height = clsMain.MyDouble(dr1["height"]);
        //                        objResult1.Qty = clsMain.MyDouble(dr1["Qty"]);
        //                        objResult1.Area = clsMain.MyDouble(dr1["Area"]);
        //                        objResult1.Status = clsMain.MyDouble(dr1["Status"]);
        //                        objResult.Add(objResult1);
        //                    }

        //                }
        //            }
        //            catch (Exception EX)
        //            {
        //                return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //            }
        //            return new { Status = 1, Msg = "Sucess", Data = objResult };
        //        }
        //        [HttpGet]
        //            public dynamic StatusUpdate(string JobId, int Squ,string PType, string CompCode, string FY)
        //            {
        //            try
        //            {
        //                int Squence = 0;
        //                string str = "";
        //                int R = 0;
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                str = "Update ESPTaskDetail Set Status = 2,CompleteOn = '" + DateTime.Now.ToString("dd/MMM/yyyy") + "' Where OrderId = '" + JobId + "' and Squence  = " + Squ + "";
        //                if (Provider == 1)
        //                {
        //                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(str);
        //                }
        //                else
        //                {
        //                    R = new SQLHELPER(ConnectionString).ExecuteSQL(str);
        //                }
        //                int Squ1 = Squ + 1;
        //                Squence = chkTaskSquence(JobId, Squ1, ConnectionString);
        //                if (Squence > 0)
        //                {
        //                    str = "Update ESPTaskDetail Set Status = 1 Where OrderId = '" + JobId + "' and Squence  = " + Squence + "";
        //                    if (Provider == 1)
        //                    {
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(str);
        //                    }
        //                    else
        //                    {
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(str);
        //                    }
        //                }
        //                else
        //                {
        //                    if (string.Equals(PType,"Single Glazing") == true)
        //                    {
        //                        str = "Update ESPTaskDetail Set Status = 3 Where OrderId = '" + JobId + "' and Squence  = " + Squ + "";

        //                    }
        //                    else if (string.Equals(PType, "Double Glazing") == true)
        //                    {
        //                       str = "Update ESPTaskDetail Set Status = 4 Where OrderId = '" + JobId + "' and Squence  = " + Squ + "";

        //                    }
        //                    else if (string.Equals(PType, "Limination Glazing") == true)
        //                    {
        //                        str = "Update ESPTaskDetail Set Status = 5 Where OrderId = '" + JobId + "' and Squence  = " + Squ + "";

        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(str);
        //                    }
        //                    else
        //                    {
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(str);
        //                    }
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                return new { Status = 1, Msg = "Failed" };
        //            }
        //                return new { Status = 1, Msg = "Sucess" };
        //            }
        //        public int chkTaskSquence(string JobId,int Squ,string Constr)
        //        {

        //            int squ = 0;
        //            string sql = "";
        //            DataTable table = new DataTable();
        //            try
        //            {
        //                sql = "Select Squence From ESPTaskDetail Where OrderId = '" + JobId + "' and Squence = " + Squ + "";

        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(Constr).getTable(sql);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(Constr).getTable(sql);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    squ = clsMain.MyInt(table.Rows[0]["Squence"]);
        //                }
        //            }
        //            catch
        //            {
        //                return 0;
        //            }
        //            return squ;
        //        }

        //        [HttpGet]
        //            public dynamic GetItemDetails(int MCCode,int ItemCode, string CompCode, string FY)
        //            {

        //                List<BCNItemDet> objResult = new List<BCNItemDet>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    string IGRP = "";
        //                    DataTable table = new DataTable();
        //                    int IGCode = GetIGCode(101,ConnectionString);
        //                    IGRP = GetAllItemSubGroups(IGCode, ConnectionString);
        //                //queryStr = "Select Im.ItemCode,isnull(M1.Name,'') as ItemName,isnull(Im.C1,0) as Width,Im.C2 as Height,Sum(IM.Value1) as Qty From ItemParamDet IM Left join Master1 M1 on  IM.ItemCode = M1.Code Where itemCode =" + ItemCode + " Group by IM.ItemCode,M1.Name,Im.C1,Im.C2 Having Sum(Im.Value1)>0.001";
        //                // queryStr = "select Count(A.BCN) as Count,A.ItemName,A.ItemCode,A.Width,A.height,Sum(A.Qty) as Qty From(Select Im.BCN,Im.ItemCode,isnull(M1.Name, '') as ItemName,isnull(Im.C1, 0) as Width,Im.C2 as Height,Sum(IM.Value1) as Qty From ItemParamDet IM Left join Master1 M1 on  IM.ItemCode = M1.Code Where IM.ItemCode = " + ItemCode + " and M1.ParentGrp  in(" + IGRP + ")  And MCCode = " + MCCode + "  Group by IM.ItemCode,M1.Name,Im.C1,Im.C2,Im.BCN Having Sum(Im.Value1) > 0.001) A Group by A.ItemName,A.Width,A.height,A.ItemCode";
        //                queryStr = "Select Im.BCN,Im.ItemCode,isnull(M1.Name, '') as ItemName,isnull(Im.C1, 0) as Width,Im.C2 as Height,Sum(IM.Value1) as Qty From ItemParamDet IM Left join Master1 M1 on  IM.ItemCode = M1.Code Where IM.ItemCode = " + ItemCode + " and M1.ParentGrp  in(" + IGRP + ")  And MCCode = " + MCCode + "  Group by IM.ItemCode,M1.Name,Im.C1,Im.C2,Im.BCN Having Sum(Im.Value1) > 0.001";
        //                table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            BCNItemDet objResult1 = new BCNItemDet();
        //                            objResult1.BCN = clsMain.MyString(dr1["BCN"]);
        //                            objResult1.ItemCode = clsMain.MyInt(dr1["ItemCode"]);
        //                            objResult1.ItemName = clsMain.MyString(dr1["ItemName"]);
        //                            objResult1.Qty = clsMain.MyDouble(dr1["Qty"]);
        //                            objResult1.Height = clsMain.MyString(dr1["Height"]);
        //                            objResult1.Width = clsMain.MyString(dr1["Width"]);
        //                            objResult.Add(objResult1);
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //                }
        //                return new { Status = 1, Msg = "Sucess", Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetBCNWiseItem(string BCN, int MCCode, string CompCode, string FY)
        //            {

        //                List<BCNItemDet> objResult = new List<BCNItemDet>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select IM.ItemCode as ItemCode,M1.Name,IM.C1 as Size ,IM.C2 as Color,Sum(IM.Value1) as Qty from ItemParamDet IM left join Master1 M1 on IM.ItemCode = M1.Code where BCN = '" + BCN + "' And MCCode =" + MCCode + " Group by IM.ItemCode,M1.Name,IM.C1,IM.C2 Having Sum(IM.Value1) >= 0.01 Order by M1.Name";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        BCNItemDet objResult1 = new BCNItemDet();
        //                        objResult1.ItemCode = clsMain.MyInt(table.Rows[0]["ItemCode"]);
        //                        objResult1.ItemName = clsMain.MyString(table.Rows[0]["Name"]);
        //                        objResult1.Qty = clsMain.MyDouble(table.Rows[0]["Qty"]);
        //                        objResult1.Height = clsMain.MyString(table.Rows[0]["Size"]);
        //                        objResult1.Width = clsMain.MyString(table.Rows[0]["Color"]);
        //                        objResult.Add(objResult1);
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //                }
        //                return new { Status = 1, Msg = "Sucess", Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetDepartmentCount(int Department, string CompCode, string FY)
        //            {

        //                DepartmentCount objResult = new DepartmentCount();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select Department,(Select COUNT(Taskid) as Pending From  ESPTaskDetail where Department = " + Department + " and status = 1) as Pending,(Select COUNT(Taskid) as Pending From  ESPTaskDetail where Department = " + Department + " and status = 0) as UpComing,(Select COUNT(Taskid) as Pending From  ESPTaskDetail where Department = " + Department + " and status = 2) as complete From ESPTaskDetail where Department = " + Department + " Group by Department";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        objResult.Department = clsMain.MyInt(table.Rows[0]["Department"]);
        //                        objResult.Pending = clsMain.MyInt(table.Rows[0]["Pending"]);
        //                        objResult.Upcoming = clsMain.MyInt(table.Rows[0]["UpComing"]);
        //                        objResult.Complete = clsMain.MyInt(table.Rows[0]["complete"]);
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //                }
        //                return new { Status = 1, Msg = "Sucess", Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetEmployeeLogin(string UserId, string Password, string CompCode, string FY)
        //            {
        //                string msg = "";
        //                int status = 0;
        //                Employee objResult = new Employee();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select M11.Brand as MCCode,M1.Code,M1.Name,M2.Mobile,M2.OF1 as Department,M3.Name as DepartmentName From Master1 M1 Left Join MasterAddressInfo M2 On M1.Code = M2.MasterCode Left Join Master1 M3 On cast((Case When Isnumeric(IsNull(M2.OF1,'0')) = 1 then M2.OF1 else 0 end) as Int) = M3.Code Left Join ESPMaster1 M11 On cast((Case When Isnumeric(IsNull(M2.OF1,'0')) = 1 then M2.OF1 else 0 end) as Int) =M11.GlassSize Where M1.Mastertype =27 And M2.Mobile = '" + UserId + "' and M2.OF2 = '" + Password + "'";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        objResult.Code = clsMain.MyInt(table.Rows[0]["Code"]);
        //                        objResult.Name = clsMain.MyString(table.Rows[0]["Name"]);
        //                        objResult.Mobile = clsMain.MyString(table.Rows[0]["Mobile"]);
        //                        objResult.Department = clsMain.MyInt(table.Rows[0]["Department"]);
        //                        objResult.DepartmentName = clsMain.MyString(table.Rows[0]["DepartmentName"]);
        //                        objResult.MCCode = clsMain.MyInt(table.Rows[0]["MCCode"]);

        //                    msg = "Sucess";
        //                        status = 1;
        //                    }
        //                    else
        //                    {
        //                        msg = "Invalid Userid & PassWord ... !";
        //                        status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = objResult };
        //                }
        //                return new { Status = status, Msg = msg, Data = objResult };
        //            }
        //            [HttpGet]
        //            public dynamic GetPSaleOrder(int AccCode, string SDate, string EDate, string CompCode, string FY)
        //            {
        //                List<PSaleOrde> lst = new List<PSaleOrde>();

        //                try
        //                {
        //                    string queryStr = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable table = new DataTable();
        //                    if (AccCode == 0)
        //                    {
        //                        queryStr = "Select isnull(M1.Name,'') as Name,Case When Approve = 0 Then 'Pending' When Approve = 1 Then 'Approve' When Approve = 2 Then 'Reject' When Approve = 3 Then 'Hold' When Approve = 4 Then 'Enquiry' When Approve = 5 Then 'Pymt Pending' When Approve = 6 Then 'Pymt Approve' When Approve = 7 Then 'Pymt Reject' end Status ,T1.Code,Date,VchNo,PartyCode,Case When OrderType = 1 then 'Advance' When OrderType = 2 then 'Partial Advance' Else 'Credit' end OrderType,Qty,Area,NetAmount as Amount From ESPTran1 T1 Left Join Master1 M1 On T1.PartyCode = M1.Code Where Date >= '" + SDate + "' And Date <= '" + EDate + "' order By VchNo";

        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select isnull(M1.Name,'') as Name,Case When Approve = 0 Then 'Pending' When Approve = 1 Then 'Approve' When Approve = 2 Then 'Reject' When Approve = 3 Then 'Hold' When Approve = 4 Then 'Enquiry' When Approve = 5 Then 'Pymt Pending' When Approve = 6 Then 'Pymt Approve' When Approve = 7 Then 'Pymt Reject' end Status ,T1.Code,Date,VchNo,PartyCode,Case When OrderType = 1 then 'Advance' When OrderType = 2 then 'Partial Advance' Else 'Credit' end OrderType,Qty,Area,NetAmount as Amount From ESPTran1 T1 Left Join Master1 M1 On T1.PartyCode = M1.Code Where PartyCode = " + AccCode + " And Date >= '" + SDate + "' And Date <= '" + EDate + "' order By VchNo";

        //                    }
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PSaleOrde lstObj = new PSaleOrde();

        //                            lstObj.VCode = clsMain.MyInt(dr1["Code"]);
        //                            lstObj.PartyName = clsMain.MyString(dr1["Name"]);
        //                            lstObj.OrderType = clsMain.MyString(dr1["OrderType"]);
        //                            lstObj.Status = clsMain.MyString(dr1["Status"]);
        //                            lstObj.Date = clsMain.MyString(dr1["Date"]);
        //                            lstObj.VchNo = clsMain.MyString(dr1["VchNo"]);
        //                            lstObj.Qty = clsMain.MyDouble(dr1["Qty"]);
        //                            lstObj.Area = clsMain.MyDouble(dr1["Area"]);
        //                            lstObj.Amount = clsMain.MyDouble(dr1["Amount"]);
        //                            lst.Add(lstObj);
        //                        }

        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = lst };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = lst };
        //            }
        //            [HttpGet]
        //            public dynamic GetPOrderWiseRpt(int VCode, string CompCode, string FY)
        //            {
        //                List<SaleOrdeWiseDet> lst = new List<SaleOrdeWiseDet>();

        //                try
        //                {
        //                    string queryStr = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select isnull(T2.Area,0) as Area,ISNULL(ProcessType,'') as ProcessType,ISNULL(M1.Name,'') as Size,ISNULL(M2.Name,'') as Type,ISNULL(M3.Name,'') as Color,ISNULL(M4.Name,'') as Variety,ISNULL(PM.Name,'') as Shape,isnull(Width,0) as Width,isnull(Height,0) as height,isnull(PM1.Name,'') as Chargeable,ISNULL(T2.Qty,0) as Qty,ISNULL(T2.Area,0) as Area,ISNULL(T2.Price,0) as Price,ISNULL(T2.CskQty,0) as CskQty,ISNULL(T2.CutOutQty,0) as CutOutQty,ISNULL(T2.Holeqty,0) as HoleQty,ISNULL(T2.FinalAmount,0) as FinalAmt,ISNULL(M5.Name,'') as Proces,ISNULL(M6.Name,'') as Polish,ISNULL(M7.Name,'') as SPLWork From ESPTran2 T2 Left Join Master1 M1 On T2.Size = M1.Code Left Join Master1 M2 On T2.Type = M2.Code Left Join Master1 M3 On T2.Color = M3.Code Left Join Master1 M4 On T2.Variety = M4.Code Left Join ESPMaster1 PM On T2.Shape = PM.Code Left Join ESPMaster1 PM1 On T2.Chargeable = PM1.Code Left Join Master1 M5 On T2.Proces = M5.Code Left Join Master1 M6 On T2.Polish = M6.Code Left Join Master1 M7 On T2.SplWork = M7.Code  Where Vchcode = " + VCode + "";
        //                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            SaleOrdeWiseDet lstObj = new SaleOrdeWiseDet();

        //                            lstObj.ProcesType = clsMain.MyString(dr1["ProcessType"]);
        //                            lstObj.Size = clsMain.MyString(dr1["Size"]);
        //                            lstObj.Type = clsMain.MyString(dr1["Type"]);
        //                            lstObj.Color = clsMain.MyString(dr1["Color"]);
        //                            lstObj.Variety = clsMain.MyString(dr1["Variety"]);
        //                            lstObj.Shape = clsMain.MyString(dr1["Shape"]);
        //                            lstObj.Chargeable = clsMain.MyString(dr1["Chargeable"]);
        //                            lstObj.Width = clsMain.MyDouble(dr1["Width"]);
        //                            lstObj.Height = clsMain.MyDouble(dr1["Height"]);
        //                            lstObj.Qty = clsMain.MyDouble(dr1["Qty"]);
        //                            lstObj.CSKQty = clsMain.MyDouble(dr1["CSKQty"]);
        //                            lstObj.HoleQty = clsMain.MyDouble(dr1["HoleQty"]);
        //                            lstObj.CutoutQty = clsMain.MyDouble(dr1["CutoutQty"]);
        //                            lstObj.FinalAmt = clsMain.MyDouble(dr1["FinalAmt"]);
        //                            lstObj.Area = clsMain.MyDouble(dr1["Area"]);
        //                            lstObj.Proces = clsMain.MyString(dr1["Variety"]);
        //                            lstObj.Polish = clsMain.MyString(dr1["Polish"]);
        //                            lstObj.SPLWork = clsMain.MyString(dr1["SPLWork"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = lst };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = lst };
        //            }
        //            [HttpGet]
        //            public dynamic GetBusyItemMaster(int TranType, string CompCode, string FY)
        //            {
        //                List<PardoshItemList> lst = new List<PardoshItemList>();
        //                string queryStr = "";
        //                int IGCode = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    DataTable table = new DataTable();
        //                    if (TranType == 1)
        //                    {
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 Order By Name";
        //                    }
        //                    else if (TranType == 2)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 and M1.ParentGrp in(" + IGCode + ") Order By Name";
        //                    }
        //                    else if (TranType == 3)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 and M1.ParentGrp in(" + IGCode + ") Order By Name";
        //                    }
        //                    else if (TranType == 4)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 and M1.ParentGrp in(" + IGCode + ") Order By Name";
        //                    }
        //                    else if (TranType == 5)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 and M1.ParentGrp in(" + IGCode + ") Order By Name";
        //                    }
        //                    else if (TranType == 6)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 and M1.ParentGrp in(" + IGCode + ") Order By Name";
        //                    }
        //                    else if (TranType == 7)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select Code,Name,'' as Unit,0 as Price from Master1 Where MasterType =5 And Parentgrp = " + IGCode + "";

        //                    }
        //                    else if (TranType == 8)
        //                    {
        //                        queryStr = "Select M.Code,M.Name,M2.Name as Unit,ISNULL(M.D3, 0) as Price From ESPIGrpConfig E left Join Master1 M on E.CSK = M.Code Left join Master1 M2 on M.CM1 = M2.Code where M.MasterType = 6";
        //                    }
        //                    else if (TranType == 9)
        //                    {
        //                        IGCode = GetIGCode(TranType, ConnectionString);
        //                        queryStr = "Select M1.Code,M1.Name,M2.Name as Unit,ISNULL(M1.D3,0) as Price From Master1 M1 Left Join Master1 M2 on M1.CM1 = M2.Code Where M1.MasterType = 6 and M1.ParentGrp in(" + IGCode + ") Order By Name";
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshItemList lstObj = new PardoshItemList();

        //                            lstObj.Code = clsMain.MyInt(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.Unit = clsMain.MyString(dr1["Unit"]);
        //                            lstObj.Price = clsMain.MyDouble(dr1["Price"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return "Erorr";
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetBusyAccountMaster(string CompCode, string FY)
        //            {
        //                List<PardoshAccountList> lst = new List<PardoshAccountList>();
        //                int IGCode = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    string PartyGrp = "";
        //                    DataTable table = new DataTable();
        //                    PartyGrp = GetAllSubGroups(116, ConnectionString);
        //                    queryStr = "Select M1.Code,M1.Name,MAI.GSTNo,MAI.Mobile,(isnull(MAI.Address1 ,'') + ' ' + isnull(MAI.Address2 ,'') + ' ' + isnull(MAI.Address3 ,'') + ' ' + isnull(MAI.Address4 ,'')) as Addr,ISNULL(MAI.ITPAN,'') as PAN,ISNULL(Email,'') as Email,ISNULL(PINCode,'') as PINCode,ISNULL(M2.Name,'') as State,isnull(MAI.StateCodeLong,0) as StateCode From Master1 M1 Left Join MasterAddressInfo MAI on M1.Code = MAI.MasterCode Left Join Master1 M2 on MAI.StateCodeLong=M2.Code Where M1.MasterType =2 And M1.ParentGrp in(" + PartyGrp + ")";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshAccountList lstObj = new PardoshAccountList();

        //                            lstObj.Code = clsMain.MyInt(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.GSTNo = clsMain.MyString(dr1["GSTNo"]);
        //                            lstObj.Mobile = clsMain.MyString(dr1["Mobile"]);
        //                            lstObj.Address = clsMain.MyString(dr1["Addr"]);
        //                            lstObj.PAN = clsMain.MyString(dr1["PAN"]);
        //                            lstObj.Email = clsMain.MyString(dr1["Email"]);
        //                            lstObj.PINCode = clsMain.MyString(dr1["PinCode"]);
        //                            lstObj.State = clsMain.MyString(dr1["State"]);
        //                            lstObj.StateCode = clsMain.MyInt(dr1["StateCode"]);
        //                            lstObj.Balance = GetLedgerBalance(clsMain.MyInt(dr1["Code"]), DateTime.Now.ToString("dd/MMM/yyyy"), ConnectionString);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetDefaultMaster(string CompCode, string FY)
        //            {
        //                List<DefaultMaster> lst = new List<DefaultMaster>();
        //                int IGCode = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select isnull(CuttingSeries,0) as SJSeries,isnull(Series,0) as Series,ISNULL(E.Thickness ,0) as ThicknessCode,ISNULL(M.Name ,'') as ThicknessName,ISNULL(E.Type ,0) as GlassTypeCode,ISNULL(M1.Name ,'') as GlassTypeName,ISNULL(E.Color, 0) as ColorCode,ISNULL(M2.Name, '') as ColorName,ISNULL(E.Variety, 0) as VarietyCode,ISNULL(M3.Name, '') as VarietyName,ISNULL(E.Chargebale, 0) as ChargebaleCode,ISNULL(M4.Name, '') as ChargebaleName,isnull(E.OrderType, 0) as OrderType,Case When E.orderType = 1 then 'Advance' When E.orderType = 2 then 'Partial Advance' When E.orderType = 3 then 'Credit' end as OrderTypeName,isnull(E.OrderType, 0) as OrderType,isnull(E.ProcessType, 0) as ProcessType,Case When E.ProcessType = 1 then 'Single Glazing' When E.ProcessType = 2 then 'Double Glazing' When E.ProcessType = 3 then 'Limination Glazing' end as ProcessTypeName,isnull(E.Brand1, 0) as Brand,isnull(M5.Name, '') as BrandName,isnull(E.ThicknessItem, 0) as ThicknessItem,isnull(M6.Name, '') as ThicknessItemName,isnull(M6.D3,0) as ThicknessItemPrice,E.Organgas,Case When E.Organgas = 1 then 'Yes' When E.Organgas = 0 then 'No' end OrganGasName, isnull(E.ProcessItem, 0) as ProcessItem,isnull(M7.Name, '') as ProcessItemName,isnull(M7.D3,0) as ProcessItemPrice,isnull(E.PolishItem, 0) as PolishItem,isnull(M8.Name, '') as PolishItemName,isnull(M8.D3,0) as PolishItemPrice,isnull(E.SPlItem, 0) as SPlItem,isnull(M9.Name, '') as SPlItemName,isnull(M9.D3,0) as SPLItemPrice From ESPIGrpConfig E Left Join Master1 M on E.Thickness = M.Code Left Join Master1 M1 on E.Type = M1.Code Left Join Master1 M2 on E.Color = M2.Code Left Join Master1 M3 on E.Variety = M3.Code Left Join Master1 M5 on E.Brand1 = M5.Code Left Join ESPMaster1 M4 On E.Chargebale = M4.Code Left Join Master1 M6 On E.ThicknessItem = M6.Code Left Join Master1 M7 On E.ProcessItem = M7.Code Left Join Master1 M8 On E.PolishItem = M8.Code Left Join Master1 M9 On E.SPlItem = M9.Code";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            DefaultMaster lstObj = new DefaultMaster();
        //                            lstObj.SJSeries = clsMain.MyInt(dr1["SJSeries"]);
        //                            lstObj.Series = clsMain.MyInt(dr1["Series"]);
        //                            lstObj.ThicknessCode = clsMain.MyInt(dr1["ThicknessCode"]);
        //                            lstObj.ThicknessName = clsMain.MyString(dr1["ThicknessName"]);
        //                            lstObj.GlassTypeCode = clsMain.MyInt(dr1["GlassTypeCode"]);
        //                            lstObj.GlassTypeName = clsMain.MyString(dr1["GlassTypeName"]);
        //                            lstObj.ColorCode = clsMain.MyInt(dr1["ColorCode"]);
        //                            lstObj.ColorName = clsMain.MyString(dr1["ColorName"]);
        //                            lstObj.VarietyCode = clsMain.MyInt(dr1["VarietyCode"]);
        //                            lstObj.VarietyName = clsMain.MyString(dr1["VarietyName"]);
        //                            lstObj.ChargeableCode = clsMain.MyInt(dr1["ChargebaleCode"]);
        //                            lstObj.ChargeableName = clsMain.MyString(dr1["ChargebaleName"]);
        //                            lstObj.OrderType = clsMain.MyInt(dr1["orderType"]);
        //                            lstObj.OrderTypeName = clsMain.MyString(dr1["OrderTypeName"]);
        //                            lstObj.ProcessType = clsMain.MyInt(dr1["ProcessType"]);
        //                            lstObj.ProcessTypeName = clsMain.MyString(dr1["ProcessTypeName"]);
        //                            lstObj.Brand = clsMain.MyInt(dr1["Brand"]);
        //                            lstObj.BrandName = clsMain.MyString(dr1["BrandName"]);
        //                            lstObj.ThicknessItem = clsMain.MyInt(dr1["ThicknessItem"]);
        //                            lstObj.ThicknessItemName = clsMain.MyString(dr1["ThicknessItemName"]);
        //                            lstObj.ThicknessItemPrice = clsMain.MyDouble(dr1["ThicknessItemPrice"]);
        //                            lstObj.ThicknessItemUnit = GetItemUnit(clsMain.MyInt(dr1["ThicknessItem"]), ConnectionString);
        //                            lstObj.Organgas = clsMain.MyInt(dr1["Organgas"]);
        //                            lstObj.OrgangasName = clsMain.MyString(dr1["OrgangasName"]);
        //                            lstObj.Process = clsMain.MyInt(dr1["ProcessItem"]);
        //                            lstObj.ProcessName = clsMain.MyString(dr1["ProcessItemName"]);
        //                            lstObj.ProcessItemPrice = clsMain.MyDouble(dr1["ProcessItemPrice"]);
        //                            lstObj.ProcessItemUnit = GetItemUnit(clsMain.MyInt(dr1["ProcessItem"]), ConnectionString);
        //                            lstObj.Polish = clsMain.MyInt(dr1["PolishItem"]);
        //                            lstObj.PolishName = clsMain.MyString(dr1["PolishItemName"]);
        //                            lstObj.PolishItemPrice = clsMain.MyDouble(dr1["PolishItemPrice"]);
        //                            lstObj.PolishItemUnit = GetItemUnit(clsMain.MyInt(dr1["PolishItem"]), ConnectionString);
        //                            lstObj.SplWork = clsMain.MyInt(dr1["SPlItem"]);
        //                            lstObj.SplWorkName = clsMain.MyString(dr1["SPlItemName"]);
        //                            lstObj.SplWorkItemPrice = clsMain.MyDouble(dr1["SPLItemPrice"]);
        //                            lstObj.SplWorkItemUnit = GetItemUnit(clsMain.MyInt(dr1["SPlItem"]), ConnectionString);
        //                            lst.Add(lstObj);
        //                        }

        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            public string GetItemUnit(int Code, string Constr)
        //            {

        //                string IUnit = "";
        //                string sql = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    sql = "Select isnull(M2.Name,'') as Unit From Master1 M1 left Join Master1 M2 on M1.CM1 = M2.Code Where M1.Code = " + Code + " and M1.Mastertype = 6";

        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(Constr).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(Constr).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        IUnit = clsMain.MyString(table.Rows[0]["Unit"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return IUnit;
        //            }
        //        public int GetScreabItem(string Constr)
        //        {

        //            int ScrapItem = 0;
        //            string sql = "";
        //            DataTable table = new DataTable();
        //            try
        //            {
        //                sql = "Select ScrapItem From ESPIGrpConfig";

        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(Constr).getTable(sql);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(Constr).getTable(sql);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    ScrapItem = clsMain.MyInt(table.Rows[0]["ScrapItem"]);
        //                }
        //            }
        //            catch
        //            {
        //                return 0;
        //            }
        //            return ScrapItem;
        //        }
        //        [HttpGet]
        //            public dynamic GetItemMasterPrice(string CompCode, string FY, string IName)
        //            {
        //                List<AccList> lst = new List<AccList>();
        //                int IGCode = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select D3 From Master1 Where name = '" + IName.Replace("'", "''") + "'";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        AccList lstObj = new AccList();
        //                        lstObj.Price = clsMain.MyDouble(table.Rows[0]["D3"]);
        //                        lst.Add(lstObj);
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetPVchno(string CompCode, string FY)
        //            {
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                int AutoVchno = 0;
        //                string Prefix = "";
        //                string Suffix = "";
        //                string PadStr = "";
        //                string GVchNo = "";
        //                DataTable table = new DataTable();
        //                try
        //                {


        //                    queryStr = "Select Max(Code) As Vch from ESPTran1";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        AutoVchno = clsMain.MyInt(table.Rows[0]["Vch"]) + 1;
        //                    }
        //                    else
        //                    {
        //                        AutoVchno = 1;
        //                    }
        //                    LoadSuffixPrefix(AutoVchno, ref Prefix, ref Suffix, ref PadStr, ConnectionString);
        //                    GVchNo = Prefix + "" + PadStr + "" + AutoVchno + "" + Suffix;
        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = GVchNo };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = GVchNo };
        //            }

        //            public void LoadSuffixPrefix(int VchNo, ref string Prefix, ref string Suffix, ref string PadStr, string Constr)
        //            {
        //                try
        //                {
        //                    int StartNo = 0;
        //                    DataTable table = new DataTable();
        //                    string queryStr = "";
        //                    int padding = 0;
        //                    int PaddLength = 0;
        //                    string PaddChar = "";
        //                    string Vchstr = "";
        //                    int PP = 0;
        //                    queryStr = "select Prefix,Suffix,StartNo,padding,PaddLength,PaddChar from ESPVchConfig";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(Constr).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(Constr).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        Prefix = clsMain.MyString(table.Rows[0]["Prefix"]);
        //                        Suffix = clsMain.MyString(table.Rows[0]["Suffix"]);
        //                        StartNo = clsMain.MyInt(table.Rows[0]["StartNo"]);
        //                        if (StartNo > VchNo) { VchNo = StartNo; }
        //                        Vchstr = clsMain.MyString(VchNo);
        //                        padding = clsMain.MyInt(table.Rows[0]["padding"]);
        //                        PaddLength = clsMain.MyInt(table.Rows[0]["PaddLength"]);
        //                        PaddChar = clsMain.MyString(table.Rows[0]["PaddChar"]);
        //                        if (padding != 0)
        //                        {
        //                            if (PaddLength != 0 || PaddChar.Length != 0)
        //                            {
        //                                PP = PaddLength - Vchstr.Length;
        //                                if (PP > 0)
        //                                {
        //                                    for (int i = 1; i <= PP; i++)
        //                                    {
        //                                        if (PadStr.Length == 0)
        //                                        {
        //                                            PadStr = PaddChar;
        //                                        }
        //                                        else
        //                                        {
        //                                            PadStr = PadStr + "" + PaddChar;
        //                                        }
        //                                    }

        //                                }
        //                                else
        //                                {
        //                                    PadStr = "";
        //                                }
        //                            }
        //                        }
        //                    }

        //                }
        //                catch (Exception ex)
        //                {

        //                }

        //            }
        //            public string GetCutoutstr(List<CutOut> obj)
        //            {
        //                //List<CutOut> obj = new List<CutOut>();
        //                string CutoutStr = "";
        //                foreach (var itemC in obj)
        //                {
        //                    if (CutoutStr.Length == 0)
        //                    {
        //                        CutoutStr = itemC.Srno + "~" + itemC.CItemCode + "~" + itemC.Qty + "~" + itemC.Amt;
        //                    }
        //                    else
        //                    {
        //                        CutoutStr = CutoutStr + "," + itemC.Srno + "~" + itemC.CItemCode + "~" + itemC.Qty + "~" + itemC.Amt;
        //                    }
        //                }
        //                return CutoutStr;
        //            }
        //            public string GetHoleStr(List<Hole> obj)
        //            {
        //                string HoleStr = "";
        //                foreach (var itemC in obj)
        //                {
        //                    if (HoleStr.Length == 0)
        //                    {
        //                        HoleStr = itemC.Srno + "~" + itemC.CItemCode + "~" + itemC.Qty + "~" + itemC.Amt;
        //                    }
        //                    else
        //                    {
        //                        HoleStr = HoleStr + "," + itemC.Srno + "~" + itemC.CItemCode + "~" + itemC.Qty + "~" + itemC.Amt;
        //                    }
        //                }
        //                return HoleStr;
        //            }
        //            [HttpPost]
        //            public dynamic SaveOrderPardosh(POrder obj, string CompCode, string FY)
        //            {
        //                List<POrder> PO = new List<POrder>();
        //                List<PItem> P = new List<PItem>();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                int R = 0;
        //                int VCode = 0;
        //                string OrderNo = "";
        //                string Cutoutstr = "";
        //                string HoleStr = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    queryStr = "insert into ESPTran1([Vchno],[Vchtype],[Date],[PartyCode],OrderType,SOType,PType,Brand,Approve,Qty,Area,Amount,NetAmount,SType)values ('" + obj.OrderNo + "',12,'" + obj.Date + "'," + obj.PartyCode + ",'" + obj.OrderType + "'," + obj.SOType + "," + obj.PType + "," + obj.Brand + ", 0," + obj.Qty + "," + obj.Area + "," + obj.Amount + "," + obj.NetAmount + "," + obj.SaleType + ")";
        //                    if (Provider == 1)
        //                    {
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                    }
        //                    else
        //                    {
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                    }
        //                    if (R > 0)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select CODE from ESPTran1 where Vchtype = 12 and Vchno = '" + obj.OrderNo + "' and [Date] = #" + obj.Date + "# and PartyCode = " + obj.PartyCode + "";
        //                            table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select CODE from ESPTran1 where Vchtype = 12 and Vchno = '" + obj.OrderNo + "' and [Date] = '" + obj.Date + "' and PartyCode = " + obj.PartyCode + "";
        //                            table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        if (table != null && table.Rows.Count > 0)
        //                        {
        //                            VCode = clsMain.MyInt(table.Rows[0]["CODE"]);
        //                        }

        //                        if (VCode > 0)
        //                        {
        //                            queryStr = "Insert Into ESPBillingDet(VchCode,PartyCode,PartyName,Address1,Address2,Address3,Address4,State,MobileNo,EmailId,ITPan,GSTIn,PinCode) Values(" + VCode + "," + obj.PartyCode + ",'" + obj.PartyName + "','" + obj.Address1 + "','" + obj.Address2 + "','" + obj.Address3 + "','" + obj.Address4 + "'," + obj.State + ",'" + obj.Mobile + "','" + obj.Email + "','" + obj.PAN + "','" + obj.GST + "','" + obj.PinCode + "')";
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                            foreach (var item in obj.PItem)
        //                            {

        //                                Cutoutstr = GetCutoutstr(item.CutOut);
        //                                HoleStr = GetHoleStr(item.Hole);
        //                                queryStr = "Insert Into ESPTran2(Vchcode,SrNo,ProcessType,Size,Type,Color,Variety,Shape,RefCode,Path,Width,Height,Chargeable,Qty,Area,Price,Item,OrganGas,Proces,ProcesPrice,Polish,PolishPrice,SplWork,SplWorkPrice,Block,CutoutQty,CutOutAmt,Cutoutstr,HoleQty,HoleAmt,Holestr,CSKQty,CSKPrice,CSKAmt,WithoutDiscAmt,Disc,DistAmt,FinalAmount,Remark,OrderType,ItemPrice,ItemPrice1,SpacerPrice,DiscAmount)";
        //                                queryStr = queryStr + " values(" + VCode + "," + item.SrNo + ",'" + item.ProcessType + "'," + item.Size + "," + item.Type + "," + item.Color + "," + item.Variety + "," + item.Shape + ",'" + item.RefCode + "','" + item.Path + "'," + item.Width + "," + item.Height + "," + item.Chargeable + "," + item.Qty + "," + item.Area + "," + item.Price + "," + item.Item + "," + item.OrganGas + "," + item.Proces + "," + item.ProcesPrice + "," + item.Polish + "," + item.PolishPrice + "," + item.SplWork + "," + item.SplWorkPrice + "," + item.Block + "," + item.CutoutQty + "," + item.CutoutAmt + ",'" + Cutoutstr + "'," + item.HoleQty + "," + item.HoleAmt + ",'" + HoleStr + "'," + item.CSKQty + "," + item.CSKPrice + "," + item.CSKAmt + "," + item.WithoutDiscAmt + "," + item.Disc + "," + item.DistAmt + "," + item.FinalAmount + ",'" + item.Remark + "'," + item.OrderType + "," + item.ItemPrice + "," + item.ItemPrice1 + "," + item.SpacerPrice + "," + item.DiscAmount + ")";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                                foreach (var itemC in item.CutOut)
        //                                {
        //                                    queryStr = "";
        //                                    queryStr = "insert into ESPCHTran([VchCode],[VchType],[Rectype],Srno,Item,Qty,Price,Amt)values (" + VCode + ",12,1," + itemC.Srno + "," + itemC.CItemCode + "," + itemC.Qty + "," + itemC.Price + "," + itemC.Amt + ")";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                                }
        //                                foreach (var itemH in item.Hole)
        //                                {
        //                                    queryStr = "";
        //                                    queryStr = "insert into ESPCHTran([VchCode],[VchType],[Rectype],Srno,Item,Qty,Price,Amt)values (" + VCode + ",12,2," + itemH.Srno + "," + itemH.CItemCode + "," + itemH.Qty + "," + itemH.Price + "," + itemH.Amt + ")";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                                }
        //                                queryStr = "";
        //                                for (int i = 1; i <= item.Qty; i++)
        //                                {
        //                                    OrderNo = obj.OrderNo + "-00" + i;
        //                                    queryStr = "Insert Into ESPRefTran(Vchcode,OrderId, Rectype, Method, Vchno, Date,PartyCode,SrNo,ProcessType,Size,Type,Color,Variety,Shape,RefCode,Path,Width,Height,Chargeable,Qty,Area,Price,Item,OrganGas,Proces,ProcesPrice,Polish,PolishPrice,SplWork,SplWorkPrice,Block,CutoutQty,CutOutAmt,HoleQty,HoleAmt,CSKQty,CSKPrice,CSKAmt,WithoutDiscAmt,Disc,DistAmt,FinalAmount,Remark,OrderType,ItemPrice,ItemPrice1,SpacerPrice,DiscAmount)";
        //                                    queryStr = queryStr + " values(" + VCode + ",'" + OrderNo + "',1,1,'" + obj.OrderNo + "','" + obj.Date + "'," + obj.PartyCode + "," + item.SrNo + ",'" + item.ProcessType + "'," + item.Size + "," + item.Type + "," + item.Color + "," + item.Variety + "," + item.Shape + ",'" + item.RefCode + "','" + item.Path + "'," + item.Width + "," + item.Height + "," + item.Chargeable + ",1," + item.Area + "," + item.Price + "," + item.Item + "," + item.OrganGas + "," + item.Proces + "," + item.ProcesPrice + "," + item.Polish + "," + item.PolishPrice + "," + item.SplWork + "," + item.SplWorkPrice + "," + item.Block + "," + item.CutoutQty + "," + item.CutoutAmt + "," + item.HoleQty + "," + item.HoleAmt + "," + item.CSKQty + "," + item.CSKPrice + "," + item.CSKAmt + "," + item.WithoutDiscAmt + "," + item.Disc + "," + item.DistAmt + "," + item.FinalAmount + ",'" + item.Remark + "'," + item.OrderType + "," + item.ItemPrice + "," + item.ItemPrice1 + "," + item.SpacerPrice + "," + item.DiscAmount + ")";
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                                }
        //                            }
        //                            foreach (var item in obj.BSPDetails)
        //                            {
        //                                queryStr = "insert into ESPTran3 ([VchCode],[SNo],[BSCode],[Narration],[BsValue],[BSPercent],[Bsamount],[OperatedOn],[VchType]) Values (" + VCode + "," + item.SrNo + "," + item.BSCode + ",'" + item.Narration.Replace("'", "''") + "'," + item.BsValue + ",'" + item.BSPercent + "'," + item.Bsamount + "," + item.OperatedOn + ",12)";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(queryStr);
        //                            }
        //                        }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed" };
        //                }
        //                return new { Status = 1, Msg = "Save sucessfully" };
        //            }

        //            public int GetIGCode(int TranType, string ConStr)
        //            {
        //                int IGCode = 0;
        //                string sql = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    if (TranType == 2)
        //                    {
        //                        sql = "Select Cutout as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 3)
        //                    {
        //                        sql = "Select Hole as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 4)
        //                    {
        //                        sql = "Select RoughGrinding as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 5)
        //                    {
        //                        sql = "Select SpecialWork as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 6)
        //                    {
        //                        sql = "Select Process as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 7)
        //                    {
        //                        sql = "Select Brand as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 9)
        //                    {
        //                        sql = "Select ThicknessGrp as IGCode from ESPIGrpConfig";
        //                    }
        //                    else if (TranType == 101)
        //                    {
        //                        sql = "Select SheetGrp as IGCode from ESPIGrpConfig";
        //                    }
        //                if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConStr).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConStr).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        IGCode = clsMain.MyInt(table.Rows[0]["IGCode"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return IGCode;
        //            }
        //            [HttpGet]
        //            public dynamic GetPItemMaster(int MasterType, string CompCode, string FY)
        //            {
        //                List<PardoshMList> lst = new List<PardoshMList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select M1.Code,M1.Name,m2.Name as Unit From Master1 M1 Left Join Master1 M2 On m1.Cm1=M2.Code Where M1.MasterType = " + MasterType + " Order By M1.Name";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList lstObj = new PardoshMList();

        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.Unit = clsMain.MyString(dr1["Unit"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetGlassSizeMaster(int MasterType, string CompCode, string FY)
        //            {
        //                List<PardoshMList> lst = new List<PardoshMList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select Code,Name From Master1 Where MasterType = " + MasterType + " Order By Name";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList lstObj = new PardoshMList();

        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetGlassTypeMaster(int MasterType, int GSize, string CompCode, string FY)
        //            {
        //                List<PardoshMList> lst = new List<PardoshMList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    //  queryStr = "select Distinct OF2,Name From Master1 M1 Left Join MasterAddressInfo MAI on M1.Code = MAI.OF2 WHERE OF1 =" + GSize + "";
        //                    queryStr = "Select Distinct M2.Code,M2.Name From Master1 M1 Left Join Master1 M2 On M1.GlassType = M2.Code Where M1.Mastertype =6 And M1.Thickness = " + GSize + "";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList lstObj = new PardoshMList();

        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetColorMaster(int MasterType, int GSize, int GType, string CompCode, string FY)
        //            {
        //                List<PardoshMList> lst = new List<PardoshMList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    //queryStr = "select Distinct OF3,Name From Master1 M1 Left Join MasterAddressInfo MAI on M1.Code = MAI.OF3 WHERE OF1 =" + GSize + " and OF2 = " + GType + "";
        //                    queryStr = "Select Distinct M2.Code,M2.Name From Master1 M1 Left Join Master1 M2 On M1.Colour = M2.Code Where M1.Mastertype = 6 And M1.Thickness =  " + GSize + " And M1.GlassType = " + GType + "";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList lstObj = new PardoshMList();

        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetVarietyMaster(int MasterType, int GSize, int GType, int GColor, string CompCode, string FY)
        //            {
        //                List<PardoshMList> lst = new List<PardoshMList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    // queryStr = "select Distinct OF4,Name From Master1 M1 Left Join MasterAddressInfo MAI on M1.Code = MAI.OF4 WHERE OF1 =" + GSize + " and OF2 = " + GType + " and OF3  ="+ GColor +"";
        //                    queryStr = "Select Distinct M2.Code,M2.Name From Master1 M1 Left Join Master1 M2 On M1.Variety = M2.Code Where M1.Mastertype = 6 And M1.Thickness = " + GSize + " And M1.GlassType =  " + GType + " And M1.Colour = " + GColor + "";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList lstObj = new PardoshMList();

        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }

        //            [HttpGet]
        //            public dynamic GetPMaster(int MasterType, string CompCode, string FY)
        //            {
        //                List<PardoshMList> lst = new List<PardoshMList>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    queryStr = "Select Code,Name,isnull(Brand,0) as MCCode From ESPMaster1 Where MasterType = " + MasterType + " Order By Name";
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {

        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            PardoshMList lstObj = new PardoshMList();

        //                            lstObj.MCCode = clsMain.MyString(dr1["MCCode"]);
        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }

        //            /// /////////////////////////////////////////////////////////////////////////

        //            [HttpGet]
        //            public List<OrdDT> GetBusyAccOrderItemDT(int AccCode, string OrderNo, int StatusType, string CompCode, string FY)
        //            {
        //                List<OrdDT> lst = new List<OrdDT>();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    // string queryStr = "";
        //                    queryStr = "Select A.MasterCode1 as ItemCode,M.Name as ItemName,Sum(A.Value1) as Qty,Sum(A.Value1 * A.Value3) as OAmount,Sum(A.PQty) as PQty,Sum(A.PQty * A.Value3) as POAmount From (Select A.RefCode,A.VchCode,A.MasterCode1,A.Value1,A.Value3,Sum(B.Value1) as PQty From Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.RecType = B.RecType And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2 Where A.MasterCode2 = " + AccCode + " And Ltrim(A.[No]) = '" + OrderNo + "' And A.RecType = 4 And A.Value1 > 0 And A.VchType = 12 Group By A.RefCode,A.VchCode,A.MasterCode1,A.[No],A.Date,A.Value1,A.Value3";
        //                    if (StatusType == 1)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) = 0";
        //                    }
        //                    if (StatusType == 2)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) >= 0.01";
        //                    }
        //                    queryStr = queryStr + ") A Left Join Master1 M On A.MasterCode1 = M.Code Group By A.MasterCode1,M.Name Order By M.Name";
        //                    //System.Data.DataTable table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            OrdDT lstObj = new OrdDT();

        //                            lstObj.Code = clsMain.MyInt(dr1["ItemCode"]);
        //                            lstObj.Name = clsMain.MyString(dr1["ItemName"]);
        //                            lstObj.OrderQty = clsMain.MyDouble(dr1["Qty"]);
        //                            lstObj.OrderAmt = clsMain.MyDouble(dr1["OAmount"]);
        //                            lstObj.POrderQty = clsMain.MyDouble(dr1["PQty"]);
        //                            lstObj.POrderAmt = clsMain.MyDouble(dr1["POAmount"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesmanWisevisitedparty(int SCode, int SSCode, string SDate, string EDate, string CompCode, string FY)
        //            {
        //                List<VistedParty> lst = new List<VistedParty>();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();

        //                try
        //                {
        //                    // string queryStr = "";
        //                    if (SSCode == 0)
        //                    {
        //                        string SCodeStr = GetHierarchySalesman(ConnectionString, SCode);
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select M1.Name as SalesMan,M2.Name as PartyName,cast(InOutTime  as Date) as Dt from ((ESSFACheckinlog T1 left Join Master1 M1 on T1.SalesManId = M1.Code) left Join Master1 M2 on T1.PartyId = M2.Code) where SalesManID in(" + SCode + ") And cast(InOutTime as DATE) >= #" + SDate + "# And cast(InOutTime as DATE) <= #" + EDate + "# Group By M1.Name,M2.Name,cast(InOutTime  as Date) ";
        //                            table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select M1.Name as SalesMan,M2.Name as PartyName,cast(InOutTime  as Date) as Dt from ESSFACheckinlog T1 left Join Master1 M1 on T1.SalesManId = M1.Code left Join Master1 M2 on T1.PartyId = M2.Code where SalesManID in(" + SCode + ") And cast(InOutTime as DATE) >= '" + SDate + "' And cast(InOutTime as DATE) <= '" + EDate + "' Group By M1.Name,M2.Name,cast(InOutTime  as Date) ";
        //                            table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select M1.Name as SalesMan,M2.Name as PartyName,cast(InOutTime  as Date) as Dt from ((ESSFACheckinlog T1 left Join Master1 M1 on T1.SalesManId = M1.Code) left Join Master1 M2 on T1.PartyId = M2.Code) where SalesManID in(" + SSCode + ") And cast(InOutTime as DATE) >= #" + SDate + "# And cast(InOutTime as DATE) <= #" + EDate + "# Group By M1.Name,M2.Name,cast(InOutTime  as Date) ";
        //                            table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select M1.Name as SalesMan,M2.Name as PartyName,cast(InOutTime  as Date) as Dt from ESSFACheckinlog T1 left Join Master1 M1 on T1.SalesManId = M1.Code left Join Master1 M2 on T1.PartyId = M2.Code where SalesManID in(" + SSCode + ") And cast(InOutTime as DATE) >= '" + SDate + "' And cast(InOutTime as DATE) <= '" + EDate + "' Group By M1.Name,M2.Name,cast(InOutTime  as Date) ";
        //                            table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            VistedParty lstObj = new VistedParty();

        //                            lstObj.SalesMan = clsMain.MyString(dr1["SalesMan"]);
        //                            lstObj.Party = clsMain.MyString(dr1["PartyName"]);
        //                            lstObj.VistedDate = Convert.ToDateTime(dr1["Dt"]).ToString("dd/MMM/yyyy");
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }


        //            [HttpGet]
        //            public List<OrdDT> GetBusyAccSaleQuaItemDT(int AccCode, string OrderNo, int StatusType, string CompCode, string FY)
        //            {
        //                List<OrdDT> lst = new List<OrdDT>();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    // string queryStr = "";
        //                    queryStr = "Select A.MasterCode1 as ItemCode,M.Name as ItemName,Sum(A.Value1) as Qty,Sum(A.Value1 * A.Value3) as OAmount,Sum(A.PQty) as PQty,Sum(A.PQty * A.Value3) as POAmount From (Select A.RefCode,A.VchCode,A.MasterCode1,A.Value1,A.Value3,Sum(B.Value1) as PQty From Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.RecType = B.RecType And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2 Where A.MasterCode2 = " + AccCode + " And Ltrim(A.[No]) = '" + OrderNo + "' And A.RecType = 5 And A.Value1 > 0 And A.VchType = 26 Group By A.RefCode,A.VchCode,A.MasterCode1,A.[No],A.Date,A.Value1,A.Value3";
        //                    if (StatusType == 1)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) = 0";
        //                    }
        //                    if (StatusType == 2)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) >= 0.01";
        //                    }
        //                    queryStr = queryStr + ") A Left Join Master1 M On A.MasterCode1 = M.Code Group By A.MasterCode1,M.Name Order By M.Name";
        //                    //System.Data.DataTable table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            OrdDT lstObj = new OrdDT();

        //                            lstObj.Code = clsMain.MyInt(dr1["ItemCode"]);
        //                            lstObj.Name = clsMain.MyString(dr1["ItemName"]);
        //                            lstObj.OrderQty = clsMain.MyDouble(dr1["Qty"]);
        //                            lstObj.OrderAmt = clsMain.MyDouble(dr1["OAmount"]);
        //                            lstObj.POrderQty = clsMain.MyDouble(dr1["PQty"]);
        //                            lstObj.POrderAmt = clsMain.MyDouble(dr1["POAmount"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }

        //            [HttpGet]
        //            public List<OrdDT> GetAccOrderTracking(int SalesmanCode, int AccCode, string SDate, string EDate, int StatusType, string CompCode, string FY)
        //            {
        //                List<OrdDT> lst = new List<OrdDT>();

        //                try
        //                {
        //                    string Accstr = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();

        //                    queryStr = "Select A.MasterCode2 as AccCode,M.Name,Ltrim(A.OrderNo) as OrderNo,A.Date,Sum(A.Value1) as Qty,Sum(A.Value1 * A.Value3) as OAmount,Sum(A.PQty) as PQty,Sum(A.PQty * A.Value3) as POAmount From (Select A.RefCode,A.VchCode,A.MasterCode2,A.[No] as OrderNo,A.Date,A.Value1,A.Value3,Sum(B.Value1) as PQty From ((Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.RecType = B.RecType And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2) Inner Join Master1 C On A.MasterCode2 = C.Code) Where A.RecType = 4 And A.Value1 > 0";
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = queryStr + " And A.VchType = 12 And A.Date >= #" + SDate + "# And A.Date <= #" + EDate + "#";
        //                    }
        //                    else
        //                    {
        //                        queryStr = queryStr + " And A.VchType = 12 And A.Date >= '" + SDate + "' And A.Date <= '" + EDate + "'";
        //                    }

        //                    //if (SalesmanCode > 0)
        //                    //{
        //                    //    queryStr = queryStr + " And C.CM3 = " + SalesmanCode + "";
        //                    //}
        //                    if (AccCode > 0)
        //                    {
        //                        queryStr = queryStr + " And A.MasterCode2 = " + AccCode + "";
        //                    }
        //                    else
        //                    {
        //                        Accstr = GetSalesManWiseAccount(SalesmanCode, ConnectionString);
        //                        if (Accstr.Length > 0)
        //                        {
        //                            queryStr = queryStr + " And A.MasterCode2 in(" + Accstr + ")";
        //                        }
        //                    }
        //                    queryStr = queryStr + " Group By A.RefCode,A.VchCode,A.MasterCode2,A.[No],A.Date,A.Value1,A.Value3";
        //                    if (StatusType == 1)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) = 0";
        //                    }
        //                    if (StatusType == 2)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) >= 0.01";
        //                    }
        //                    queryStr = queryStr + ") A Left Join Master1 M On A.MasterCode2 = M.Code Group By A.OrderNo,A.Date,A.MasterCode2,M.Name Order By A.Date,A.OrderNo";

        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            OrdDT lstObj = new OrdDT();

        //                            lstObj.Code = clsMain.MyInt(dr1["AccCode"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.OrderNo = clsMain.MyString(dr1["OrderNo"]);
        //                            lstObj.OrderDate = Convert.ToDateTime(dr1["Date"]).ToString("dd/MMM/yyyy");
        //                            lstObj.OrderQty = clsMain.MyDouble(dr1["Qty"]);
        //                            lstObj.OrderAmt = clsMain.MyDouble(dr1["OAmount"]);
        //                            lstObj.POrderQty = clsMain.MyDouble(dr1["PQty"]);
        //                            lstObj.POrderAmt = clsMain.MyDouble(dr1["POAmount"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }

        //            [HttpGet]
        //            public List<OrdDT> GetAccSaleQuaTracking(int SalesmanCode, int AccCode, string SDate, string EDate, int StatusType, string CompCode, string FY)
        //            {
        //                List<OrdDT> lst = new List<OrdDT>();

        //                try
        //                {
        //                    string AccStr = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable table = new DataTable();

        //                    queryStr = "Select A.MasterCode2 as AccCode,M.Name,Ltrim(A.OrderNo) as OrderNo,A.Date,Sum(A.Value1) as Qty,Sum(A.Value1 * A.Value3) as OAmount,Sum(A.PQty) as PQty,Sum(A.PQty * A.Value3) as POAmount From (Select A.RefCode,A.VchCode,A.MasterCode2,A.[No] as OrderNo,A.Date,A.Value1,A.Value3,Sum(B.Value1) as PQty From ((Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.RecType = B.RecType And A.MasterCode1 = B.MasterCode1 And A.MasterCode2 = B.MasterCode2) Inner Join Master1 C On A.MasterCode2 = C.Code) Where A.RecType = 5 And A.Value1 > 0";
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = queryStr + " And A.VchType = 26 And A.Date >= #" + SDate + "# And A.Date <= #" + EDate + "#";
        //                    }
        //                    else
        //                    {
        //                        queryStr = queryStr + " And A.VchType = 26 And A.Date >= '" + SDate + "' And A.Date <= '" + EDate + "'";
        //                    }

        //                    //if (SalesmanCode > 0)
        //                    //{
        //                    //    queryStr = queryStr + " And C.CM3 = " + SalesmanCode + "";
        //                    //}
        //                    if (AccCode > 0)
        //                    {
        //                        queryStr = queryStr + " And A.MasterCode2 = " + AccCode + "";
        //                    }
        //                    else
        //                    {
        //                        AccStr = GetSalesManWiseAccount(SalesmanCode, ConnectionString);
        //                        if (AccStr.Length > 0)
        //                        {
        //                            queryStr = queryStr + " And A.MasterCode2 in(" + AccStr + ")";
        //                        }
        //                    }
        //                    queryStr = queryStr + " Group By A.RefCode,A.VchCode,A.MasterCode2,A.[No],A.Date,A.Value1,A.Value3";
        //                    if (StatusType == 1)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) = 0";
        //                    }
        //                    if (StatusType == 2)
        //                    {
        //                        queryStr = queryStr + " Having Sum(B.Value1) >= 0.01";
        //                    }
        //                    queryStr = queryStr + ") A Left Join Master1 M On A.MasterCode2 = M.Code Group By A.OrderNo,A.Date,A.MasterCode2,M.Name Order By A.Date,A.OrderNo";

        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            OrdDT lstObj = new OrdDT();

        //                            lstObj.Code = clsMain.MyInt(dr1["AccCode"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.OrderNo = clsMain.MyString(dr1["OrderNo"]);
        //                            lstObj.OrderDate = Convert.ToDateTime(dr1["Date"]).ToString("dd/MMM/yyyy");
        //                            lstObj.OrderQty = clsMain.MyDouble(dr1["Qty"]);
        //                            lstObj.OrderAmt = clsMain.MyDouble(dr1["OAmount"]);
        //                            lstObj.POrderQty = clsMain.MyDouble(dr1["PQty"]);
        //                            lstObj.POrderAmt = clsMain.MyDouble(dr1["POAmount"]);
        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }


        //            [HttpGet]
        //            public dynamic GetAccountOtherDet(int AccCode, string CompCode, string FY)
        //            {
        //                Accountdt lst = new Accountdt();

        //                try
        //                {
        //                    string queryStr = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable table = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select A.Code,A.Name,B.Code as StPtCode,IIF(IsNull(B.Name),'',B.Name) as StPtName,IIF(IsNull(C.Transport),'',C.Transport) as Transport,iif(IsNull(C.Station),'',C.Station) as Station from ((Master1 A Left Join Master1 B On A.CM6 = B.Code) Left Join MasterAddressInfo C On A.Code = C.MasterCode) Where A.MasterType = 2 And A.Code = " + AccCode + " Order By A.Name";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select A.Code,A.Name,B.Code as StPtCode,IsNull(B.Name,'') as StPtName,IsNull(C.Transport,'') as Transport,IsNull(C.Station,'') as Station from Master1 A Left Join Master1 B On A.CM6 = B.Code Left Join MasterAddressInfo C On A.Code = C.MasterCode Where A.MasterType = 2 And A.Code = " + AccCode + " Order By A.Name";
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        lst.Code = clsMain.MyString(table.Rows[0]["Code"]);
        //                        lst.Name = clsMain.MyString(table.Rows[0]["Name"]);
        //                        lst.StPtCode = clsMain.MyInt(table.Rows[0]["StPtCode"]);
        //                        lst.StPtName = clsMain.MyString(table.Rows[0]["StPtName"]);
        //                        lst.Transport = clsMain.MyString(table.Rows[0]["Transport"]);
        //                        lst.Station = clsMain.MyString(table.Rows[0]["Station"]);
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = lst };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = lst };
        //            }
        //            private string GetHierarchySalesman(string ConStr, int SCode)
        //            {
        //                string SalesManStr = "";

        //                SalesManStr = Convert.ToString(SCode);
        //                try
        //                {
        //                    string sql = "";
        //                    // sqlhelper Obj = new sqlhelper();
        //                    DataTable dt = new DataTable();
        //                    sql = "Select * from ESSFASalesHeadConfig where SalesCode = " + SCode + " and Rectype =1";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConStr).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConStr).getTable(sql);
        //                    }
        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (SalesManStr.Length > 0) { SalesManStr = SalesManStr + "," + Convert.ToString(Row["Saleshead"]); } else { SalesManStr = Convert.ToString(Row["Saleshead"]); }
        //                            //GetAllChildQueryStr1(Convert.ToInt32(Row["SalesmanCode"]), ref GroupStr, ConStr);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return SalesManStr;
        //            }
        //            private string GetSalesManWiseAccount(int SalesmanCode, string constr)
        //            {
        //                string AccStr = "";
        //                try
        //                {

        //                    string queryStr = "";
        //                    DataTable table = new DataTable();
        //                    int AccType = GetSalesmanAccountType(SalesmanCode, constr);
        //                    string SCodeStr = GetHierarchySalesman(constr, SalesmanCode);
        //                    if (Provider == 1)
        //                    {

        //                        if (AccType == 1)
        //                        {
        //                            queryStr = "Select A.Code,B.Name,iif(isnull(B.Code),0,B.Code) as StPtCode,iif(IsNull(C.Name),'',C.Name) as StPtName,iif(IsNull(D.Transport),'',D.Transport) as Transport,iif(IsNull(D.Station),'',D.Station) as Station from (((Help1 A Inner Join Master1 B ON A.Code = B.Code) Left Join Master1 C On B.CM6 = C.Code) Left Join MasterAddressInfo D On B.Code = D.MasterCode) Where A.MasterType = 2 And A.RecType = 104 And A.NameOrAlias = 1 And A.MasterSeries = 0 And B.ApprovalStatus In (0,1) Order By A.NameAlias";
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.Code,A.Name,iif(isnull(B.Code),0,B.Code) as StPtCode,iif(IsNull(B.Name),'',B.Name) as StPtName,iif(IsNull(C.Transport),'',C.Transport) as Transport,iif(IsNull(C.Station),'',C.Station) as Station from ((Master1 A Left Join Master1 B On A.CM6 = B.Code) Left Join MasterAddressInfo C On A.Code = C.MasterCode) Where A.MasterType = 2 And A.CM3 in (" + SCodeStr + ") And A.ApprovalStatus In (0,1) Order By A.Name";

        //                        }
        //                        table = new OLEDBHELPER(constr).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        if (AccType == 1)
        //                        {
        //                            queryStr = "Select A.Code,B.Name,isnull(B.Code,0) as StPtCode,IsNull(C.Name,'') as StPtName,IsNull(D.Transport,'') as Transport,IsNull(D.Station,'') as Station from Help1 A Inner Join Master1 B ON A.Code = B.Code Left Join Master1 C On B.CM6 = C.Code Left Join MasterAddressInfo D On B.Code = D.MasterCode Where A.MasterType = 2 And A.RecType = 104 And A.NameOrAlias = 1 And A.MasterSeries = 0 And B.ApprovalStatus In (0,1) Order By A.NameAlias";
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.Code,A.Name,isnull(B.Code,0) as StPtCode,IsNull(B.Name,'') as StPtName,IsNull(C.Transport,'') as Transport,IsNull(C.Station,'') as Station from Master1 A Left Join Master1 B On A.CM6 = B.Code Left Join MasterAddressInfo C On A.Code = C.MasterCode Where A.MasterType = 2 And A.CM3 in (" + SCodeStr + ") And A.ApprovalStatus In (0,1) Order By A.Name";

        //                        }
        //                        table = new SQLHELPER(constr).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            if (AccStr.Length > 0) { AccStr = AccStr + "," + Convert.ToString(dr1["Code"]); } else { AccStr = Convert.ToString(dr1["Code"]); }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return AccStr;
        //                }
        //                return AccStr;
        //            }

        //            [HttpGet]
        //            public List<Accountdt> GetSalesmanAccount(int SalesmanCode, string CompCode, string FY)
        //            {
        //                List<Accountdt> lst = new List<Accountdt>();
        //                string queryStr = "";
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable table = new DataTable();
        //                    int AccType = GetSalesmanAccountType(SalesmanCode, ConnectionString);
        //                    string SCodeStr = GetHierarchySalesman(ConnectionString, SalesmanCode);
        //                    if (Provider == 1)
        //                    {

        //                        if (AccType == 1)
        //                        {
        //                            queryStr = "Select A.Code,B.Name,iif(isnull(C.Code),0,C.Code) as StPtCode,iif(IsNull(C.Name),'',C.Name) as StPtName,iif(IsNull(D.Transport),'',D.Transport) as Transport,iif(IsNull(D.Station),'',D.Station) as Station,iif(ISNULL(d.Mobile),'',d.mobile) AS Mobile,iif(ISNULL(D.address1),'',D.address1) as Address1,iif(ISNULL(D.address2),'',D.address2) as Address2,iif(ISNULL(D.address3),'',D.address3) as Address3,iif(ISNULL(D.address4),'',D.address4) as Address4 from (((Help1 A Inner Join Master1 B ON A.Code = B.Code) Left Join Master1 C On B.CM6 = C.Code) Left Join MasterAddressInfo D On B.Code = D.MasterCode) Where A.MasterType = 2 And A.RecType = 104 And A.NameOrAlias = 1 And A.MasterSeries = 0 And B.ApprovalStatus In (0,1) Order By A.NameAlias";
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.Code,A.Name,iif(isnull(B.Code),0,C.Code) as StPtCode,iif(IsNull(B.Name),'',B.Name) as StPtName,iif(IsNull(C.Transport),'',C.Transport) as Transport,iif(IsNull(C.Station),'',C.Station) as Station,iif(ISNULL(d.Mobile),'',d.mobile) AS Mobile,iif(ISNULL(D.address1),'',D.address1) as Address1,iif(ISNULL(D.address2),'',D.address2) as Address2,iif(ISNULL(D.address3),'',D.address3) as Address3,iif(ISNULL(D.address4),'',D.address4) as Address4 from (((Master1 A Left Join Master1 B On A.CM6 = B.Code) Left Join MasterAddressInfo C On A.Code = C.MasterCode) Left Join MasterAddressInfo D On B.Code = D.MasterCode) Where A.MasterType = 2 And A.CM3 in (" + SCodeStr + ") And A.ApprovalStatus In (0,1) Order By A.Name";

        //                        }
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        if (AccType == 1)
        //                        {
        //                            queryStr = "Select A.Code,B.Name,isnull(C.Code,0) as StPtCode,IsNull(C.Name,'') as StPtName,IsNull(D.Transport,'') as Transport,IsNull(D.Station,'') as Station,ISNULL(d.Mobile,'') AS Mobile,ISNULL(D.address1,'') as Address1,ISNULL(D.address2,'') as Address2,ISNULL(D.address3,'') as Address3,ISNULL(D.address4,'') as Address4 from Help1 A Inner Join Master1 B ON A.Code = B.Code Left Join Master1 C On B.CM6 = C.Code Left Join MasterAddressInfo D On B.Code = D.MasterCode Where A.MasterType = 2 And A.RecType = 104 And A.NameOrAlias = 1 And A.MasterSeries = 0 And B.ApprovalStatus In (0,1) Order By A.NameAlias";
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.Code,A.Name,isnull(B.Code,0) as StPtCode,IsNull(B.Name,'') as StPtName,IsNull(C.Transport,'') as Transport,IsNull(C.Station,'') as Station,ISNULL(d.Mobile,'') AS Mobile,ISNULL(D.address1,'') as Address1,ISNULL(D.address2,'') as Address2,ISNULL(D.address3,'') as Address3,ISNULL(D.address4,'') as Address4 from Master1 A Left Join Master1 B On A.CM6 = B.Code Left Join MasterAddressInfo C On A.Code = C.MasterCode Left Join MasterAddressInfo D On B.Code = D.MasterCode Where A.MasterType = 2 And A.CM3 in (" + SCodeStr + ") And A.ApprovalStatus In (0,1) Order By A.Name";

        //                        }
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            Accountdt lstObj = new Accountdt();
        //                            lstObj.Code = clsMain.MyString(dr1["Code"]);
        //                            lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                            lstObj.StPtCode = clsMain.MyInt(dr1["StPtCode"]);
        //                            lstObj.StPtName = clsMain.MyString(dr1["StPtName"]);
        //                            lstObj.Transport = clsMain.MyString(dr1["Transport"]);
        //                            lstObj.Station = clsMain.MyString(dr1["Station"]);
        //                            lstObj.Mobile = clsMain.MyString(dr1["Mobile"]);
        //                            lstObj.Address = clsMain.MyString(dr1["Address1"]) + " " + clsMain.MyString(dr1["Address2"]) + " " + clsMain.MyString(dr1["Address3"]) + " " + clsMain.MyString(dr1["Address4"]) + " ";

        //                            lst.Add(lstObj);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return lst;
        //                }
        //                return lst;
        //            }
        //            [HttpGet]
        //            public dynamic GetSOSummary(int SCode, string SDate, string EDate, string CompCode, string FY)
        //            {

        //                int OrderId = 0;
        //                string sql = "";
        //                int R = 0;
        //                int VchCode = 0;
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                List<BusyVoucher.InvVoucher> Inv = new List<BusyVoucher.InvVoucher>();
        //                List<BusyVoucher.InvItemDetail> invItems = new List<BusyVoucher.InvItemDetail>();
        //                List<BusyVoucher.InvBSDetail> BSDet = new List<BusyVoucher.InvBSDetail>();
        //                //Inv.ItemEntries = new List<BusyVoucher.InvItemDetail>();
        //                //Inv.BSEntries = new List<BusyVoucher.InvBSDetail>();


        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    DataTable dt1 = new DataTable();
        //                    DataTable dt2 = new DataTable();

        //                string queryStr = "";
        //                    int Trantype = 0;
        //                    int Srno = 0;
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select 1 as TranType,A.VchCode,IsNull(M1.Name,'') as SeriesName,Convert(Varchar,A.[Date],103) as VchDate,LTrim(A.VchNo) as VchNo,IsNull(M2.Name,'') as PartyName,IsNull(V.Narration1,'') as Narration1,A.VchAmtBaseCur as NetAmount,Abs(Sum(B.D1)) as Qty,Sum(B.D5) as Amount From ((((Tran1 A Left Join Master1 M1 On A.VchSeriesCode = M1.Code)";
        //                        queryStr = queryStr + " Left Join Master1 M2 On A.MasterCode1 = M2.Code) Left Join Tran2 B On A.VchCode = B.VchCode And B.RecType In (4)) Left Join VchOtherInfo V On A.VchCode = V.VchCode) Where A.Vchtype = 12  and A.[Date] >= #" + SDate + "# And A.[Date] <= #" + EDate + "# and A.Cm4 = " + SCode + " Group By A.VchCode,M1.Name,A.[Date],A.VchNo,IsNull(M2.Name, ''),A.VchAmtBaseCur,V.Narration1";
        //                        queryStr = queryStr + "Union All Select 2 as TranType,A.id as Vchcode,'' as SeriesName,Convert(Varchar, A.OrderDate, 103) as VchDate,'' as VchNo,IsNull(M1.Name, '') as PartyName,IsNull(A.Remarks, '') as Narration1,A.TotalAmount as NetAmount,0 as Qty,0 as AMount From EsOrderHeaderdetails A Left Join Master1 M1 On A.PartyId = M1.Code where (Sync = 0 or Sync is null) and Vchtype = 12 and A.OrderDate >= #" + SDate + "# And A.OrderDate <= #" + EDate + "# and A.SalesManId = " + SCode + "";

        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select 1 as TranType,A.VchCode,IsNull(M1.Name,'') as SeriesName,Convert(Varchar,A.[Date],103) as VchDate,LTrim(A.VchNo) as VchNo,IsNull(M2.Name,'') as PartyName,IsNull(V.Narration1,'') as Narration1,A.VchAmtBaseCur as NetAmount,Abs(Sum(B.D1)) as Qty,Sum(B.D5) as Amount From ((((Tran1 A Left Join Master1 M1 On A.VchSeriesCode = M1.Code)";
        //                        queryStr = queryStr + " Left Join Master1 M2 On A.MasterCode1 = M2.Code) Left Join Tran2 B On A.VchCode = B.VchCode And B.RecType In (4)) Left Join VchOtherInfo V On A.VchCode = V.VchCode) Where A.Vchtype = 12  and A.[Date] >= '" + SDate + "' And A.[Date] <= '" + EDate + "' and A.Cm4 = " + SCode + " Group By A.VchCode,M1.Name,A.[Date],A.VchNo,IsNull(M2.Name, ''),A.VchAmtBaseCur,V.Narration1";
        //                        queryStr = queryStr + " Union All Select 2 as TranType,A.id as Vchcode,'' as SeriesName,Convert(Varchar, A.OrderDate, 103) as VchDate,'' as VchNo,IsNull(M1.Name, '') as PartyName,IsNull(A.Remarks, '') as Narration1,A.TotalAmount as NetAmount,0 as Qty,0 as AMount From EsOrderHeaderdetails A Left Join Master1 M1 On A.PartyId = M1.Code where (Sync = 0 or Sync is null) and Vchtype = 12 and A.OrderDate >= '" + SDate + "' And A.OrderDate <= '" + EDate + "' and A.SalesManId = " + SCode + "";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dt11 in dt.Rows)
        //                        {
        //                            BusyVoucher.InvVoucher Inv1 = new BusyVoucher.InvVoucher();

        //                            Inv1.VchSeriesName = clsMain.MyString(dt11["SeriesName"]).Substring(2);
        //                            Inv1.Date = clsMain.MyString(dt11["VchDate"]);
        //                            Inv1.VchNo = clsMain.MyString(dt11["VchNo"]);
        //                            Inv1.PartyName = clsMain.MyString(dt11["PartyName"]);
        //                            Inv1.TQty = clsMain.MyDouble(dt11["Qty"]);
        //                            Inv1.TAmount = clsMain.MyDouble(dt11["Amount"]);
        //                            Inv1.NetAmount = clsMain.MyDouble(dt11["NetAmount"]);
        //                            Inv1.Narration = clsMain.MyString(dt11["Narration1"]);

        //                            VchCode = clsMain.MyInt(dt11["vCHCODE"]);
        //                            Trantype = clsMain.MyInt(dt11["TranType"]);
        //                            invItems = new List<BusyVoucher.InvItemDetail>();
        //                            BSDet = new List<InvBSDetail>();

        //                            Inv1.ItemEntries = new List<InvItemDetail>();
        //                            Inv1.BSEntries = new List<InvBSDetail>();

        //                            Srno = 0;
        //                            if (Trantype == 1)
        //                            {
        //                                queryStr = "Select A.SrNo,IsNull(M1.Name,'') as ItemName,Abs(A.Value1) as MQty,IsNull(M2.Name,'') as UnitName,Abs(A.Value2) as AQty,A.D2,A.D5 from Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On A.CM2 = M2.Code Where A.VchCode = " + VchCode + " And A.RecType In (4) Order By A.SrNo";
        //                            }
        //                            else
        //                            {
        //                                queryStr = "Select IsNull(M1.Name,'') as ItemName,Abs(A.Qty) as MQty,IsNull(M2.Name, '') as UnitName,A.AltQty as AQty,A.Rate as D2,A.Amount as D5 from EsOrderdetails A Left Join Master1 M1 On A.ProductId = M1.Code Left Join Master1 M2 On m1.CM1 = M2.Code Where A.orderid = " + VchCode + " And A.Vchtype In(12)";
        //                            }
        //                            if (Provider == 1)
        //                            {
        //                                dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                                dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt1 != null && dt1.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow dr1 in dt1.Rows)
        //                                {
        //                                    Srno = Srno + 1;
        //                                    //invItems.Add(new BusyVoucher.InvItemDetail()
        //                                    //{
        //                                    BusyVoucher.InvItemDetail InvItem = new BusyVoucher.InvItemDetail();
        //                                    InvItem.SrNo = Srno;// clsMain.MyInt(dr1["SrNo"]);
        //                                    InvItem.ItemName = clsMain.MyString(dr1["ItemName"]);
        //                                    InvItem.QtyMainUnit = clsMain.MyDouble(dr1["MQty"]);
        //                                    InvItem.QtyAltUnit = clsMain.MyDouble(dr1["AQty"]);
        //                                    InvItem.UnitName = clsMain.MyString(dr1["UnitName"]);
        //                                    InvItem.Price = clsMain.MyDouble(dr1["D2"]);
        //                                    InvItem.Amount = clsMain.MyDouble(dr1["D5"]);
        //                                    //});
        //                                    invItems.Add(InvItem);

        //                                }
        //                                Inv1.ItemEntries = invItems;
        //                            }

        //                            queryStr = "Select A.SrNo,IsNull(M1.Name,'') as BSName,Abs(A.Value1) as BSPer,Abs(A.Value3) as Amount from Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code Where A.VchCode = " + VchCode + " And A.RecType In (3) Order By A.SrNo";
        //                            if (Provider == 1)
        //                            {
        //                            dt2 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                            dt2 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt2 != null && dt2.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow dr2 in dt2.Rows)
        //                                {
        //                                    BusyVoucher.InvBSDetail InvBS = new BusyVoucher.InvBSDetail();
        //                                    InvBS.SrNo = clsMain.MyInt(dr2["SrNo"]);
        //                                    InvBS.BSName = clsMain.MyString(dr2["BSName"]);
        //                                    InvBS.BSPer = clsMain.MyDouble(dr2["BSPer"]);
        //                                    InvBS.Amount = clsMain.MyDouble(dr2["Amount"]);
        //                                    BSDet.Add(InvBS);
        //                                }
        //                                Inv1.BSEntries = BSDet;
        //                            }
        //                            Inv.Add(Inv1);
        //                        }

        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString(), Data = Inv };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = Inv };
        //            }
        //            public int GetSalesmanAccountType(int UserID, string ConnectionString)
        //            {
        //                int AccStatus = 0;
        //                string sql = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select iif(IsNull(A.ShowAllAcc),0,A.ShowAllAcc) as AccStatus from ESUserLogin A Where SalesmanCode = " + UserID + "";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select IsNull(A.ShowAllAcc,0) as AccStatus from ESUserLogin A Where SalesmanCode = " + UserID + "";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        AccStatus = clsMain.MyInt(table.Rows[0]["AccStatus"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return AccStatus;
        //            }


        //            [HttpGet]
        //            public dynamic GetBusyItemList(int SCode, string CompCode, string FY, int Status)
        //            {
        //                List<Item> lst = new List<Item>();
        //                string queryStr = "";
        //                string Quer = "";
        //                string msgbox = "";
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable table = new DataTable();

        //                    int Atype = 0;
        //                    int IGType = 0;
        //                    string MCStr = "";
        //                    string IGStr = "";
        //                    Atype = GetchkAllMCType(SCode, ConnectionString);
        //                    IGType = GetchkAllIGType(SCode, ConnectionString);

        //                    if (SCode == 0)
        //                    {

        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "SElect A.Code,A.Name,A.NameAlias,A.Price,A.MinPrice,A.AltPrice,A.ApplyPrice,A.MainUnit,A.AltUnit,A.CFMode,A.ConFactor,(IIF(IsNull(A.Stock1),0,A.Stock1) + IIF(IsNull(A.Stock2),0,A.Stock2)) as Stock,A.DiscPer From (Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(A.D10),0,A.D10) as MinPrice,iif(isnull(A.D21), 0, A.D21) as AltPrice,iif(ISNULL(A.I7), 0, A.i7) as ApplyPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,(SElect D1 as Qty From Folio1 Where MasterCode = A.Code) as Stock1,(Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= Date()) as Stock2,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0) A  Order By A.NameAlias";
        //                            table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(A.D10,0) as MinPrice,isnull(A.D21,0) as AltPrice,ISNULL(A.I7,0) as ApplyPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0  Order By H.NameAlias";
        //                            table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }

        //                    }
        //                    else
        //                    {
        //                        if (IGType == 1)
        //                        {
        //                            if (Atype == 1)
        //                            {

        //                                if (Provider == 1)
        //                                {
        //                                    //queryStr = "SElect A.Code,A.Name,A.NameAlias,A.Price,A.MinPrice,A.AltPrice,A.ApplyPrice,A.MainUnit,A.AltUnit,A.CFMode,A.ConFactor,(IIF(IsNull(A.Stock1),0,A.Stock1) + IIF(IsNull(A.Stock2),0,A.Stock2)) as Stock,A.DiscPer From (Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(A.D10),0,A.D10) as MinPrice,iiif(isnull(A.D21),0,A.D21) as AltPrice,iif(ISNULL(A.I7),0,A.I7) as ApplyPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,(SElect D1 as Qty From Folio1 Where MasterCode = A.Code) as Stock1,(Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= Date()) as Stock2,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0) A  Order By A.NameAlias";

        //                                    queryStr = "SElect A.Code,A.Name,A.NameAlias,A.Price,A.MinPrice,A.AltPrice,A.ApplyPrice,A.MainUnit,A.AltUnit,A.CFMode,A.ConFactor,(IIF(IsNull(A.Stock1), 0, A.Stock1) + IIF(IsNull(A.Stock2), 0, A.Stock2)) as Stock,A.DiscPer From(Select A.Code, A.Name, H.NameAlias, IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(A.D10), 0, A.D10) as MinPrice,iif(isnull(A.D21), 0, A.D21) as AltPrice,iif(ISNULL(A.I7), 0, A.i7) as ApplyPrice,IIF(IsNull(B.Name), '', B.Name) as MainUnit,IIF(IsNull(C.Name), '', C.Name) as AltUnit,IIF(IsNull(A.I9), 1, A.I9) as CFMode,IIF(IsNull(A.D1), 1, A.D1) as ConFactor,(SElect D1 as Qty From Folio1 Where MasterCode = A.Code) as Stock1,(Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= Date()) as Stock2,IIF(IsNull(A.D16), 0, A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0) A Order By A.NameAlias";
        //                                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(A.D10,0) as MinPrice,isnull(A.D21,0) as AltPrice,ISNULL(A.I7,0) as ApplyPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0  Order By H.NameAlias";
        //                                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                }

        //                            }
        //                            else
        //                            {
        //                                MCStr = GetAllMCQueryStr(SCode, ConnectionString);

        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "SElect A.Code,A.Name,A.NameAlias,A.Price,A.MinPrice,A.AltPrice,A.ApplyPrice,A.MainUnit,A.AltUnit,A.CFMode,A.ConFactor,(IIF(IsNull(A.Stock1),0,A.Stock1) + IIF(IsNull(A.Stock2),0,A.Stock2)) as Stock,A.DiscPer From (Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(A.D10),0,A.D10) as MinPrice,iif(isnull(A.D21),0,A.D21) as AltPrice,iif(ISNULL(A.I7),0,A.I7) as ApplyPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,(SElect D1 as Qty From Tran4 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ")) as Stock1,(Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") And RecType = 2 And Date <= Date()) as Stock2,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0) A  Order By A.NameAlias";
        //                                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(A.D10,0) as MinPrice,isnull(A.D21,0) as AltPrice,ISNULL(A.I7,0) as ApplyPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0  Order By H.NameAlias";
        //                                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                }

        //                            }
        //                        }
        //                        else
        //                        {
        //                            IGStr = GetAllIGQueryStr(SCode, ConnectionString);
        //                            if (Atype == 1)
        //                            {

        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "SElect A.Code,A.Name,A.NameAlias,A.Price,A.MinPrice,A.AltPrice,A.ApplyPrice,A.MainUnit,A.AltUnit,A.CFMode,A.ConFactor,(IIF(IsNull(A.Stock1),0,A.Stock1) + IIF(IsNull(A.Stock2),0,A.Stock2)) as Stock,A.DiscPer From (Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(A.D10),0,A.D10) as MinPrice,iif(isnull(A.D21),0,A.D21) as AltPrice,iif(ISNULL(A.I7),0,A.I7) as ApplyPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,(SElect D1 as Qty From Folio1 Where MasterCode = A.Code) as Stock1,(Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= Date()) as Stock2,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0 And A.Parentgrp in(" + IGStr + ")) A  Order By A.NameAlias";
        //                                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(A.D10,0) as MinPrice,isnull(A.D21,0) as AltPrice,ISNULL(A.I7,0) as ApplyPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0 And A.Parentgrp in(" + IGStr + ") Order By H.NameAlias";
        //                                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                }


        //                            }
        //                            else
        //                            {
        //                                MCStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "SElect A.Code,A.Name,A.NameAlias,A.Price,A.MinPrice,A.AltPrice,A.ApplyPrice,A.MainUnit,A.AltUnit,A.CFMode,A.ConFactor,(IIF(IsNull(A.Stock1),0,A.Stock1) + IIF(IsNull(A.Stock2),0,A.Stock2)) as Stock,A.DiscPer From (Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(A.D10),0,A.D10) as MinPrice,iif(isnull(A.D21),0,A.D21) as AltPrice,iif(ISNULL(A.I7),0,A.I7) as ApplyPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,(SElect D1 as Qty From Tran4 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ")) as Stock1,(Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") And RecType = 2 And Date <= Date()) as Stock2,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0 And A.Parentgrp in(" + IGStr + ")) A  Order By A.NameAlias";
        //                                    table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(A.D10,0) as MinPrice,isnull(A.D21,0) as AltPrice,ISNULL(A.I7,0) as ApplyPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0 And A.Parentgrp in(" + IGStr + ") Order By H.NameAlias";
        //                                    table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                }
        //                            }
        //                        }
        //                    }
        //                    double Stock = 0;
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr1 in table.Rows)
        //                        {
        //                            if (Status == 0)
        //                            {
        //                                Stock = 0;
        //                                if (dr1["Stock"] != null) { Stock = clsMain.MyDouble(dr1["Stock"]); }
        //                                Item lstObj = new Item();
        //                                lstObj.Code = clsMain.MyInt(dr1["Code"]);
        //                                lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                                lstObj.NameAlias = clsMain.MyString(dr1["NameAlias"]);

        //                                lstObj.MinPrice = clsMain.MyDouble(dr1["MinPrice"]);
        //                                int ApplyPrice = 0;
        //                                ApplyPrice = clsMain.MyInt(dr1["ApplyPrice"]);
        //                                if (ApplyPrice == 0)
        //                                {
        //                                    lstObj.Price = clsMain.MyDouble(dr1["Price"]);
        //                                    lstObj.AltPrice = clsMain.MyDouble(dr1["Price"]) / clsMain.MyDouble(dr1["ConFactor"]);
        //                                }
        //                                else if (ApplyPrice == 1)
        //                                {
        //                                    lstObj.Price = clsMain.MyDouble(dr1["AltPrice"]) * clsMain.MyDouble(dr1["ConFactor"]);
        //                                    lstObj.AltPrice = clsMain.MyDouble(dr1["AltPrice"]);
        //                                }
        //                                else
        //                                {
        //                                    lstObj.Price = clsMain.MyDouble(dr1["Price"]);
        //                                    lstObj.AltPrice = clsMain.MyDouble(dr1["AltPrice"]);
        //                                }
        //                                lstObj.MainUnit = clsMain.MyString(dr1["MainUnit"]);
        //                                lstObj.AltUnit = clsMain.MyString(dr1["AltUnit"]);
        //                                lstObj.CFMode = clsMain.MyInt(dr1["CFMode"]);
        //                                lstObj.Confactor = clsMain.MyDouble(dr1["ConFactor"]);
        //                                lstObj.Stock = clsMain.MyDouble(Stock);
        //                                lstObj.DiscPer = clsMain.MyDouble(dr1["DiscPer"]);
        //                                lst.Add(lstObj);
        //                            }
        //                            else
        //                            {
        //                                Stock = 0;
        //                                if (dr1["Stock"] != null) { Stock = clsMain.MyDouble(dr1["Stock"]); }
        //                                if (Stock > 0)
        //                                {
        //                                    Item lstObj = new Item();
        //                                    lstObj.Code = clsMain.MyInt(dr1["Code"]);
        //                                    lstObj.Name = clsMain.MyString(dr1["Name"]);
        //                                    lstObj.NameAlias = clsMain.MyString(dr1["NameAlias"]);

        //                                    lstObj.MinPrice = clsMain.MyDouble(dr1["MinPrice"]);

        //                                    int ApplyPrice = 0;
        //                                    ApplyPrice = clsMain.MyInt(dr1["ApplyPrice"]);
        //                                    if (ApplyPrice == 0)
        //                                    {
        //                                        lstObj.Price = clsMain.MyDouble(dr1["Price"]);
        //                                        lstObj.AltPrice = clsMain.MyDouble(dr1["Price"]) / clsMain.MyDouble(dr1["ConFactor"]);
        //                                    }
        //                                    else if (ApplyPrice == 1)
        //                                    {
        //                                        lstObj.Price = clsMain.MyDouble(dr1["AltPrice"]) * clsMain.MyDouble(dr1["ConFactor"]);
        //                                        lstObj.AltPrice = clsMain.MyDouble(dr1["AltPrice"]);
        //                                    }
        //                                    else
        //                                    {
        //                                        lstObj.Price = clsMain.MyDouble(dr1["Price"]);
        //                                        lstObj.AltPrice = clsMain.MyDouble(dr1["AltPrice"]);
        //                                    }
        //                                    lstObj.MainUnit = clsMain.MyString(dr1["MainUnit"]);
        //                                    lstObj.AltUnit = clsMain.MyString(dr1["AltUnit"]);
        //                                    lstObj.CFMode = clsMain.MyInt(dr1["CFMode"]);
        //                                    lstObj.Confactor = clsMain.MyDouble(dr1["ConFactor"]);
        //                                    lstObj.Stock = clsMain.MyDouble(Stock);
        //                                    lstObj.DiscPer = clsMain.MyDouble(dr1["DiscPer"]);
        //                                    lst.Add(lstObj);
        //                                }
        //                            }

        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return EX.Message.ToString();
        //                }
        //                return lst;
        //            }

        //            public int chkAutoNotPost(string ConnectionString, int Mtype)
        //            {
        //                int AutoPost = 0;
        //                string sql = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    //STKtrannotpost,SRNotPost,SQuaNotPost,SONotPost
        //                    if (Mtype == 1)
        //                    {
        //                        sql = "select ReceiptNotPost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 2)
        //                    {
        //                        sql = "Select ExpensesNotPost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 3)
        //                    {
        //                        sql = "Select InvoiceNotPost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 4)
        //                    {
        //                        sql = "Select SRNotPost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 5)
        //                    {
        //                        sql = "Select SONotPost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 6)
        //                    {
        //                        sql = "Select STKtrannotpost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 7)
        //                    {
        //                        sql = "Select SQuaNotPost as AutoPost from ESVchConfig";
        //                    }
        //                    else if (Mtype == 8)
        //                    {
        //                        sql = "select AutoAccPost as AutoPost from ESVchConfig";
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        AutoPost = clsMain.MyInt(table.Rows[0]["AutoPost"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return AutoPost;
        //            }

        //            public int GetchkAllMCType(int UserID, string ConnectionString)
        //            {
        //                int MCStatus = 0;
        //                string sql = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select iif(IsNull(A.AllMC),0,A.AllMC) as MCStatus from ESUserLogin A Where SalesmanCode = " + UserID + "";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select IsNull(A.AllMC,0) as MCStatus from ESUserLogin A Where SalesmanCode = " + UserID + "";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        MCStatus = clsMain.MyInt(table.Rows[0]["MCStatus"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return MCStatus;
        //            }
        //            public int GetchkAllIGType(int UserID, string ConnectionString)
        //            {
        //                int IGStatus = 0;
        //                string sql = "";
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select iif(Isnull(SAIgrpCode),0,SAIgrpCode) as IGStatus from ESUserLogin A where A.SalesmanCode = " + UserID + "";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select IsNull(A.SAIgrpCode,0) as IGStatus from ESUserLogin A Where A.SalesmanCode = " + UserID + "";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }

        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        IGStatus = clsMain.MyInt(table.Rows[0]["IGStatus"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return IGStatus;
        //            }

        //            [HttpGet]
        //            public dynamic SearchItem(string SerachText, int SerachType, int MCCode, int RecType, int SCode, string CompCode, string FY)
        //            {
        //                Item itemDT = new Item();
        //                int Status = 0;
        //                int Atype = 0;
        //                string Msg = "";
        //                try
        //                {
        //                    string queryStr = "";
        //                    string SalesStr = "";
        //                    int IGType = 0;

        //                    string IGStr = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable table = new DataTable();
        //                    Atype = GetchkAllMCType(SCode, ConnectionString);
        //                    IGType = GetchkAllIGType(SCode, ConnectionString);
        //                    if (IGType == 1)
        //                    {
        //                        if (SerachType == 1)
        //                        {
        //                            if (Atype == 1)
        //                            {
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' Order By H.NameAlias";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' Order By H.NameAlias";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = A.Code And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.Code And Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' Order By H.NameAlias";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.Code And MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And Mastercode2 in(" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' Order By H.NameAlias";
        //                                }
        //                            }

        //                        }
        //                        else if (SerachType == 2)
        //                        {
        //                            if (Atype == 1)
        //                            {
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.ItemCode) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From (((ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code) Left Join Master1 C On B.CM1 = C.Code) Left Join Master1 D ON B.CM2 = D.Code) Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + "  Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16)";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.ItemCode Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0)";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode And Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From (((ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code) Left Join Master1 C On B.CM1 = C.Code) Left Join Master1 D ON B.CM2 = D.Code) Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16)";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode and Mastercode2 in(" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0)";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }

        //                        }
        //                        else if (SerachType == 3)
        //                        {
        //                            if (Atype == 1)
        //                            {
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.ItemCode) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16),C.Name,D.Name";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.ItemCode Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0),C.Name,D.Name";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode and Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16),C.Name,D.Name";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode and Mastercode2 in(" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + " Group By A.ItemCode,B.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0),C.Name,D.Name";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }

        //                        }
        //                    }
        //                    else

        //                    {
        //                        IGStr = GetAllIGQueryStr(SCode, ConnectionString);
        //                        if (SerachType == 1)
        //                        {
        //                            if (Atype == 1)
        //                            {
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' and A.Parentgrp in(" + IGStr + ") Order By H.NameAlias";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' and A.Parentgrp in(" + IGStr + ") Order By H.NameAlias";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = A.Code And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.Code And Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' and A.Parentgrp in(" + IGStr + ") Order By H.NameAlias";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.Code,A.Name,H.NameAlias,IsNull(A.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(B.Name,'') as MainUnit,IsNull(C.Name,'') as AltUnit,IsNull(A.I9,1) as CFMode,IsNull(A.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.Code And MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And Mastercode2 in(" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16,0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.MasterSeries = 0 And H.NameAlias = '" + SerachText + "' and A.Parentgrp in(" + IGStr + ") Order By H.NameAlias";
        //                                }
        //                            }

        //                        }
        //                        else if (SerachType == 2)
        //                        {
        //                            if (Atype == 1)
        //                            {
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.ItemCode) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From (((ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code) Left Join Master1 C On B.CM1 = C.Code) Left Join Master1 D ON B.CM2 = D.Code) Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + " And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16)";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.ItemCode Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + " And B.parentgrp in(" + IGStr + ")  Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0)";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode And Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From (((ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code) Left Join Master1 C On B.CM1 = C.Code) Left Join Master1 D ON B.CM2 = D.Code) Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + "  And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16)";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode and Mastercode2 in(" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemSerialNo A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code Where LTrim(A.SerialNo) = '" + SerachText + "' And A.MCCode = " + MCCode + "  And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,C.Name,D.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0)";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }

        //                        }
        //                        else if (SerachType == 3)
        //                        {
        //                            if (Atype == 1)
        //                            {
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.ItemCode) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + "  And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16),C.Name,D.Name";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Folio1 Where MasterCode = A.ItemCode Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + "  And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0),C.Name,D.Name";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                                if (Provider == 1)
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IIF(IsNull(B.D3),0,B.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(C.Name), '',C.Name) as MainUnit,IIF(IsNull(D.Name), '',D.Name) as AltUnit,IIF(IsNull(B.I9),1,B.I9) as CFMode,IIF(IsNull(B.D1),1,B.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.ItemCode and Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(B.D16),0,B.D16) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + "  And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,B.D3,IIF(IsNull(B.D10),0,B.D10),IIF(IsNull(B.I9),1,B.I9),IIF(IsNull(B.D1),1,B.D1),IIF(IsNull(B.D16),0,B.D16),C.Name,D.Name";
        //                                }
        //                                else
        //                                {
        //                                    queryStr = "Select A.ItemCode as Code,B.Name,'' as NameAlias,IsNull(B.D3,0) as Price,IsNull(B.D10,0) as MinPrice,IsNull(C.Name, '') as MainUnit,IsNull(D.Name, '') as AltUnit,IsNull(B.I9,1) as CFMode,IsNull(B.D1,1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From (SElect D1 as Qty From Tran4 Where MasterCode1 = A.ItemCode And MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.ItemCode and Mastercode2 in(" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(B.D16,0) as DiscPer From ItemParamDet A Inner Join Master1 B On A.ItemCode = B.Code Left Join Master1 C On B.CM1 = C.Code Left Join Master1 D ON B.CM2 = D.Code  Where A.RecType = 1 And A.BCN = '" + SerachText + "' And A.MCCode = " + MCCode + "  And B.parentgrp in(" + IGStr + ") Group By A.ItemCode,B.Name,B.D3,IsNull(B.D10,0),IsNull(B.I9,1),IsNull(B.D1,1),IsNull(B.D16,0),C.Name,D.Name";
        //                                }
        //                                if (RecType == 1)
        //                                {
        //                                    queryStr = queryStr + " Having Sum(A.Value1) >= 0.01";
        //                                }
        //                            }

        //                        }
        //                    }

        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {

        //                        itemDT.Code = clsMain.MyInt(table.Rows[0]["Code"]);
        //                        itemDT.Name = clsMain.MyString(table.Rows[0]["Name"]);
        //                        itemDT.NameAlias = clsMain.MyString(table.Rows[0]["NameAlias"]);
        //                        itemDT.Price = clsMain.MyDouble(table.Rows[0]["Price"]);
        //                        itemDT.MinPrice = clsMain.MyDouble(table.Rows[0]["MinPrice"]);
        //                        itemDT.MainUnit = clsMain.MyString(table.Rows[0]["MainUnit"]);
        //                        itemDT.AltUnit = clsMain.MyString(table.Rows[0]["AltUnit"]);
        //                        itemDT.CFMode = clsMain.MyInt(table.Rows[0]["CFMode"]);
        //                        itemDT.Confactor = clsMain.MyDouble(table.Rows[0]["ConFactor"]);
        //                        itemDT.Stock = clsMain.MyDouble(table.Rows[0]["Stock"]);
        //                        itemDT.DiscPer = clsMain.MyDouble(table.Rows[0]["DiscPer"]);


        //                        Status = 1;
        //                        Msg = "Valid Item";
        //                    }
        //                    else
        //                    {
        //                        Status = 0;
        //                        Msg = "Item Not Found";
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Message = EX.Message.ToString(), Data = itemDT };
        //                }
        //                return new { Status = Status, Message = Msg, Data = itemDT };
        //            }


        //            public List<AlertOrder> SaveSalesManPartyOrderAuto(string SalesManId, string PartyId, List<addcart> Data, List<BSDDetailCart> BS, int SeriesCode, int STPTCode, int MCCode, string Transport, string Station, string Narration, string CompCode, string FY)
        //            {
        //                List<AlertOrder> objResult = new List<AlertOrder>();

        //                string MSG = "";
        //                int Status = 0;
        //                Object VchCode = 0;

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    CFixedInterface FI = new CFixedInterface();

        //                    BusyVoucher BVch = new BusyVoucher();



        //                    string Salesman = BVch.GetMasterCodeToName(Provider, ConnectionString, clsMain.MyInt(SalesManId));

        //                    double OAmount = 0;
        //                    string XMLStr = GetOrderXML(SalesManId, Salesman, PartyId, SeriesCode, STPTCode, MCCode, Data, BS, Transport, Station, Narration, ref OAmount, ConnectionString);

        //                    bool Connect = false;

        //                    FI.CloseDB();

        //                    if (Provider == 1)
        //                    {
        //                        Connect = FI.OpenDBForYear(BusyPath, BusyDataPath, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    else
        //                    {
        //                        Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    if (Connect == true)
        //                    {
        //                        object Err = "";
        //                        bool Return = FI.SaveVchFromXML(12, XMLStr, ref Err, false, 0, ref VchCode);

        //                        if (Return == true)
        //                        {
        //                            MSG = "Success";
        //                            Status = 1;

        //                            DeleteSalesmanCartDetaial(clsMain.MyInt(SalesManId), clsMain.MyInt(PartyId), ConnectionString);

        //                            string CompCDBStr = GetConnectionStringDB(Provider, CompCode, FY);

        //                            UpdateInvoiceOtherDetails(clsMain.MyInt(VchCode), 12, SeriesCode, Salesman, clsMain.MyInt(PartyId), OAmount, ConnectionString, CompCDBStr, clsMain.MyInt(SalesManId));
        //                        }
        //                        else
        //                        {
        //                            MSG = Err.ToString();
        //                            Status = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MSG = "Unable To Connect To Company";
        //                        Status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Add(new AlertOrder()
        //                    {
        //                        Message = EX.Message.ToString(),
        //                        Sucess = 0

        //                    });
        //                    return objResult;
        //                }

        //                objResult.Add(new AlertOrder()
        //                {
        //                    Message = MSG,
        //                    Sucess = Status,
        //                    OrderId = clsMain.MyInt(VchCode)
        //                });
        //                return objResult;
        //            }


        //            //public dynamic AddTicket(TiketInfo Obj)
        //            //{
        //            //    int Status = 0;
        //            //    string Msg = "";

        //            //    try
        //            //    {
        //            //        DataTable dt = new DataTable();

        //            //        SqlParameter[] Para = new SqlParameter[10];
        //            //        Para[0] = new SqlParameter("@FirstName", clsMain.MyString(Obj.FirstName));
        //            //        Para[1] = new SqlParameter("@LastName", clsMain.MyString(Obj.LastName));
        //            //        Para[2] = new SqlParameter("@EMail", clsMain.MyString(Obj.EMail));
        //            //        Para[3] = new SqlParameter("@AreaCode", clsMain.MyString(Obj.AreaCode));
        //            //        Para[4] = new SqlParameter("@Mobile", clsMain.MyString(Obj.Mobile));
        //            //        Para[5] = new SqlParameter("@TicketType", clsMain.MyInt(Obj.TicketType));
        //            //        Para[6] = new SqlParameter("@Priority", clsMain.MyInt(Obj.Priority));
        //            //        Para[7] = new SqlParameter("@base64", clsMain.MyString(Obj.base64));
        //            //        Para[8] = new SqlParameter("@FileExt", clsMain.MyString(Obj.FileExt));
        //            //        Para[9] = new SqlParameter("@AddInfo", clsMain.MyString(Obj.AddInfo));
        //            //        dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_AddTicket", Para);
        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            Status = clsMain.MyInt(dt.Rows[0]["Status"]);
        //            //            Msg = clsMain.MyString(dt.Rows[0]["Msg"]);
        //            //        }
        //            //    }
        //            //    catch (Exception EX)
        //            //    {
        //            //        return new { Status = 0, Msg = EX.Message.ToString() };
        //            //    }
        //            //    return new { Status = Status, Msg = Msg };
        //            //}
        //            [HttpPost]
        //            public dynamic AddTicket(TiketInfo Obj, string CompCode, string FY)
        //            {
        //                int Status = 0;
        //                string Msg = "Failed";

        //                try
        //                {
        //                    string sql = "";
        //                    int R = 0;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    string Name = Obj.FirstName + " " + Obj.LastName;
        //                    sql = "Insert Into ESTicket([Date],[Name],[FirstName],[LastName],EMail,AreaCode,Mobile,TicketType,[TPriority],[base64],FileExt,AddInfo)";
        //                    if (Provider == 1)
        //                    {
        //                        sql = sql + " Values(#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + Name.Replace("'", "''") + "','" + Obj.FirstName.Replace("'", "''") + "','" + Obj.LastName.Replace("'", "''") + "','" + Obj.EMail.Replace("'", "''") + "','" + Obj.AreaCode.Replace("'", "''") + "','" + Obj.Mobile.Replace("'", "''") + "'," + Obj.TicketType + "," + Obj.Priority + ",'" + Obj.base64.Replace("'", "''") + "','" + Obj.FileExt.Replace("'", "''") + "','" + Obj.AddInfo.Replace("'", "''") + "')";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = sql + " Values('" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + Name.Replace("'", "''") + "','" + Obj.FirstName.Replace("'", "''") + "','" + Obj.LastName.Replace("'", "''") + "','" + Obj.EMail.Replace("'", "''") + "','" + Obj.AreaCode.Replace("'", "''") + "','" + Obj.Mobile.Replace("'", "''") + "'," + Obj.TicketType + "," + Obj.Priority + ",'" + Obj.base64.Replace("'", "''") + "','" + Obj.FileExt.Replace("'", "''") + "','" + Obj.AddInfo.Replace("'", "''") + "')";
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }

        //                    if (R > 0)
        //                    {
        //                        Status = 1;
        //                        Msg = "Save Sucessfully";
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Status = 0, Msg = EX.Message.ToString() };
        //                }
        //                return new { Status = Status, Msg = Msg };
        //            }
        //            [HttpPost]
        //            public AlertOrder SaveInvoice(int VchType, VchInvoice Inv, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();
        //                try
        //                {
        //                    objResult = SaveInvoiceAuto(VchType, Inv, CompCode, FY);
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Sucess = 0;
        //                    objResult.Message = EX.Message.ToString();
        //                    objResult.OrderId = 0;
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            [HttpPost]
        //            public AlertOrder SaveInvoiceAuto(int VchType, VchInvoice Inv, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();
        //                List<AlertOrder> objResult1 = new List<AlertOrder>();
        //                string MSG = "";
        //                int Status = 0;
        //                object VchCode = 0;

        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    CFixedInterface FI = new CFixedInterface();
        //                    //APIResponse msg = new APIResponse();
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string XMLStr = "";

        //                    double InvAmount = 0;

        //                    int Vtype = 0;
        //                    VchInvoice NewInv = Inv;
        //                    if (VchType == 9)
        //                    {
        //                        Vtype = 3;

        //                    }
        //                    else if (VchType == 3)
        //                    {
        //                        Vtype = 4;
        //                    }
        //                    else if (VchType == 12)
        //                    {
        //                        Vtype = 5;
        //                    }
        //                    else if (VchType == 5)
        //                    {
        //                        Vtype = 6;
        //                    }
        //                    else if (VchType == 26)
        //                    {
        //                        Vtype = 7;
        //                    }
        //                    if (chkAutoNotPost(ConnectionString, Vtype) == 1)
        //                    {
        //                        objResult = SaveManualSFA(NewInv, ConnectionString, VchType);
        //                        //objResult.Message = objResult.Message;
        //                        objResult1.Add(objResult);
        //                        //AlertOrder alertorder = 
        //                        //msg.msg  = alertorder.Message.ToString();
        //                        //msg.Sucess = alertorder.Sucess;
        //                        return objResult;
        //                    }


        //                    if (VchType == 12)
        //                    {
        //                        AutoOrderDT AutoOrderDT = GetAutoOtderDetails(ConnectionString);
        //                        if (clsMain.MyInt(NewInv.SeriesCode) == 0 && VchType == 12)
        //                        {
        //                            NewInv.SeriesCode = AutoOrderDT.SeriesCode;
        //                            NewInv.SeriesName = BVch.GetMasterCodeToName(Provider, ConnectionString, AutoOrderDT.SeriesCode).Replace("12", "");
        //                            NewInv.MCName = BVch.GetMasterCodeToName(Provider, ConnectionString, AutoOrderDT.MCCode);
        //                            NewInv.StPtName = BVch.GetAccDefaultSTPTName(Provider, ConnectionString, NewInv.AccName);
        //                            if (NewInv.StPtName.Length == 0) { NewInv.StPtName = BVch.GetMasterCodeToName(Provider, ConnectionString, AutoOrderDT.STPTCode); }
        //                        }
        //                    }
        //                    if (VchType == 12) { XMLStr = GetInvOrderXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    if (VchType == 9) { XMLStr = GetInvoiceXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    if (VchType == 3) { XMLStr = GetSRInvoiceXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    if (VchType == 5) { XMLStr = GetStockTransferInvoiceXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    if (VchType == 26) { XMLStr = GetInvSaleQuoXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    //if (VchType == 8) { XMLStr =GetInvStockJXML(VchType, NewInv, ref InvAmount, ConnectionString); }
        //                    bool Connect = false;
        //                    FI.CloseDB();

        //                    if (Provider == 1)
        //                    {
        //                        Connect = FI.OpenDBForYear(BusyPath, BusyDataPath, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    else
        //                    {
        //                        Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    if (Connect == true)
        //                    {
        //                        object Err = "";
        //                        bool Return = FI.SaveVchFromXML(VchType, XMLStr, ref Err, false, 0, ref VchCode);
        //                        // string ab = FI.GeneratePDFForInvoice(clsMain.MyInt(VchCode), "D:\\Atul\\ATUL\\Atul Code\\Addon\\ES020031(Sampada)SFA\\SetUp");
        //                        if (Return == true)
        //                        {

        //                            int AccCode = BVch.GetMasterNameToCode(Provider, ConnectionString, NewInv.AccName, 2);
        //                            MSG = "Success";
        //                            Status = 1;
        //                            if (VchType == 9) { AutoCreateBusyNewReferance(clsMain.MyInt(VchCode), NewInv.AccName, ConnectionString, 9); }

        //                            string ConCDBStr = GetConnectionStringDB(Provider, CompCode, FY);
        //                            int SCode = BVch.GetMasterNameToCode(Provider, ConnectionString, Inv.Salesman, 19);
        //                            UpdateInvoiceOtherDetails(clsMain.MyInt(VchCode), VchType, NewInv.SeriesCode, NewInv.Salesman, AccCode, InvAmount, ConnectionString, ConCDBStr, SCode);
        //                        }
        //                        else
        //                        {
        //                            MSG = Err.ToString();
        //                            Status = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MSG = "Unable To Connect To Company";
        //                        Status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Sucess = 0;
        //                    objResult.Message = EX.Message.ToString();
        //                    objResult.OrderId = 0;
        //                    return objResult;
        //                }

        //                objResult.Sucess = Status;
        //                objResult.Message = MSG;
        //                objResult.OrderId = clsMain.MyInt(VchCode);
        //                return objResult;
        //            }
        //            private string SaveImageAccInDB(string ConnectionString, string basestr64, string Exte, int VchCode, int Itype, int PType, int SeriesCode, string BillNo)
        //            {
        //                try
        //                {
        //                    string Sql = "";
        //                    int R = 0;
        //                    DataTable table = new DataTable();
        //                    if (PType == 1)
        //                    {
        //                        Sql = "Delete From Images Where Code = " + VchCode + " And Type = " + PType + "";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                        }
        //                        byte[] imageInByteArray = Convert.FromBase64String(basestr64);
        //                        string sql = "Insert into Images ([Type],[Code],[Image1],[FormatType1],[Image2],[FormatType2]) Values (" + PType + "," + VchCode + ",@Imgg,'" + "." + Exte + "','','')";
        //                        SqlConnection con = new SqlConnection(ConnectionString);
        //                        con.Open();
        //                        SqlCommand cmd = new SqlCommand(sql, con);
        //                        cmd.Parameters.Add(new SqlParameter("@Imgg", imageInByteArray));
        //                        int x = cmd.ExecuteNonQuery();
        //                        con.Close();
        //                    }
        //                    else
        //                    {
        //                        string SPath = GetAccPath(ConnectionString);
        //                        string SPath1 = GetaddonAccPath(ConnectionString);
        //                        string FName = "";
        //                        if (Directory.Exists(SPath1) == true)
        //                        {
        //                            byte[] imgByteArray = Convert.FromBase64String(basestr64);
        //                            if (imgByteArray.Length > 0)
        //                            {
        //                                string FIName = string.Concat(SPath1, "\\" + BillNo + "." + Exte);
        //                                File.WriteAllBytes(FIName, imgByteArray);
        //                            }
        //                        }
        //                        if (Directory.Exists(SPath) == true)
        //                        {
        //                            byte[] imgByteArray = Convert.FromBase64String(basestr64);
        //                            if (imgByteArray.Length > 0)
        //                            {
        //                                string FIName = string.Concat(SPath, "\\" + BillNo + "." + Exte);
        //                                File.WriteAllBytes(FIName, imgByteArray);
        //                            }
        //                        }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return "";
        //                }
        //                return "";
        //            }
        //            private string SaveImageInDB(string ConnectionString, string basestr64, string Exte, int VchCode, int Itype, int PType, int SeriesCode, string BillNo)
        //            {
        //                try
        //                {
        //                    string Sql = "";
        //                    int R = 0;
        //                    DataTable table = new DataTable();
        //                    if (PType == 1)
        //                    {
        //                        Sql = "Delete From Images Where Code = " + VchCode + " And Type = 2";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(Sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(Sql);
        //                        }
        //                        byte[] imageInByteArray = Convert.FromBase64String(basestr64);
        //                        string sql = "Insert into Images ([Type],[Code],[Image1],[FormatType1],[Image2],[FormatType2]) Values (" + Itype + "," + VchCode + ",@Imgg,'" + "." + Exte + "','','')";
        //                        SqlConnection con = new SqlConnection(ConnectionString);
        //                        con.Open();
        //                        SqlCommand cmd = new SqlCommand(sql, con);
        //                        cmd.Parameters.Add(new SqlParameter("@Imgg", imageInByteArray));
        //                        int x = cmd.ExecuteNonQuery();
        //                        con.Close();
        //                    }
        //                    else
        //                    {
        //                        string SPath = GetPath(ConnectionString, SeriesCode);
        //                        string FName = "";

        //                        if (Directory.Exists(SPath) == true)
        //                        {
        //                            byte[] imgByteArray = Convert.FromBase64String(basestr64);
        //                            if (imgByteArray.Length > 0)
        //                            {
        //                                string FIName = string.Concat(SPath, "\\" + BillNo + "." + Exte);
        //                                File.WriteAllBytes(FIName, imgByteArray);
        //                            }
        //                        }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return "";
        //                }
        //                return "";
        //            }
        //            [HttpGet]
        //            public string GetaddonAccPath(string Connectionstring)
        //            {
        //                string ImgPath = "";
        //                DataTable table = new DataTable();
        //                string str1 = "select PathCust as PCust from esimageconfig";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(str1);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(str1);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr1 in table.Rows)
        //                    {
        //                        ImgPath = clsMain.MyString(dr1["PCust"]);
        //                    }
        //                }
        //                return ImgPath;
        //            }

        //            [HttpGet]
        //            public string GetAccPath(string Connectionstring)
        //            {
        //                string ImgPath = "";
        //                DataTable table = new DataTable();
        //                string str1 = "Select C21 from Config where Rectype = 5 ";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(str1);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(str1);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr1 in table.Rows)
        //                    {
        //                        ImgPath = clsMain.MyString(dr1["C21"]);
        //                    }
        //                }
        //                return ImgPath;
        //            }

        //            [HttpGet]
        //            public string GetPath(string Connectionstring, int SeriesCode)
        //            {
        //                string ImgPath = "";
        //                DataTable table = new DataTable();
        //                string str1 = "Select C23 from Config where Rectype = 1 and L1 = " + SeriesCode + "";
        //                if (Provider == 1)
        //                {
        //                    table = new OLEDBHELPER(ConnectionString).getTable(str1);
        //                }
        //                else
        //                {
        //                    table = new SQLHELPER(ConnectionString).getTable(str1);
        //                }
        //                if (table != null && table.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr1 in table.Rows)
        //                    {
        //                        ImgPath = clsMain.MyString(dr1["C23"]);
        //                    }
        //                }
        //                return ImgPath;
        //            }
        //            private bool ChkImageMaintainInDB(string ConnectionString, int Mastertype, int IType)
        //            {
        //                string Sql = "";
        //                bool MaintainImage = false;
        //                DataTable table = new DataTable();
        //                try
        //                {
        //                    if (IType == 1 && Mastertype == 2)
        //                    {
        //                        Sql = "Select B112 as MainImag from Config where Rectype in(5)";
        //                    }
        //                    else if (IType == 1 && Mastertype == 6)
        //                    {
        //                        Sql = "Select B114 as MainImag from Config where Rectype in(5)";
        //                    }
        //                    else if (IType == 2 && Mastertype == 2)
        //                    {
        //                        Sql = "Select B116 as MainImag from Config where Rectype in(5)";
        //                    }
        //                    else if (IType == 2 && Mastertype == 6)
        //                    {
        //                        Sql = "Select B117 as MainImag from Config where Rectype in(5)";
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(Sql);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(Sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        MaintainImage = clsMain.MyBool(table.Rows[0]["MainImag"]);
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return false;
        //                }
        //                return MaintainImage;
        //            }
        //            private bool GetBusyImageSaveinginfo(string ConnectionString, int Mastertype, int Itype)
        //            {
        //                bool Mainimage = false;
        //                try
        //                {
        //                    DataTable table = new DataTable();
        //                    string sql = "";
        //                    if (Itype == 1 && Mastertype == 2)
        //                    {
        //                        sql = "Select B54 as MainImage from Config where Rectype in(63)";
        //                    }
        //                    else if (Itype == 1 && Mastertype == 6)
        //                    {
        //                        sql = "Select B55 as MainImage from Config where Rectype in(63)";
        //                    }
        //                    else if (Itype == 2 && Mastertype == 2)
        //                    {
        //                        sql = "Select B56 as MainImage from Config where Rectype in(63)";
        //                    }
        //                    else if (Itype == 2 && Mastertype == 6)
        //                    {
        //                        sql = "Select B57 as MainImage from Config where Rectype in(63)";
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        Mainimage = clsMain.MyBool(table.Rows[0]["MainImage"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return false;
        //                }
        //                return Mainimage;
        //            }

        //            [HttpPost]
        //            public AlertOrder SaveAccInvoiceAuto(VchReceipt Inv, int VchType, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();

        //                string MSG = "";
        //                int Status = 0;
        //                object VchCode = 0;
        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    CFixedInterface FI = new CFixedInterface();
        //                    string XMLStr = "";

        //                    XMLStr = GetReceiptVoucherXML(VchType, Inv, ConnectionString);
        //                    bool Connect = false;

        //                    FI.CloseDB();

        //                    if (Provider == 1)
        //                    {
        //                        Connect = FI.OpenDBForYear(BusyPath, BusyDataPath, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    else
        //                    {
        //                        Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    if (Connect == true)
        //                    {
        //                        object Err = "";
        //                        bool Return = FI.SaveVchFromXML(VchType, XMLStr, ref Err, false, 0, ref VchCode);
        //                        if (Return == true)
        //                        {
        //                            string BillNo = FI.GetVchNoFromVchCode(clsMain.MyInt(VchCode));
        //                            if (Inv.Image.Length > 0)
        //                            {
        //                                if (ChkImageMaintainInDB(ConnectionString, 2, 2) == true)
        //                                {
        //                                    if (GetBusyImageSaveinginfo(ConnectionString, 2, 2) == true)
        //                                    {
        //                                        string SaveImage = SaveImageInDB(ConnectionString, Inv.Image, Inv.Exte, clsMain.MyInt(VchCode), 2, 1, Inv.SeriesCode, BillNo);
        //                                    }
        //                                    else
        //                                    {
        //                                        string SaveImage = SaveImageInDB(ConnectionString, Inv.Image, Inv.Exte, clsMain.MyInt(VchCode), 2, 2, Inv.SeriesCode, BillNo);

        //                                    }
        //                                }
        //                            }


        //                            MSG = "Success";
        //                            Status = 1;

        //                            string ConCEDBStr = GetConnectionStringDB(Provider, CompCode, FY);

        //                            UpdateInvoiceOtherDetails(clsMain.MyInt(VchCode), VchType, Inv.SeriesCode, BVch.GetMasterCodeToName(Provider, ConnectionString, Inv.SCode), 0, 0, ConnectionString, ConCEDBStr, Inv.SCode);
        //                        }
        //                        else
        //                        {
        //                            MSG = Err.ToString();
        //                            Status = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MSG = "Unable To Connect To Company";
        //                        Status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Sucess = 0;
        //                    objResult.Message = EX.Message.ToString();
        //                    objResult.OrderId = 0;
        //                    return objResult;
        //                }

        //                objResult.Sucess = Status;
        //                objResult.Message = MSG;
        //                objResult.OrderId = clsMain.MyInt(VchCode);
        //                return objResult;
        //            }

        //            private bool ChkMaintainImage(string ConnectionString)
        //            {
        //                bool Mainimage = false;
        //                try
        //                {
        //                    DataTable table = new DataTable();
        //                    string sql = "";
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select B112 from Config where Rectype in(5)";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select B112 from Config where Rectype in(5)";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        Mainimage = clsMain.MyBool(table.Rows[0]["B112"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return false;
        //                }
        //                return Mainimage;
        //            }
        //            private bool ChkMaintainAccImage(string ConnectionString)
        //            {
        //                bool Mainimage = false;
        //                try
        //                {
        //                    DataTable table = new DataTable();
        //                    string sql = "";
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select B54,B55 from Config where Rectype in(63)";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select B54,B55 from Config where Rectype in(63)";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        Mainimage = clsMain.MyBool(table.Rows[0]["B54"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return false;
        //                }
        //                return Mainimage;
        //            }


        //            [HttpPost]
        //            public AlertOrder SaveAccInvoice(string XMLStr, int VchType, int SeriesCode, string Salesman, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();

        //                string MSG = "";
        //                int Status = 0;
        //                object VchCode = 0;
        //                try

        //                {
        //                    BusyVoucher BVch = new BusyVoucher();

        //                    CFixedInterface FI = new CFixedInterface();

        //                    bool Connect = false;

        //                    FI.CloseDB();

        //                    if (Provider == 1)
        //                    {
        //                        Connect = FI.OpenDBForYear(BusyPath, BusyDataPath, CompCode, Convert.ToInt16(FY));
        //                    }
        //                    else
        //                    {
        //                        Connect = FI.OpenCSDBForYear(BusyPath, ServerName, SUserName, SPassword, CompCode, Convert.ToInt16(FY));
        //                    }

        //                    if (Connect == true)
        //                    {
        //                        object Err = "";
        //                        bool Return = FI.SaveVchFromXML(VchType, XMLStr, ref Err, false, 0, ref VchCode);
        //                        if (Return == true)
        //                        {

        //                            MSG = "Success";
        //                            Status = 1;

        //                            string ConCDBStr = GetConnectionStringDB(Provider, CompCode, FY);
        //                            int SCode = BVch.GetMasterNameToCode(Provider, ConnectionString, Salesman, 19);
        //                            UpdateInvoiceOtherDetails(clsMain.MyInt(VchCode), VchType, SeriesCode, Salesman, 0, 0, ConnectionString, ConCDBStr, SCode);
        //                        }
        //                        else
        //                        {
        //                            MSG = Err.ToString();
        //                            Status = 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        MSG = "Unable To Connect To Company";
        //                        Status = 0;
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    objResult.Sucess = 0;
        //                    objResult.Message = EX.Message.ToString();
        //                    objResult.OrderId = 0;
        //                    return objResult;
        //                }

        //                objResult.Sucess = Status;
        //                objResult.Message = MSG;
        //                objResult.OrderId = clsMain.MyInt(VchCode);
        //                return objResult;
        //            }

        //            public void UpdateInvoiceOtherDetails(int VchCode, int VchType, int SeriesCode, string Salesman, int AccCode, double InvAmount, string ConnectionString, string ConCDBStr, int SCode)
        //            {
        //                try
        //                {
        //                    string UserName = GetSalesmanOrderUser(Salesman, ConnectionString);

        //                    string sql = "";
        //                    int R = 0;

        //                    if (UserName.Length > 0)
        //                    {
        //                        sql = "Update Checklist Set [UserName] = '" + UserName + "' Where Code = " + VchCode + " And [Type] = 2 And [Action] in (1,3)";
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                    }
        //                    sql = "Update Tran1 Set [SalesCode] = " + SCode + " Where VchCode = " + VchCode + "";
        //                    if (Provider == 1)
        //                    {
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }

        //                    bool ApprovalReq = IfApprovalRequired("", VchType, 2, 1, ConCDBStr);
        //                    if (ApprovalReq == true)
        //                    {
        //                        if (UserName.Length > 0)
        //                        {
        //                            ApprovalReq = !IfApprovalRequired(UserName, VchType, 2, 2, ConCDBStr);
        //                        }

        //                        if (ApprovalReq == true)
        //                        {
        //                            if (VchType == 12 || VchType == 26)
        //                            {
        //                                sql = "Update Tran1 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran3 Set[ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran2 SET [RecType] = 10 Where RecType = 3 and  VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                if (VchType == 12)
        //                                {
        //                                    sql = "Update Tran2 SET [RecType] = 15 Where RecType = 4 and  VchCode = " + VchCode + "";
        //                                }
        //                                else
        //                                {
        //                                    sql = "Update Tran2 SET [RecType] = 21 Where RecType = 20 and  VchCode = " + VchCode + "";
        //                                }
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }

        //                            }
        //                            else if (VchType == 9 || VchType == 3)
        //                            {
        //                                sql = "Update Tran1 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran3 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran2 SET [RecType] = 10 Where RecType = 3 and  VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran2 SET [RecType] = 9 Where RecType In (2,7) and  VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                            }
        //                            else if (VchType == 14 || VchType == 16)
        //                            {
        //                                sql = "Update Tran1 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran3 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                sql = "Update Tran2 SET [RecType] = 8 Where RecType = 1 and VchCode = " + VchCode + "";
        //                                if (Provider == 1)
        //                                {
        //                                    R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                                else
        //                                {
        //                                    R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                }
        //                            }

        //                            sql = "Delete From Checklist Where Code = " + VchCode + " And [Type] = 2 And [Action] = 3";
        //                            if (Provider == 1)
        //                            {
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (VchType == 12 || VchType == 9)
        //                            {
        //                                R = IfCreditLimitExist(AccCode, InvAmount, ConnectionString);
        //                                if (R == 0) { R = IfBillGettingOverDue(AccCode, ConnectionString); }
        //                                if (R == 1)
        //                                {
        //                                    if (VchType == 12)
        //                                    {
        //                                        sql = "Update Tran1 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        sql = "Update Tran3 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        sql = "Update Tran2 SET [RecType] = 10 Where RecType = 3 and  VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        sql = "Update Tran2 SET [RecType] = 15 Where RecType = 4 and  VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                    }
        //                                    else if (VchType == 9)
        //                                    {
        //                                        sql = "Update Tran1 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        sql = "Update Tran3 Set [ApprovalStatus] = 2  Where VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        sql = "Update Tran2 SET [RecType] = 10 Where RecType = 3 and  VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        sql = "Update Tran2 SET [RecType] = 9 Where RecType In (2,7) and  VchCode = " + VchCode + "";
        //                                        if (Provider == 1)
        //                                        {
        //                                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                        else
        //                                        {
        //                                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                        }
        //                                    }

        //                                    sql = "Delete From Checklist Where Code = " + VchCode + " And [Type] = 2 And [Action] = 3";
        //                                    if (Provider == 1)
        //                                    {
        //                                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                    else
        //                                    {
        //                                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                }
        //            }

        //            public List<Pwise> GetAgeingPwise(string pCode, string fDate, string tDate, string CompCode, string FY)
        //            {
        //                List<Pwise> obj = new List<Pwise>();
        //                DataTable dtt = new DataTable();
        //                try
        //                {
        //                    //string DbName = "Busy" + pCmpCode + "_db1" + pFY;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    string querystr = "Select M.Name,F.NSlab,F.Slab1Name,F.Slab2Name,F.Slab3Name,F.Slab4Name,F.Slab5Name,F.Slab6Name," + Environment.NewLine +
        //                        " Sum(F.Slab1) as S1Amount,Sum(F.Slab2) as S2Amount,Sum(F.Slab3) as S3Amount,Sum(F.Slab4) as S4Amount,Sum(F.Slab5)" + Environment.NewLine +
        //                        " as S5Amount,Sum(F.Slab6) as S6Amount From (Select B.MasterCode1,A.I11 as NSlab, " + Environment.NewLine +
        //                        "(Cast(A.I1 as Varchar) + '-' + Cast(A.I2 as VarChar) + ' Days') as Slab1Name,(Cast(A.I3 as Varchar) + '-' + Cast(A.I4 as VarChar) + ' Days')" + Environment.NewLine +
        //                        " as Slab2Name,(Cast(A.I5 as Varchar) + '-' + Cast(A.I6 as VarChar) + ' Days') as Slab3Name,(Cast(A.I7 as Varchar) + '-' + " + Environment.NewLine +
        //                        "Cast(A.I8 as VarChar) + ' Days') as Slab4Name,(Cast(A.I9 as Varchar) + '-' + Cast(A.I10 as VarChar) + ' Days') as Slab5Name" + Environment.NewLine +
        //                        ",(Select Case When I11 = 5 Then '>=' + Cast(A.I10 + 1 as VarChar) + ' Days' When I11 = 4 Then '>=' + Cast(A.I8 + 1 as VarChar) " + Environment.NewLine +
        //                        "+ ' Days' When I11 = 3 Then '>=' + Cast(A.I6 + 1 as VarChar) + ' Days' When I11 = 2 Then '>=' + Cast(A.I4 + 1 as VarChar) " + Environment.NewLine +
        //                        "+ ' Days' When I11 = 1 Then '>=' + Cast(A.I2 + 1 as VarChar) + ' Days' End) as Slab6Name,(Select Case When B.D >= A.I1 " + Environment.NewLine +
        //                        "And B.D <= A.I2 Then B.PAmt Else 0 End) Slab1,(Select Case When B.D >= A.I3 And B.D <= A.I4 Then B.PAmt Else 0 End) as " + Environment.NewLine +
        //                        "Slab2,(Select Case When B.D >= A.I5 And B.D <= A.I6 Then B.PAmt Else 0 End) as Slab3,(Select Case When B.D >= A.I7 And " + Environment.NewLine +
        //                        "B.D <= A.I8 Then B.PAmt Else 0 End) as Slab4,(Select Case When B.D >= A.I9 And B.D <= A.I10 Then B.PAmt Else 0 End) as " + Environment.NewLine +
        //                        "Slab5, (Select Case When I11 = 5 Then(Select Case When B.D > I10 Then B.PAmt Else 0 End) When I11 = 4 Then(Select Case " + Environment.NewLine +
        //                        "When B.D > I8 Then B.PAmt Else 0 End) When I11 = 3 Then(Select Case When B.D > I6 Then B.PAmt Else 0 End) When I11 = " + Environment.NewLine +
        //                        "2 Then(Select Case When B.D > I4 Then B.PAmt Else 0 End) When I11 = 1 Then(Select Case When B.D > I2 Then B.PAmt Else 0 End) " + Environment.NewLine +
        //                        "End) as Slab6 From(Select S.I1, S.I2, S.I3, S.I4, S.I5, S.I6, S.I7, S.I8, S.I9, S.I10, S.I11 From Config S Where S.RecType = 9) " + Environment.NewLine +
        //                        "A Inner Join (Select A.MasterCode1, A.D, Sum(A.PAmount) as PAmt From (SElect A.MasterCode1, A.[Date], Sum(B.Value1) * " + Environment.NewLine +
        //                        "(-1) as PAmount, datediff(D, A.[Date], GetDate()) as D from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And " + Environment.NewLine +
        //                        "A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = '" + pCode + "' And A.RecType = 1 And A.Method = " + Environment.NewLine +
        //                        "1 And A.Date >= '" + fDate + "' And A.Date <= '" + tDate + "' And B.Date <= GetDate() Group By A.MasterCode1, A.[Date] " + Environment.NewLine +
        //                        "Having Round(SUM(B.Value1), 2) <= -0.01) A Group By A.MasterCode1, A.D) B On 1 = 1) F Inner Join Master1 M On " + Environment.NewLine +
        //                        "F.MasterCode1 = M.Code Group By M.Name,F.NSlab,F.Slab1Name,F.Slab2Name,F.Slab3Name,F.Slab4Name,F.Slab5Name,F.Slab6Name";
        //                    dtt = new SQLHELPER(ConnectionString).getTable(querystr);


        //                    // System.Data.DataTable dtt = new SQLHELPER(this.ConnectionString).getTable(querystr);

        //                    if (dtt != null && dtt.Rows.Count > 0)
        //                    {
        //                        for (int i = 0; i < dtt.Columns.Count; i++)
        //                        {
        //                            if (dtt.Rows.Count > 0)
        //                            {
        //                                for (int j = 0; j < dtt.Rows.Count; j++)
        //                                {
        //                                    if (dtt.Columns[i].ColumnName == "Slab1Name" && clsMain.MyString(dtt.Rows[j]) != "0-0 Days")
        //                                    {
        //                                        Pwise pw = new Pwise();
        //                                        if (dtt.Rows[j]["Slab1Name"].ToString() != "0-0 Days")
        //                                        {
        //                                            pw.S = dtt.Rows[j]["Slab1Name"].ToString();
        //                                            pw.A = dtt.Rows[j]["S1Amount"].ToString();

        //                                            obj.Add(pw);
        //                                        }

        //                                    }
        //                                    if (dtt.Columns[i].ColumnName == "Slab2Name" && clsMain.MyString(dtt.Rows[j]) != "0-0 Days")
        //                                    {
        //                                        Pwise pw = new Pwise();
        //                                        if (dtt.Rows[j]["Slab2Name"].ToString() != "0-0 Days")
        //                                        {
        //                                            pw.S = dtt.Rows[j]["Slab2Name"].ToString();
        //                                            pw.A = dtt.Rows[j]["S2Amount"].ToString();

        //                                            obj.Add(pw);

        //                                        }
        //                                    }
        //                                    if (dtt.Columns[i].ColumnName == "Slab3Name" && clsMain.MyString(dtt.Rows[j]) != "0-0 Days")
        //                                    {
        //                                        Pwise pw = new Pwise();
        //                                        if (dtt.Rows[j]["Slab3Name"].ToString() != "0-0 Days")
        //                                        {
        //                                            pw.S = dtt.Rows[j]["Slab3Name"].ToString();
        //                                            pw.A = dtt.Rows[j]["S3Amount"].ToString();

        //                                            obj.Add(pw);
        //                                        }

        //                                    }
        //                                    if (dtt.Columns[i].ColumnName == "Slab4Name" && clsMain.MyString(dtt.Rows[j]) != "0-0 Days")
        //                                    {
        //                                        Pwise pw = new Pwise();
        //                                        if (dtt.Rows[j]["Slab4Name"].ToString() != "0-0 Days")
        //                                        {
        //                                            pw.S = dtt.Rows[j]["Slab4Name"].ToString();
        //                                            pw.A = dtt.Rows[j]["S4Amount"].ToString();

        //                                            obj.Add(pw);
        //                                        }

        //                                    }
        //                                    if (dtt.Columns[i].ColumnName == "Slab5Name" && clsMain.MyString(dtt.Rows[j]) != "0-0 Days")
        //                                    {
        //                                        Pwise pw = new Pwise();
        //                                        if (dtt.Rows[j]["Slab5Name"].ToString() != "0-0 Days")
        //                                        {
        //                                            pw.S = dtt.Rows[j]["Slab5Name"].ToString();
        //                                            pw.A = dtt.Rows[j]["S5Amount"].ToString();

        //                                            obj.Add(pw);
        //                                        }

        //                                    }
        //                                    if (dtt.Columns[i].ColumnName == "Slab6Name" && clsMain.MyString(dtt.Rows[j]) != "0-0 Days")
        //                                    {
        //                                        Pwise pw = new Pwise();
        //                                        pw.S = dtt.Rows[j]["Slab6Name"].ToString();
        //                                        pw.A = dtt.Rows[j]["S6Amount"].ToString();

        //                                        obj.Add(pw);
        //                                    }

        //                                }
        //                            }
        //                            else
        //                            {
        //                                Pwise pv = new Pwise();
        //                                pv.A = "No Row Found";
        //                                obj.Add(pv);
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        Pwise pv = new Pwise();
        //                        pv.A = "No Data Found";
        //                        obj.Add(pv);
        //                    }
        //                    return obj;
        //                }
        //                catch (Exception ex)
        //                {

        //                    Pwise pv = new Pwise();
        //                    pv.A = ex.Message.ToString();
        //                    obj.Add(pv);
        //                    return obj;
        //                }
        //            }

        private string GetConnectionString(int Provider, string CompCode, string FY)
        {
            string DBName = "";
            string ConnectionString = "";

            if (Provider == 1)
            {
                DBName = "db1" + FY + ".bds";

                string DBFilePath = BusyDataPath + "\\" + CompCode + "\\" + DBName;
                ConnectionString = "Provider=Microsoft.JET.OLEDB.4.0;data source=" + DBFilePath + ";Mode=ReadWrite;Persist Security Info=False;Jet OLEDB:Database Password=ILoveMyINDIA";
            }
            else
            {
                DBName = "Busy" + CompCode + "_db1" + FY;
                ConnectionString = "Data Source = " + ServerName + "; Initial catalog = " + DBName + "; Uid = " + SUserName + "; Pwd =" + SPassword + ";Max Pool Size=500";
            }

            return ConnectionString;
        }

        //            private string GetConnectionStringDB(int Provider, string CompCode, string FY)
        //            {
        //                string DBName = "";
        //                string GetConnectionStringDB = "";

        //                if (Provider == 1)
        //                {
        //                    DBName = "db.bds";
        //                    string DBFilePath = BusyDataPath + "\\" + CompCode + "\\" + DBName;
        //                    GetConnectionStringDB = "Provider=Microsoft.JET.OLEDB.4.0;data source=" + DBFilePath + ";Mode=ReadWrite;Persist Security Info=False;Jet OLEDB:Database Password=ILoveMyINDIA";
        //                }
        //                else
        //                {
        //                    DBName = "Busy" + CompCode + "_db";
        //                    GetConnectionStringDB = "Data Source = " + ServerName + "; Initial catalog = " + DBName + "; Uid = " + SUserName + "; Pwd =" + SPassword + ";Max Pool Size=500";
        //                }

        //                return GetConnectionStringDB;
        //            }

        //            private bool IfApprovalRequired(string UserName, int VchMastType, int AppType, int RecType, string ConnectionString)
        //            {
        //                bool AppRequired = false;
        //                try
        //                {
        //                    string sql = "";
        //                    DataTable table = new DataTable();
        //                    if (RecType == 1)
        //                    {
        //                        sql = "Select Name from UserControl Where RecType = 6 And I2 = " + VchMastType + " And I1 = " + AppType + "";
        //                    }
        //                    else
        //                    {
        //                        sql = "Select Name from UserControl Where RecType = 6 And Name = '" + UserName + "' And I2 = " + VchMastType + " And I1 = " + AppType + "";
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        AppRequired = true;
        //                    }
        //                }
        //                catch
        //                {
        //                    return false;
        //                }
        //                return AppRequired;
        //            }

        //            private string GetSalesmanOrderUser(string Salesman, string ConnectionString)
        //            {
        //                string OUserName = "";
        //                try
        //                {
        //                    DataTable table = new DataTable();
        //                    string sql = "";
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select Top 1 IIF(IsNull(B.OUser),'',B.OUser) as OUserName From Master1 A Inner Join ESUserLogin B On A.Code = B.SalesmanCode Where A.Name = '" + Salesman + "' And A.MasterType = 19 And OUser Not In ('-N/A-')";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "Select Top 1 IsNull(B.OUser,'') as OUserName From Master1 A Inner Join ESUserLogin B On A.Code = B.SalesmanCode Where A.Name = '" + Salesman + "' And A.MasterType = 19 And OUser Not In ('-N/A-')";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        OUserName = clsMain.MyString(table.Rows[0]["OUserName"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return OUserName;
        //            }
        //            private int GetCustImgConfig(string ConnectionString, int Itype)
        //            {
        //                int NewCust = 0;
        //                try
        //                {
        //                    DataTable table = new DataTable();
        //                    string sql = "";
        //                    if (Provider == 1)
        //                    {
        //                        sql = "select iif(isnull(chkNewCustomer),0,chkNewCustomer) as NewCust,iif(isnull(MaintainCustDB),0,MaintainCustDB) as MaintCustDB,iif(isnull(PathCust),'',PathCust) as PCust,iif(isnull(CheckIn),0,CheckIn) as ChkIn,iif(isnull(Maintaincheckdb),0,Maintaincheckdb) as MaintChkDb,iif(isnull(PathCheck),'',PathCheck) as PCheck,iif(isnull(chkPayment),0,chkPayment) as ChkPay,iif(isnull(MaintainPaymentDB),0,MaintainPaymentDB) as MaintPayDB,iif(isnull(PathPayment),'',PathPayment) as PPayment,iif(isnull(chkExpense),0,chkExpense) as ChkExpe,iif(isnull(MaintainExpenseDB),0,MaintainExpenseDB) as MaintExpDB,iif(isnull(PathExpense),'',PathExpense) as PExpense from esimageconfig";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "select isnull(chkNewCustomer,0) as NewCust,isnull(MaintainCustDB,0) as MaintCustDB,isnull(PathCust,'') as PCust,isnull(CheckIn,0) as ChkIn,isnull(Maintaincheckdb,0) as MaintChkDb,isnull(PathCheck,'') as PCheck,isnull(chkPayment,0) as ChkPay,isnull(MaintainPaymentDB,0) as MaintPayDB,isnull(PathPayment,'') as PPayment,isnull(chkExpense,0) as ChkExpe,isnull(MaintainExpenseDB,0) as MaintExpDB,isnull(PathExpense,'') as PExpense   from esimageconfig";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        if (Itype == 1)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["NewCust"]);
        //                        }
        //                        else if (Itype == 2)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["MaintCustDB"]);
        //                        }
        //                        else if (Itype == 3)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["ChkIn"]);
        //                        }
        //                        else if (Itype == 4)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["MaintChkDb"]);
        //                        }
        //                        else if (Itype == 5)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["ChkPay"]);
        //                        }
        //                        else if (Itype == 6)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["MaintPayDB"]);
        //                        }
        //                        else if (Itype == 7)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["ChkExpe"]);
        //                        }
        //                        else if (Itype == 8)
        //                        {
        //                            NewCust = clsMain.MyInt(table.Rows[0]["MaintExpDB"]);
        //                        }

        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return NewCust;
        //            }

        //            private string GetImgPathConfig(string ConnectionString, int Itype)
        //            {
        //                string ImgPath = "";
        //                try
        //                {
        //                    DataTable table = new DataTable();
        //                    string sql = "";
        //                    if (Provider == 1)
        //                    {
        //                        sql = "select iif(isnull(chkNewCustomer),0,chkNewCustomer) as NewCust,iif(isnull(MaintainCustDB),0,MaintainCustDB) as MaintCustDB,iif(isnull(PathCust),'',PathCust) as PCust,iif(isnull(CheckIn),0,CheckIn) as ChkIn,iif(isnull(Maintaincheckdb),0,Maintaincheckdb) as MaintChkDb,iif(isnull(PathCheck),'',PathCheck) as PCheck,iif(isnull(chkPayment),0,chkPayment) as ChkPay,iif(isnull(MaintainPaymentDB),0,MaintainPaymentDB) as MaintPayDB,iif(isnull(PathPayment),'',PathPayment) as PPayment,iif(isnull(chkExpense),0,chkExpense) as ChkExpe,iif(isnull(MaintainExpenseDB),0,MaintainExpenseDB) as MaintExpDB,iif(isnull(PathExpense),'',PathExpense) as PExpense from esimageconfig";
        //                        table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "select isnull(chkNewCustomer,0) as NewCust,isnull(MaintainCustDB,0) as MaintCustDB,isnull(PathCust,'') as PCust,isnull(CheckIn,0) as ChkIn,isnull(Maintaincheckdb,0) as MaintChkDb,isnull(PathCheck,'') as PCheck,isnull(chkPayment,0) as ChkPay,isnull(MaintainPaymentDB,0) as MaintPayDB,isnull(PathPayment,'') as PPayment,isnull(chkExpense,0) as ChkExpe,isnull(MaintainExpenseDB,0) as MaintExpDB,isnull(PathExpense,'') as PExpense   from esimageconfig";
        //                        table = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (table != null && table.Rows.Count > 0)
        //                    {
        //                        if (Itype == 1)
        //                        {
        //                            ImgPath = clsMain.MyString(table.Rows[0]["PCust"]);
        //                        }
        //                        else if (Itype == 2)
        //                        {
        //                            ImgPath = clsMain.MyString(table.Rows[0]["PCheck"]);
        //                        }
        //                        else if (Itype == 3)
        //                        {
        //                            ImgPath = clsMain.MyString(table.Rows[0]["PPayment"]);
        //                        }
        //                        else if (Itype == 4)
        //                        {
        //                            ImgPath = clsMain.MyString(table.Rows[0]["PExpense"]);
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return ImgPath;
        //            }

        //            //private int GetImgConfig(string ConnectionString,int MaintCustDb,string PCust,int ChkIn,int MaintChkDb,string PCheck,int ChkPay,int MaintPayDB,string PPayment,int ChkExpe,int MaintExpDB,string PExpense)
        //            //{
        //            //    int NewCust = 0;
        //            //    try
        //            //    {
        //            //        DataTable table = new DataTable();
        //            //        string sql = "";
        //            //        if (Provider == 1)
        //            //        {
        //            //            sql = "select iif(isnull(chkNewCustomer),0,chkNewCustomer)) as NewCust,iif(isnull(MaintainCustDB),0,MaintainCustDB) as MaintCustDB,iif(isnull(PathCust),'',PathCust) as PCust,iif(isnull(CheckIn),0,CheckIn) as ChkIn,iif(isnull(Maintaincheckdb),0,Maintaincheckdb) as MaintChkDb,iif(isnull(PathCheck),'',PathCheck) as PCheck,iif(isnull(chkPayment),0,chkPayment) as ChkPay,iif(isnull(MaintainPaymentDB),0,MaintainPaymentDB) as MaintPayDB,iif(isnull(PathPayment),'',PathPayment) as PPayment,iif(isnull(chkExpense),0,chkExpense) as ChkExpe,iif(isnull(MaintainExpenseDB),0,MaintainExpenseDB) as MaintExpDB,iif(isnull(PathExpense),'',PathExpense) as PExpense from esimageconfig";
        //            //            table = new OLEDBHELPER(ConnectionString).getTable(sql);
        //            //        }
        //            //        else
        //            //        {
        //            //            sql = "select isnull(chkNewCustomer,0) as NewCust,isnull(MaintainCustDB,0) as MaintCustDB,isnull(PathCust,'') as PCust,isnull(CheckIn,0) as ChkIn,isnull(Maintaincheckdb,0) as MaintChkDb,isnull(PathCheck,'') as PCheck,isnull(chkPayment,0) as ChkPay,isnull(MaintainPaymentDB,0) as MaintPayDB,isnull(PathPayment,'') as PPayment,isnull(chkExpense,0) as ChkExpe,isnull(MaintainExpenseDB,0) as MaintExpDB,isnull(PathExpense,'') as PExpense   from esimageconfig";
        //            //            table = new SQLHELPER(ConnectionString).getTable(sql);
        //            //        }
        //            //        if (table != null && table.Rows.Count > 0)
        //            //        {
        //            //            NewCust = clsMain.MyInt(table.Rows[0]["NewCust"]);
        //            //            MaintCustDb = clsMain.MyInt(table.Rows[0]["MaintCustDB"]);
        //            //            PCust = clsMain.MyString(table.Rows[0]["PCust"]);
        //            //            ChkIn = clsMain.MyInt(table.Rows[0]["ChkIn"]);
        //            //            MaintChkDb = clsMain.MyInt(table.Rows[0]["MaintChkDb"]);
        //            //            PCheck = clsMain.MyString(table.Rows[0]["PCheck"]);
        //            //            ChkPay = clsMain.MyInt(table.Rows[0]["ChkPay"]);
        //            //            MaintPayDB = clsMain.MyInt(table.Rows[0]["MaintPayDB"]);
        //            //            PPayment = clsMain.MyString(table.Rows[0]["PPayment"]);
        //            //            ChkExpe = clsMain.MyInt(table.Rows[0]["ChkExpe"]);
        //            //            MaintExpDB = clsMain.MyInt(table.Rows[0]["MaintExpDB"]);
        //            //            PExpense = clsMain.MyString(table.Rows[0]["PExpense"]);
        //            //        }
        //            //    }
        //            //    catch
        //            //    {
        //            //        return 0;
        //            //    }
        //            //    return NewCust;
        //            //}

        //            public void DeleteSalesmanCartDetaial(int SalesCode, int PartyID, string ConnectionString)
        //            {
        //                try
        //                {
        //                    int Return = 0;

        //                    string str = "Delete from ESSalesMenCart Where SalesmanID = " + SalesCode + " And PartyID = " + PartyID + "";
        //                    if (Provider == 1)
        //                    {
        //                        Return = new OLEDBHELPER(ConnectionString).ExecuteSQL(str);
        //                    }
        //                    else
        //                    {
        //                        Return = new SQLHELPER(ConnectionString).ExecuteSQL(str);
        //                    }
        //                }
        //                catch
        //                {

        //                }
        //            }

        //            public List<AlertOrder> SaveSalesManPartyOrderManual(List<addcart> Obj)
        //            {
        //                List<AlertOrder> objResult = new List<AlertOrder>();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    int OrderId = 0;
        //                    foreach (var item in Obj)
        //                    {
        //                        SqlParameter[] Para = new SqlParameter[23];
        //                        Para[0] = new SqlParameter("@SalesManId", clsMain.MyString(item.SalesManId));
        //                        Para[1] = new SqlParameter("@PartyId", clsMain.MyString(item.PartyId));
        //                        Para[2] = new SqlParameter("@ItemPrice", clsMain.MyString(item.Price));
        //                        Para[3] = new SqlParameter("@Amount", clsMain.MyString(item.TotalPrice));
        //                        Para[4] = new SqlParameter("@ItemId", clsMain.MyString(item.ProductId));
        //                        Para[5] = new SqlParameter("@ItemQty", clsMain.MyString(item.MinQty));
        //                        Para[6] = new SqlParameter("@TotalAmount", clsMain.MyString(item.TotalPrice));
        //                        Para[7] = new SqlParameter("@OrderId", clsMain.MyInt(OrderId));
        //                        Para[8] = new SqlParameter("@Disc", clsMain.MyString(item.Disc));
        //                        Para[9] = new SqlParameter("@DiscAmt", clsMain.MyDouble(item.DiscAmt));
        //                        Para[10] = new SqlParameter("@FItemCode", clsMain.MyInt(item.FItemCode));
        //                        Para[11] = new SqlParameter("@FreeQty", clsMain.MyDouble(item.FreeQty));
        //                        Para[12] = new SqlParameter("@FItemPrice", clsMain.MyDouble(item.FItemPrice));
        //                        Para[13] = new SqlParameter("@SchemeCode", clsMain.MyDouble(item.SchemeCode));
        //                        Para[14] = new SqlParameter("@SchemeType", clsMain.MyDouble(item.SchemeType));
        //                        Para[15] = new SqlParameter("@AltQty", clsMain.MyString(item.AltQty));
        //                        Para[16] = new SqlParameter("@Confactor", clsMain.MyString(item.Confactor));
        //                        Para[17] = new SqlParameter("@SalePrice", clsMain.MyDouble(item.SalePrice));
        //                        Para[18] = new SqlParameter("@Remarks", clsMain.MyString(item.Remarks));
        //                        Para[19] = new SqlParameter("@Description1", clsMain.MyString(item.Description1));
        //                        Para[20] = new SqlParameter("@Description2", clsMain.MyString(item.Description2));
        //                        Para[21] = new SqlParameter("@Description3", clsMain.MyString(item.Description3));
        //                        Para[22] = new SqlParameter("@Description4", clsMain.MyString(item.Description4));
        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_SaveOrder", Para);

        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            OrderId = clsMain.MyInt(dt.Rows[0]["OrderId"]);
        //                        }
        //                    }
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        objResult = dt.AsEnumerable()
        //                        .Select(row => new AlertOrder()
        //                        {
        //                            Message = row.Field<string>("msg"),
        //                            Sucess = row.Field<int>("Sucess"),
        //                            OrderId = row.Field<int>("OrderId"),

        //                        }).ToList();
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public List<AlertOrder> SaveSalesManPartyOrderManualSFA(List<addcart> Obj, int SalesmanID, int PartyID, double TotalAmt, string CompCode, string FY)
        //            {
        //                List<AlertOrder> objResult = new List<AlertOrder>();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    int OrderId = 0;
        //                    string sql = "";
        //                    int R = 0;

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    if (Provider == 1)
        //                    {
        //                        sql = "insert into ESOrderHeaderDetails(SalesManId,PartyId,TotalAmount,OrderDate,Sync,BusyVchCode,Vchtype,SoTYpe) Values (" + SalesmanID + "," + PartyID + "," + TotalAmt + ",#" + DateTime.Now.ToString("dd/MMM/yyyy") + "#,0,0,12,1)";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "insert into ESOrderHeaderDetails(SalesManId,PartyId,TotalAmount,OrderDate,Sync,BusyVchCode,Vchtype,SoTYpe) Values (" + SalesmanID + "," + PartyID + "," + TotalAmt + ",'" + DateTime.Now.ToString("dd/MMM/yyyy") + "',0,0,12,1)";
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }

        //                    if (R > 0)
        //                    {
        //                        sql = "Select Max(ID) as OrderID From ESOrderHeaderDetails Where SalesmanID = " + SalesmanID + " And PartyID = " + PartyID + "";
        //                        if (Provider == 1)
        //                        {
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                        }
        //                        else
        //                        {
        //                            dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                        }
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            if (dt.Rows[0]["OrderID"] != null) { OrderId = clsMain.MyInt(dt.Rows[0]["OrderID"]); }

        //                            if (OrderId > 0)
        //                            {
        //                                foreach (var item in Obj)
        //                                {
        //                                    sql = "insert into ESOrderDetails (OrderId, ProductId, Qty, Rate, Amount, Disc, DiscAmt, FItemCode, FreeQty, FItemPrice, SchemeCode, SchemeType, AltQty, Confactor, SalePrice, Remarks, Description1, Description2, Description3, Description4,Vchtype)";
        //                                    sql = sql + " values (" + OrderId + "," + item.ProductId + "," + item.MinQty + "," + item.Price + "," + item.TotalPrice + "," + item.Disc + "," + item.DiscAmt + "," + item.FItemCode + "," + item.FreeQty + "," + item.FItemPrice + "," + item.SchemeCode + "," + item.SchemeType + "," + item.AltQty + "," + item.Confactor + "," + item.SalePrice + ",'" + item.Remarks.Replace("'", "''") + "','" + item.Description1.Replace("'", "''") + "','" + item.Description2.Replace("'", "''") + "','" + item.Description3.Replace("'", "''") + "','" + item.Description4.Replace("'", "''") + "',12)";
        //                                    if (Provider == 1)
        //                                    {
        //                                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                    else
        //                                    {
        //                                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }

        //                    if (OrderId > 0) { DeleteSalesmanCartDetaial(SalesmanID, PartyID, ConnectionString); }

        //                    objResult.Add(new AlertOrder
        //                    {
        //                        Message = "Saved",
        //                        Sucess = 1,
        //                        OrderId = OrderId
        //                    });
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public AlertOrder SaveManualExpenseSFA(ExpenseVch Obj1, string ConStr, int VchType)
        //            {
        //                AlertOrder objResult = new AlertOrder();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    int OrderId = 0;
        //                    string sql = "";
        //                    int R = 0;
        //                    BusyVoucher BVch = new BusyVoucher();

        //                    // string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    int SOType = 0;
        //                    int AccCode = 0;

        //                    if (Provider == 1)
        //                    {
        //                        sql = "insert into ESOrderHeaderDetails(VchType,SalesManId,PartyId,TotalAmount,OrderDate,SOType) Values (" + VchType + "," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.Salesman, 19) + ",0," + Obj1.ExpAmount + ",#" + DateTime.Now.ToString("dd/MMM/yyyy") + "#," + SOType + ")";
        //                        R = new OLEDBHELPER(ConStr).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "insert into ESOrderHeaderDetails(VchType,SalesManId,PartyId,TotalAmount,OrderDate,SOType) Values (" + VchType + "," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.Salesman, 19) + ",0," + Obj1.ExpAmount + ",'" + DateTime.Now.ToString("dd/MMM/yyyy") + "'," + SOType + ")";
        //                        R = new SQLHELPER(ConStr).ExecuteSQL(sql);
        //                    }

        //                    if (R > 0)
        //                    {
        //                        sql = "Select Max(ID) as OrderID From ESOrderHeaderDetails Where SalesmanID = " + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.Salesman, 19) + "";
        //                        if (Provider == 1)
        //                        {
        //                            dt = new OLEDBHELPER(ConStr).getTable(sql);
        //                        }
        //                        else
        //                        {
        //                            dt = new SQLHELPER(ConStr).getTable(sql);
        //                        }
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            if (dt.Rows[0]["OrderID"] != null) { OrderId = clsMain.MyInt(dt.Rows[0]["OrderID"]); }

        //                            if (OrderId > 0)
        //                            {
        //                                foreach (var item in Obj1.Expenses)
        //                                {
        //                                    sql = "insert into ESOrderDetails (Vchtype,OrderId, ExpenseH,FromDate,ToDate, Amount,Remarks, Description1)";

        //                                    if (Provider == 1)
        //                                    {
        //                                        sql = sql + " values (" + VchType + "," + OrderId + ",'" + item.ExpenseH + "',#" + item.FromDate.Trim() + "#,#" + item.ToDate.Trim() + "#," + item.Amount + ",'" + item.Transport.Replace("'", "''") + "','" + item.Description.Replace("'", "''") + "')";
        //                                        R = new OLEDBHELPER(ConStr).ExecuteSQL(sql);
        //                                    }
        //                                    else
        //                                    {
        //                                        sql = sql + " values (" + VchType + "," + OrderId + ",'" + item.ExpenseH + "','" + item.FromDate.Trim() + "','" + item.ToDate.Trim() + "'," + item.Amount + ",'" + item.Transport.Replace("'", "''") + "','" + item.Description.Replace("'", "''") + "')";
        //                                        R = new SQLHELPER(ConStr).ExecuteSQL(sql);
        //                                    }
        //                                    AccCode = GetExpenseHeadAccount(item.ExpenseH, ConStr);
        //                                    sql = "Update ESOrderHeaderDetails Set PartyId = " + AccCode + " where Id = " + OrderId + "";
        //                                    R = new SQLHELPER(ConStr).ExecuteSQL(sql);
        //                                }
        //                            }
        //                        }
        //                    }

        //                    // if (OrderId > 0) { DeleteSalesmanCartDetaial(SalesmanID, PartyID, ConnectionString); }

        //                    //objResult.Add(new AlertOrder
        //                    //{
        //                    objResult.Message = "Saved In DataBase";
        //                    objResult.Sucess = 1;
        //                    objResult.OrderId = OrderId;
        //                    //});
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public AlertOrder SaveManualSFA(VchInvoice Obj1, string ConStr, int VchType)
        //            {
        //                AlertOrder objResult = new AlertOrder();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    int OrderId = 0;
        //                    string sql = "";
        //                    int R = 0;
        //                    BusyVoucher BVch = new BusyVoucher();

        //                    // string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    int SOType = 0;
        //                    if (VchType == 12) { SOType = 2; }
        //                    int Acccode = 0;
        //                    if (VchType == 5) { Acccode = BVch.GetMasterNameToCode(Provider, ConStr, Obj1.AccName, 11); } else { Acccode = BVch.GetMasterNameToCode(Provider, ConStr, Obj1.AccName, 2); }
        //                    if (Provider == 1)
        //                    {
        //                        sql = "insert into ESOrderHeaderDetails(VchType,SalesManId,PartyId,SCode,MCCode,Remarks,StPTCode,Station,Transport,OrderDate,Sync,BusyVchCode,SOType) Values (" + VchType + "," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.Salesman, 19) + "," + Acccode + "," + Obj1.SeriesCode + "," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.MCName, 11) + ",'" + Obj1.Remarks + "'," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.StPtName, 13) + ",'" + Obj1.Station + "','" + Obj1.Transport + "',#" + DateTime.Now.ToString("dd/MMM/yyyy") + "#,0,0," + SOType + ")";
        //                        R = new OLEDBHELPER(ConStr).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "insert into ESOrderHeaderDetails(VchType,SalesManId,PartyId,SCode,MCCode,Remarks,StPTCode,Station,Transport,OrderDate,Sync,BusyVchCode,SOType) Values (" + VchType + "," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.Salesman, 19) + "," + Acccode + "," + Obj1.SeriesCode + "," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.MCName, 11) + ",'" + Obj1.Remarks + "'," + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.StPtName, 13) + ",'" + Obj1.Station + "','" + Obj1.Transport + "','" + DateTime.Now.ToString("dd/MMM/yyyy") + "',0,0," + SOType + ")";
        //                        R = new SQLHELPER(ConStr).ExecuteSQL(sql);
        //                    }

        //                    if (R > 0)
        //                    {
        //                        sql = "Select Max(ID) as OrderID From ESOrderHeaderDetails Where SalesmanID = " + BVch.GetMasterNameToCode(Provider, ConStr, Obj1.Salesman, 19) + " And PartyID = " + Acccode + "";
        //                        if (Provider == 1)
        //                        {
        //                            dt = new OLEDBHELPER(ConStr).getTable(sql);
        //                        }
        //                        else
        //                        {
        //                            dt = new SQLHELPER(ConStr).getTable(sql);
        //                        }
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            if (dt.Rows[0]["OrderID"] != null) { OrderId = clsMain.MyInt(dt.Rows[0]["OrderID"]); }

        //                            if (OrderId > 0)
        //                            {
        //                                foreach (var item in Obj1.ItemDT)
        //                                {
        //                                    sql = "insert into ESOrderDetails (Vchtype,OrderId, ProductId, Qty, Rate, Amount, Disc, DiscAmt, AltQty, Confactor, AddDisc, Remarks, Description1, Description2, Description3, Description4,SalePrice)";
        //                                    sql = sql + " values (" + VchType + "," + OrderId + "," + item.ItemCode + "," + item.Qty + "," + item.Price + "," + item.Amount + "," + item.DiscPerent + "," + item.Discount + "," + item.AltQty + "," + item.ConFactor + "," + item.AddDiscount + ",'" + item.IRemarks.Replace("'", "''") + "','" + item.IDescription1.Replace("'", "''") + "','" + item.IDescription2.Replace("'", "''") + "','" + item.IDescription3.Replace("'", "''") + "','" + item.IDescription4.Replace("'", "''") + "'," + item.ListPrice + ")";
        //                                    if (Provider == 1)
        //                                    {
        //                                        R = new OLEDBHELPER(ConStr).ExecuteSQL(sql);
        //                                    }
        //                                    else
        //                                    {
        //                                        R = new SQLHELPER(ConStr).ExecuteSQL(sql);
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }

        //                    // if (OrderId > 0) { DeleteSalesmanCartDetaial(SalesmanID, PartyID, ConnectionString); }

        //                    //objResult.Add(new AlertOrder
        //                    //{
        //                    objResult.Message = "Saved In DataBase";
        //                    objResult.Sucess = 1;
        //                    objResult.OrderId = OrderId;
        //                    //});
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpGet]
        //            public List<AlertOrder> SaveSalesManPartyOrder(string SalesManId, string Price, string TotalPrice, string PartyId, string Product, string Qty, string TotalAmount, string Disc, string DiscAmt, string FItemCode, string FreeQty, string FItemPrice, string SchemeCode, string SchemeType, string CompCode, string FY)
        //            {
        //                List<AlertOrder> objResult = new List<AlertOrder>();
        //                try
        //                {
        //                    List<addcart> CartL = new List<addcart>();
        //                    List<BSDDetailCart> BS = new List<BSDDetailCart>();

        //                    string[] ItemPrice = Price.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] ItemId = Product.Split(new string[] { "," }, StringSplitOptions.None).Distinct().ToArray();
        //                    string[] ItemQty = Qty.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] Amount = TotalPrice.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] DiscP = Disc.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] DiscA = DiscAmt.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] FItemC = FItemCode.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] FreeQ = FreeQty.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] FItemP = FItemPrice.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] SchemeCodeC = SchemeCode.Split(new string[] { "," }, StringSplitOptions.None).ToArray();
        //                    string[] SchemeTypeC = SchemeType.Split(new string[] { "," }, StringSplitOptions.None).ToArray();

        //                    for (int i = 0; i < ItemId.Length; i++)
        //                    {
        //                        addcart Cart = new addcart();
        //                        Cart.SalesManId = clsMain.MyString(SalesManId);
        //                        Cart.PartyId = clsMain.MyString(PartyId);
        //                        Cart.Price = clsMain.MyString(ItemPrice[i]);
        //                        Cart.TotalPrice = clsMain.MyString(Amount[i]);
        //                        Cart.ProductId = clsMain.MyString(ItemId[i]);
        //                        Cart.MinQty = clsMain.MyString(ItemQty[i]);
        //                        Cart.TotalPrice = clsMain.MyString(TotalAmount);
        //                        Cart.Disc = clsMain.MyString(DiscP[i]);
        //                        Cart.DiscAmt = clsMain.MyDouble(DiscA[i]);
        //                        Cart.FItemCode = clsMain.MyInt(FItemC[i]);
        //                        Cart.FreeQty = clsMain.MyDouble(FreeQ[i]);
        //                        Cart.FItemPrice = clsMain.MyDouble(FItemP[i]);
        //                        Cart.SchemeCode = clsMain.MyInt(SchemeCodeC[i]);
        //                        Cart.SchemeType = clsMain.MyInt(SchemeTypeC[i]);
        //                        CartL.Add(Cart);
        //                    }

        //                    AutoOrderDT AutoOrderDT = GetAutoOtderDetails(ConnectionString);
        //                    if (AutoOrderDT.AutoOrder == 1)
        //                    {
        //                        objResult = SaveSalesManPartyOrderAuto(SalesManId, PartyId, CartL, BS, AutoOrderDT.SeriesCode, AutoOrderDT.STPTCode, AutoOrderDT.MCCode, "", "", "", CompCode, FY);
        //                    }
        //                    else
        //                    {
        //                        objResult = SaveSalesManPartyOrderManual(CartL);
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpPost]
        //            public List<AlertOrder> SaveSalesManPartyOrderjSON(SFACatalougeOrder Obj, string CompCode, string FY)
        //            {
        //                List<AlertOrder> objResult = new List<AlertOrder>();
        //                try
        //                {
        //                    string SalesManId = "";
        //                    string PartyId = "";
        //                    int VchSeriesCode = 0;
        //                    int VchSTPTCode = 0;
        //                    int VchMCCode = 0;
        //                    double TotalAmount = 0;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    if (Obj.Cart != null && Obj.Cart.Count > 0)
        //                    {
        //                        SalesManId = clsMain.MyString(Obj.Cart[0].SalesManId);
        //                        PartyId = clsMain.MyString(Obj.Cart[0].PartyId);
        //                        TotalAmount = clsMain.MyDouble(Obj.Cart[0].TotalPrice);
        //                    }

        //                    AutoOrderDT AutoOrderDT = GetAutoOtderDetails(ConnectionString);

        //                    VchSeriesCode = Obj.SeriesCode;
        //                    VchSTPTCode = Obj.STPTCode;
        //                    VchMCCode = Obj.MCCode;

        //                    if (VchSeriesCode == 0) { VchSeriesCode = AutoOrderDT.SeriesCode; }
        //                    if (VchSTPTCode == 0) { VchSTPTCode = AutoOrderDT.STPTCode; }
        //                    if (VchMCCode == 0) { VchMCCode = AutoOrderDT.MCCode; }

        //                    if (AutoOrderDT.AutoOrder == 1)
        //                    {
        //                        objResult = SaveSalesManPartyOrderAuto(SalesManId, PartyId, Obj.Cart, Obj.BSDDetailCart, VchSeriesCode, VchSTPTCode, VchMCCode, Obj.Transport, Obj.Station, Obj.Narration, CompCode, FY);
        //                    }
        //                    else
        //                    {
        //                        objResult = SaveSalesManPartyOrderManualSFA(Obj.Cart, clsMain.MyInt(SalesManId), clsMain.MyInt(PartyId), clsMain.MyDouble(TotalAmount), CompCode, FY);
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpPost]
        //            public List<Alert> SaveOrderPayment(PaymentDetails Obj, string CompCode, string FY)
        //            {
        //                List<Alert> objResult = new List<Alert>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    AutoOrderDT AutoOrderDT = GetAutoOtderDetails(ConnectionString);

        //                    AlertOrder AlertOrder = new AlertOrder();
        //                    if (AutoOrderDT.AutoOrder == 1)
        //                    {
        //                        VchReceipt Inv = GetOrderReceiptData(clsMain.MyInt(AutoOrderDT.RcptSeriesCode), Obj, ConnectionString);

        //                        AlertOrder = SaveAccInvoiceAuto(Inv, 14, CompCode, FY);
        //                    }
        //                    else
        //                    {
        //                        AlertOrder = SaveOrderPaymentManual(Obj, CompCode, FY);
        //                    }

        //                    objResult.Add(new Alert
        //                    {
        //                        Message = AlertOrder.Message.ToString(),
        //                        Sucess = AlertOrder.Sucess
        //                    });
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpPost]

        //            public List<Alert> SaveExpenseVch(ExpenseVch Obj, string CompCode, string FY)
        //            {
        //                List<Alert> objResult = new List<Alert>();
        //                //AlertOrder objResult1 = new AlertOrder();

        //                //List<AlertOrder> objResult = new List<AlertOrder>();

        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    ExpVchConfigDT ExpVchConfigDT = GetExpenseConfig(ConnectionString);
        //                    if (chkAutoNotPost(ConnectionString, 2) == 1)
        //                    {
        //                        AlertOrder alertOrder = SaveManualExpenseSFA(Obj, ConnectionString, 16);
        //                        objResult.Add(new Alert
        //                        {
        //                            Message = alertOrder.Message.ToString(),
        //                            Sucess = alertOrder.Sucess
        //                        });
        //                        return objResult;
        //                    }

        //                    string XML = GetExpenseVoucherXML(16, Obj, ExpVchConfigDT, ConnectionString);

        //                    AlertOrder AlertOrder = SaveAccInvoice(XML, 16, ExpVchConfigDT.SeriesCode, Obj.Salesman, CompCode, FY);
        //                    if (AlertOrder.OrderId > 0)
        //                    {
        //                        SaveExpenseDT(AlertOrder.OrderId, Obj, ExpVchConfigDT, ConnectionString);
        //                    }
        //                    objResult.Add(new Alert
        //                    {
        //                        Message = AlertOrder.Message.ToString(),
        //                        Sucess = AlertOrder.Sucess
        //                    });
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            private void SaveExpenseDT(int VchCode, ExpenseVch Vch, ExpVchConfigDT VchConfig, string ConnectionString)
        //            {
        //                try
        //                {
        //                    int R = 0;

        //                    string sql = "Delete From ESVchExpenseDT Where VchCode = " + VchCode + "";
        //                    if (Provider == 1)
        //                    {
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }

        //                    int SrNo = 0;
        //                    int FileType = 0;

        //                    string FileName = "";

        //                    foreach (var item in Vch.Expenses)
        //                    {
        //                        SrNo = SrNo + 1;
        //                        FileType = 0;
        //                        if (VchConfig.SaveDoc == 1)
        //                        {
        //                            if (VchConfig.SaveDocInDB == 0)
        //                            {
        //                                FileType = 1;
        //                                if (Directory.Exists(VchConfig.DocPath) == true)
        //                                {
        //                                    FileName = "";

        //                                    if (item.DocBase64.Length > 0)
        //                                    {
        //                                        byte[] imgByteArray = Convert.FromBase64String(item.DocBase64);
        //                                        string IName = "F-" + FinYr.ToString() + "-" + VchCode.ToString() + "-" + SrNo + "." + item.FileExt;

        //                                        string FilePath = string.Concat(VchConfig.DocPath, "\\" + IName);
        //                                        File.WriteAllBytes(FilePath, imgByteArray);
        //                                        FileName = Path.GetFileName(FilePath);
        //                                    }
        //                                }
        //                            }
        //                            else
        //                            {
        //                                FileType = 2;
        //                                FileName = item.DocBase64;
        //                            }
        //                        }
        //                        if (FileType == 1)
        //                        {
        //                            sql = "Insert Into ESVchExpenseDT ([VchCode],[SrNo],[ExpenseH],[FDate],[TDate],[Description],[Transport],[FileType],[Base64],[FileName],[FileExt],[Amount])";
        //                            sql = sql + " Values (" + VchCode + "," + SrNo + ",'" + item.ExpenseH.Trim() + "','" + item.FromDate.Trim() + "','" + item.ToDate.Trim() + "','" + item.Description.Trim() + "','" + item.Transport.Trim() + "',1,'','" + FileName + "','" + item.FileExt + "'," + item.Amount + ")";
        //                        }
        //                        else
        //                        {
        //                            sql = "Insert Into ESVchExpenseDT ([VchCode],[SrNo],[ExpenseH],[FDate],[TDate],[Description],[Transport],[FileType],[Base64],[FileName],[FileExt],[Amount])";
        //                            sql = sql + " Values (" + VchCode + "," + SrNo + ",'" + item.ExpenseH.Trim() + "','" + item.FromDate.Trim() + "','" + item.ToDate.Trim() + "','" + item.Description.Trim() + "','" + item.Transport.Trim() + "',2,'" + FileName + "','','" + item.FileExt + "'," + item.Amount + ")";
        //                        }
        //                        if (Provider == 1)
        //                        {
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {

        //                }
        //            }

        //            private VchReceipt GetOrderReceiptData(int SeriesCode, PaymentDetails Obj, string ConnectionString)
        //            {

        //                VchReceipt Inv = new VchReceipt();

        //                BusyVoucher BVch = new BusyVoucher();

        //                Inv.SeriesCode = SeriesCode;
        //                Inv.SeriesName = BVch.GetMasterCodeToName(Provider, ConnectionString, SeriesCode).Replace("14", "");
        //                Inv.PartyName = BVch.GetMasterCodeToName(Provider, ConnectionString, clsMain.MyInt(Obj.PartyId));
        //                Inv.PDC = Obj.PDCReq;
        //                Inv.PDCDate = Obj.PDCDate;
        //                Inv.Mode = clsMain.MyInt(Obj.PaymentType);
        //                Inv.Amount = clsMain.MyDouble(Obj.Amount);
        //                Inv.chequeNo = Obj.ChequeNo;
        //                Inv.ChequeDt = Obj.ChequeDate;
        //                Inv.Image = clsMain.MyString(Obj.ChequeImage);
        //                Inv.Remarks = Obj.Remarks;
        //                Inv.BillByBill = Obj.BillByBill;
        //                return Inv;
        //            }

        //            private AlertOrder SaveOrderPaymentManual(PaymentDetails obj, string CompCode, string FY)
        //            {
        //                AlertOrder objResult = new AlertOrder();

        //                objResult.Message = "fail";
        //                objResult.Sucess = 0;

        //                try
        //                {
        //                    string sql = "";
        //                    int R = 0;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                    if (Provider == 1)
        //                    {
        //                        sql = "insert into ESPaymentDetails(SalesManId,PartyId,OrderId,TotalAmount,ChequeDate,ChequeNo,ChequeImage,Remarks,PaymentType,PaymentDate,Sync,BusyVchCode,PDCReq,PDCDate)";
        //                        sql = sql + " Values (" + obj.SalesManId + "," + obj.PartyId + "," + obj.OrderId + "," + obj.Amount + ",'" + obj.ChequeDate + "','" + obj.ChequeNo.Replace("'", "''") + "','" + obj.ChequeImage.Replace("'", "''") + "','" + obj.Remarks.Replace("'", "''") + "','" + obj.PaymentType + "',#" + DateTime.Now.ToString("dd/MMM/yyyy") + "#,0,0," + obj.PDCReq + ",'" + obj.PDCDate + "')";
        //                        R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "insert into ESPaymentDetails(SalesManId,PartyId,OrderId,TotalAmount,ChequeDate,ChequeNo,ChequeImage,Remarks,PaymentType,PaymentDate,Sync,BusyVchCode,PDCReq,PDCDate)";
        //                        sql = sql + " Values (" + obj.SalesManId + "," + obj.PartyId + "," + obj.OrderId + "," + obj.Amount + ",'" + obj.ChequeDate + "','" + obj.ChequeNo.Replace("'", "''") + "','" + obj.ChequeImage.Replace("'", "''") + "','" + obj.Remarks.Replace("'", "''") + "','" + obj.PaymentType + "','" + DateTime.Now.ToString("dd/MMM/yyyy") + "',0,0," + obj.PDCReq + ",'" + obj.PDCDate + "')";
        //                        R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                    }

        //                    if (R > 0)
        //                    {
        //                        objResult.Message = "Success";
        //                        objResult.Sucess = 1;
        //                        objResult.OrderId = clsMain.MyInt(obj.OrderId);
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpGet]
        //            public dynamic GetBeatWiseVisitedPartyDetails(string UserId, string BeatId, string CompCode, string FY)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();

        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);

        //                if (Provider == 1)
        //                {
        //                    objResult = GetBeatWiseVisitedPartyDetailsAcccess(UserId, BeatId, FY, ConnectionString);
        //                }
        //                else
        //                {
        //                    objResult = GetBeatWiseVisitedPartyDetailsSQL(UserId, BeatId, ConnectionString);
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }


        //            public dynamic GetBeatWiseVisitedPartyDetailsAcccess(string UserID, string BeatId, string FY, string ConnectionString)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();

        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    string sql = "";
        //                    int ABType = 0;
        //                    int AAdmin = 0;
        //                    int BeatNA = 0;
        //                    int WeekWise = 0;
        //                    int Atype = 0;
        //                    string MCStr = "";
        //                    int SCode = Convert.ToInt32(UserID);
        //                    Atype = GetchkAllMCType(SCode, ConnectionString);
        //                    sql = "select IIF(IsNull(Btype),0,BType) as ABType,IIF(IsNull(Saleshead),0,Saleshead) as AAdmin from ESUserLogin where salesmancode = " + UserID + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ABType = clsMain.MyInt(dt.Rows[0]["ABType"]);
        //                        AAdmin = clsMain.MyInt(dt.Rows[0]["AAdmin"]);
        //                    }

        //                    sql = "Select IIF(IsNull(Name),'',Name) as Beat  From ESMaster1 Where Code = " + BeatId + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        string Beat = clsMain.MyString(dt.Rows[0]["Beat"]);
        //                        if (Beat.ToUpper() == "N/A") { BeatNA = 1; }
        //                    }

        //                    sql = "Select Top 1 * from ESSalesVisitPlan Where SalesCode = " + UserID + " And [Week] > 0";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        WeekWise = 1;
        //                    }

        //                    string ClosingBalanceStr = "";


        //                    if (AAdmin == 1 && BeatNA == 1)
        //                    {
        //                        sql = "Select M.Code as PartyId, M.NameAlias as PartyName,IIF(IsNull(MA.EMail),'',MA.EMail) as AEMail,(IIF(ISNULL(MA.Address1),'',MA.Address1) + ' ' + IIF(ISNULL(MA.Address2),'',MA.Address2) + ' ' + IIF(ISNULL(MA.Address3),'',MA.Address3) + ' ' + IIF(ISNULL(MA.Address4),'',MA.Address4)) as AAddress";
        //                    }
        //                    else
        //                    {
        //                        sql = "Select M.Code as PartyId,M.Name as PartyName,IIF(IsNull(MA.EMail),'',MA.EMail) as AEMail,(IIF(ISNULL(MA.Address1),'',MA.Address1) + ' ' + IIF(ISNULL(MA.Address2),'',MA.Address2) + ' ' + IIF(ISNULL(MA.Address3),'',MA.Address3) + ' ' + IIF(ISNULL(MA.Address4),'',MA.Address4)) as AAddress";
        //                    }
        //                    sql = sql + ",IIF(ISNULL(MA.Mobile),'',MA.Mobile) as AMobile,IIF(ISNull(E.CheckIn),0,E.CheckIn) as ACheckIn,IIF(ISNULL(E.Visited),0,E.Visited) as AVisited,IIF(ISNULL(E.longitude),'',E.longitude) as Alongitude,IIF(IsNull(E.Latitude),'',E.Latitude) as ALatitude,IIF(IsNull(E.CAddress),'',E.CAddress) as ACAddress";
        //                    sql = sql + ",IIF(IsNull(E.Approval),0,E.Approval) as AApproval,IIF(IsNull(E.Revisit),0,E.Revisit) as ARevisit,IIF(ISNULL(E.CheckIn),0,E.CheckIn) as CheckInstatus";
        //                    sql = sql + ",(Select Top 1 LTrim(VchNo) + '~' + Format(Date, 'dd/MM/yyyy') + '~' + CStr(Value1) From Tran2 Where MasterCode1 = M.Code And RecType = 1 And Value1 > 0 And VchType = 14 Order By Date Desc, VchCode Desc) as LastRecipt";
        //                    sql = sql + ",(Select Top 1 LTrim(VchNo) + '~' + Format(Date, 'dd/MM/yyyy') + '~' + CStr(VchAmtBaseCur) From Tran1 Where MasterCode1 = M.Code And VchType = 12 Order By Date Desc, VchCode Desc) as LastOrderItem";
        //                    if (Atype == 1)
        //                    {
        //                        sql = sql + ",((Select IIF(IsNull(D1),0,D1) as Balance From Folio1 Where MasterCode = M.Code) + (Select IIF(IsNull(SUM(Value1)), 0,SUM(Value1)) as Balance From Tran2 Where MasterCode1 = M.Code And RecType = 1)) as ClosingBalance";
        //                    }
        //                    else
        //                    {
        //                        MCStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                        sql = sql + ",((Select IIF(IsNull(D1),0,D1) as Balance From Tran4 Where MasterCode1 = M.Code and MasterCode2 in(" + MCStr + ")) + (Select IIF(IsNull(SUM(Value1)), 0,SUM(Value1)) as Balance From Tran2 Where MasterCode1 = M.Code and MasterCode2 in(" + MCStr + ") And RecType = 1)) as ClosingBalance";

        //                    }
        //                    sql = sql + ",(Select Sum(Points) as APoints from ESPointDT where RecType = 1 AND AccCode = M.Code And(PointApp = 0 Or PointApp Is Null)) as Points";
        //                    if (AAdmin == 1 && BeatNA == 1)
        //                    {
        //                        sql = sql + " From ((((SElect M.Code, M.NameAlias, 1 as MType  From Help1 M Inner Join Master1 M1 On M.Code = M1.Code where M.RecType = 104 And M.MasterType = 2 And M.NameOrAlias = 1 And M1.ApprovalStatus In (0, 1) And M.MasterSeries = 0) M Inner Join (SElect 1 as MType from ESSalesVisitPlan A Where A.SalesCode = " + UserID + " And A.Beat = " + BeatId + "";
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " and A.[Week] = DatePart('w',DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                        }
        //                        sql = sql + ") A On M.MType = A.MType) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode)";
        //                        sql = sql + " Where ((E.Visited = 1 And E.CheckIn = 0)) order by E.CheckInTime desc";
        //                    }
        //                    if (AAdmin == 0 && BeatNA == 1)
        //                    {
        //                        sql = sql + " from (((ESSalesVisitPlan A Inner Join Master1 M On A.SalesCode = M.CM3) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode) where A.SalesCode = " + UserID + " And M.ApprovalStatus In (0,1) And A.Beat = " + BeatId + " and ((E.Visited = 1 And E.CheckIn = 0))";
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " and A.[Week] = DatePart('w',DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                        }
        //                        sql = sql + "order by E.CheckInTime desc";
        //                    }
        //                    if (BeatNA == 0)
        //                    {
        //                        sql = sql + " from ((((ESSalesVisitPlan A Inner Join ESAppAccBeatDT B On A.Beat = B.Beat) Inner Join Master1 M On B.PartyCode = M.Code) Left Join MasterAddressInfo MA On M.Code = MA.MasterCode) Left Join ESAppAccountDet E On M.Code = E.PartyCode) where A.SalesCode = " + UserID + " And M.ApprovalStatus In (0,1) And A.Beat = " + BeatId + " and ((E.Visited = 1 And E.CheckIn = 0))";
        //                        if (WeekWise == 1)
        //                        {
        //                            sql = sql + " and A.[Week] = DatePart('w',DATE())";
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " and Format(A.VisitDate,'dd/MMM/yyyy') <= Format(Date(),'dd/MMM/yyyy') And Format(A.ToVisit,'dd/MMM/yyyy') >= Format(Date(),'dd/MMM/yyyy')";
        //                        }
        //                        sql = sql + "order by E.CheckInTime desc";
        //                    }
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            ClosingBalanceStr = "0.00";

        //                            if (dr["ClosingBalance"] != null)
        //                            {
        //                                if (clsMain.MyDouble(dr["ClosingBalance"]) > 0)
        //                                {
        //                                    ClosingBalanceStr = clsMain.MyDouble(dr["ClosingBalance"]).ToString() + " Cr.";
        //                                }
        //                                else if (clsMain.MyDouble(dr["ClosingBalance"]) < 0)
        //                                {
        //                                    ClosingBalanceStr = Math.Abs(clsMain.MyDouble(dr["ClosingBalance"])).ToString() + " Dr.";
        //                                }
        //                                else
        //                                {
        //                                    ClosingBalanceStr = "0.00";
        //                                }
        //                            }

        //                            //string LastRecipt = "";
        //                            //string LastOrderItem = "";
        //                            //double Points = 0;

        //                            //if (dr["LastRecipt"] != null) { LastRecipt = clsMain.MyString(dr["LastRecipt"]); }
        //                            //if (dr["LastOrderItem"] != null) { LastOrderItem = clsMain.MyString(dr["LastOrderItem"]); }
        //                            //if (dr["Points"] != null) { Points = clsMain.MyDouble(dr["Points"]); }

        //                            objResult.Add(new PartyDetails
        //                            {
        //                                PartyId = (int)dr["PartyId"],
        //                                PartyName = (string)dr["PartyName"],
        //                                Address = (string)dr["AAddress"],
        //                                PhoneNo = (string)dr["AMobile"],
        //                                EMail = (string)dr["AEMail"],
        //                                Visited = (int)dr["AVisited"],
        //                                ClosingBalance = (string)ClosingBalanceStr,
        //                                LastRecipt = clsMain.MyString(dr["LastRecipt"]),
        //                                LastOrderItem = clsMain.MyString(dr["LastOrderItem"]),
        //                                Points = clsMain.MyDouble(dr["Points"]),
        //                                CheckIn = (int)dr["ACheckIn"],
        //                                Latitude = (string)dr["ALatitude"],
        //                                Longitude = (string)dr["ALongitude"],
        //                                CAddress = (string)dr["ACAddress"],
        //                                Approval = (int)dr["AApproval"],
        //                                CheckInstatus = (int)dr["CheckInstatus"],
        //                                Revisit = (int)dr["ARevisit"],
        //                                // FromDate = (string)dr["FromDate"],
        //                                FromDate = "01/04/" + FY.ToString() + "",
        //                                //ToDate = (string)dr["Todate"],
        //                                ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "",
        //                            });
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }

        //            // [HttpGet]
        //            public dynamic GetBeatWiseVisitedPartyDetailsSQL(string UserId, string BeatId, string ConnectionString)
        //            {
        //                List<PartyDetails> objResult = new List<PartyDetails>();

        //                try
        //                {
        //                    SqlParameter[] Para = new SqlParameter[2];
        //                    Para[0] = new SqlParameter("@UserId", clsMain.MyString(UserId));
        //                    Para[1] = new SqlParameter("@BeatId", clsMain.MyString(BeatId));

        //                    DataTable dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_GetBeatWiseVisitedPartyDetails", Para);

        //                    string ClosingBalanceStr;
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            if (clsMain.MyDouble(dr["ClosingBalance"]) > 0)
        //                            {
        //                                ClosingBalanceStr = clsMain.MyDouble(dr["ClosingBalance"]).ToString() + " Cr.";
        //                            }
        //                            else if (clsMain.MyDouble(dr["ClosingBalance"]) < 0)
        //                            {
        //                                ClosingBalanceStr = Math.Abs(clsMain.MyDouble(dr["ClosingBalance"])).ToString() + " Dr.";
        //                            }
        //                            else
        //                            {
        //                                ClosingBalanceStr = "0.00";
        //                            }
        //                            objResult.Add(new PartyDetails
        //                            {

        //                                PartyId = clsMain.MyInt(dr["PartyId"]),
        //                                PartyName = clsMain.MyString(dr["PartyName"]),
        //                                Address = clsMain.MyString(dr["Address"]),
        //                                PhoneNo = clsMain.MyString(dr["mobile"]),
        //                                EMail = (string)dr["EMail"],
        //                                Visited = clsMain.MyInt(dr["Visited"]),
        //                                ClosingBalance = clsMain.MyString(ClosingBalanceStr),
        //                                LastRecipt = clsMain.MyString(dr["LastRecipt"]),
        //                                LastOrderItem = clsMain.MyString(dr["LastOrderItem"]),
        //                                Points = clsMain.MyDouble(dr["Points"]),
        //                                CheckIn = clsMain.MyInt(dr["CheckIn"]),
        //                                Latitude = clsMain.MyString(dr["Latitude"]),
        //                                Longitude = clsMain.MyString(dr["Longitude"]),
        //                                CAddress = (string)dr["CAddress"],
        //                                Approval = (int)dr["Approval"],
        //                                CheckInstatus = clsMain.MyInt(dr["CheckInstatus"]),
        //                                Revisit = clsMain.MyInt(dr["Revisit"]),
        //                                FromDate = "01/04/" + FinYr.ToString() + "",
        //                                ToDate = "" + DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString() + "",
        //                                //FromDate = clsMain.MyString(dr["FromDate"]),
        //                                //ToDate = clsMain.MyString(dr["Todate"]),

        //                            });
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return objResult;
        //                }

        //                return objResult;


        //                //[HttpGet]
        //                //public List<PartyDetails> GetBeatWisePartyDetails(string UserId, string BeatId)
        //                //{
        //                //List<PartyDetails> objResult = new List<PartyDetails>();
        //                //try
        //                //{

        //                ////strQry = " ";
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                //string strQry = "select distinct m1.Code as PartyId,m1.Name as PartyName, ma.Address1 as Address,"+
        //                //    " ma.mobile,0 as Visited ,'1324' as ClosingBalance ,'dsfdsf3' as LastRecipt ,'dsfs' as LastOrderItem,"+
        //                //    " 104 as Points,0 as CheckIn,'23,234,324,324' as Latitude ,'3287,324,324' as Longitude from Master1 m1" +
        //                //   " left outer join MasterAddressInfo ma on m1.Code=ma.mastercode"+
        //                //  " Left outer join tran2 t2 on m1.Code=t2.mastercode1"+
        //                //       " where m1.MasterType=2 and m1.Beat=1";


        //                //DataTable dt = obj.getTable(strQry);

        //                //    if (dt != null && dt.Rows.Count > 0)
        //                //    {
        //                //        objResult = dt.AsEnumerable()
        //                //                   .Select(row => new PartyDetails()
        //                //                   {
        //                //                       PartyName = clsMain.MyString(row.Field<string>("PartyName")),
        //                //                       Address = clsMain.MyString(row.Field<string>("Address")),
        //                //                       PhoneNo = clsMain.MyString(row.Field<string>("mobile")),
        //                //                       Visited = clsMain.MyInt(row.Field<int>("Visited")),
        //                //                       ClosingBalance = clsMain.MyString(row.Field<string>("ClosingBalance")),
        //                //                       LastRecipt = clsMain.MyString(row.Field<string>("LastRecipt")),
        //                //                       LastOrderItem = clsMain.MyString(row.Field<string>("LastOrderItem")),
        //                //                       Points = clsMain.MyInt(row.Field<int>("Points")),
        //                //                       CheckIn = clsMain.MyInt(row.Field<int>("CheckIn")),
        //                //                       Latitude = clsMain.MyString(row.Field<string>("Latitude")),
        //                //                       Longitude = clsMain.MyString(row.Field<string>("Longitude")),

        //                //                   }).ToList();
        //                //    }

        //                //    return objResult;



        //                //}

        //                //  catch (Exception Ex)
        //                //{
        //                //    //return Ex.Message;
        //                //    return objResult;
        //                //}

        //            }

        //            public dynamic GetSalesManCartList(string UserId, string PartyId, string CompCode, string FY)
        //            {
        //                List<Salesmencart> objResult = new List<Salesmencart>();
        //                //string strwhere = "1=1 ";
        //                //if (clsMain.MyLen(CategoryCode) > 0)
        //                //{
        //                //    strwhere += " and CategoryCode='" + CategoryCode + "'  ";
        //                //}

        //                //            SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    queryStr = "select  '' as ProductImage,smc.Id as CartId,m1.Name as PartyName,m2.Name as ProductName,PartyId,IIF(IsNull(m2.D1),1,m2.D1) as ConFactor,SalesManId,ProductCode,Qty,iif(isnull(Price), '', Price) as Price1,IIF(isnull(TotalPrice), '', TotalPrice) as TotalPrice1,iif(Isnull(smc.Disc), '', smc.Disc) as Disc1,iif(IsNull(smc.DiscAmt), 0, smc.DiscAmt) as DiscAmt1,iif(IsNull(smc.FItemCode), 0, smc.FItemCode) as FItemCode1,iif(Isnull(M3.Name), '', M3.Name) as FItemName,iif(IsNull(smc.FreeQty), 0, smc.FreeQty) as FreeQty1,iif(Isnull(smc.FItemPrice), 0, smc.FItemPrice) as FItemPrice1 " + Environment.NewLine +
        //                                " ,iif(IsNull(smc.SchemeCode), 0, smc.SchemeCode) as SchemeCode1,iif(Isnull(smc.SchemeType), 0, smc.SchemeType) as SchemeType1,iif(IsNull(m4.Name), '', m4.Name) as Unit,iif(IsNull(m5.Name), '', m5.Name) as AltUnit,iif(IsNull(AltQty), 0, AltQty) as AltQty1,iif(IsNull(Confactor), 0, Confactor) as Confactor1,iif(Isnull(SalePrice), 0, SalePrice) as SalePrice1,iif(IsNull(Remarks), '', Remarks) as Remarks1,iif(IsNull(Description1), '', Description1) as Desc1,iif(IsNull(Description2), '', Description2) as Desc2,iif(Isnull(Description3), '', Description1) as Desc3,iif(IsNull(Description4), '', Description4) as Desc4" + Environment.NewLine +
        //                                " from(((((ESSalesMenCart smc left outer join Master1 m1 on m1.Code = smc.PartyId)" + Environment.NewLine +
        //                                " left outer join Master1 m2 on m2.Code = smc.ProductCode)" + Environment.NewLine +
        //                                " left outer join Master1 m3 on m3.Code = smc.FItemcode)" + Environment.NewLine +
        //                                " left outer join Master1 m4 on m2.CM1 = m4.Code)" + Environment.NewLine +
        //                                " left outer join Master1 m5 on m2.CM2 = m5.Code)" + Environment.NewLine +
        //                                " where SalesManId=" + UserId + " and PartyId=" + PartyId + "";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "select  '' as ProductImage,smc.Id as CartId,m1.Name as PartyName,m2.Name as ProductName,PartyId,IsNull(m2.D1,1) as ConFactor," + Environment.NewLine +
        //                               " SalesManId,ProductCode,Qty,isnull(LTRIM(STR(Price,25,2)),'') as Price1,isnull(LTRIM(STR(TotalPrice,25,2)),'') as TotalPrice1,Isnull(smc.Disc,'') as Disc1,IsNull(smc.DiscAmt,0) as DiscAmt1,IsNull(smc.FItemCode,0) as FItemCode1,Isnull(M3.Name,'') as FItemName,IsNull(smc.FreeQty,0) as FreeQty1,Isnull(smc.FItemPrice,0) as FItemPrice1" + Environment.NewLine +
        //                               ",IsNull(smc.SchemeCode,0) as SchemeCode1,Isnull(smc.SchemeType,0) as SchemeType1,IsNull(m4.Name,'') as Unit,IsNull(m5.Name,'') as AltUnit,IsNull(AltQty,0) as AltQty1,IsNull(Confactor,0) as Confactor1,Isnull(SalePrice,0) as SalePrice1,IsNull(Remarks,'') as Remarks1,IsNull(Description1,'') as Desc1,IsNull(Description2,'') as Desc2,Isnull(Description3,'') as Desc3,IsNull(Description4,'') as Desc4 " + Environment.NewLine +
        //                               " from ESSalesMenCart smc " + Environment.NewLine +
        //                               " left outer join Master1 m1 on m1.Code=smc.PartyId " + Environment.NewLine +
        //                               " left outer join Master1 m2 on m2.Code=smc.ProductCode" + Environment.NewLine +
        //                               " left outer join Master1 m3 on m3.Code=smc.FItemcode" + Environment.NewLine +
        //                               " left outer join Master1 m4 on m2.CM1=m4.Code" + Environment.NewLine +
        //                               " left outer join Master1 m5 on m2.CM2=m5.Code" + Environment.NewLine +
        //                               " where SalesManId=" + UserId + " and PartyId=" + PartyId + "";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                // DataTable dt = obj.getTable(strQry);
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new Salesmencart
        //                        {
        //                            ProductId = (int)dr["ProductCode"],
        //                            CartId = (int)dr["CartId"],
        //                            ProductName = (string)dr["ProductName"],
        //                            PartyName = (string)dr["PartyName"],
        //                            PartyId = (int)dr["PartyId"],
        //                            SalesManId = (int)dr["SalesManId"],
        //                            Price = (string)dr["Price1"],
        //                            TotalPrice = (string)dr["TotalPrice1"],
        //                            ProductImage = clsMain.MyString(IMGFolder) + clsMain.MyString(dr["ProductName"]) + ".jpg", //(string)dr["ProductImage"],
        //                            MinQty = clsMain.MyInt(dr["Qty"]),
        //                            AltQty = clsMain.MyString(dr["AltQty1"]),
        //                            Unit = clsMain.MyString(dr["Unit"]),
        //                            AltUnit = clsMain.MyString(dr["AltUnit"]),
        //                            Confactor = clsMain.MyString(dr["ConFactor"]),
        //                            Disc = clsMain.MyString(dr["Disc1"]),
        //                            DiscAmt = clsMain.MyDouble(dr["DiscAmt1"]),
        //                            SalePrice = clsMain.MyDouble(dr["SalePrice1"]),
        //                            FItemCode = clsMain.MyInt(dr["FItemCode1"]),
        //                            FItemName = clsMain.MyString(dr["FItemName"]),
        //                            FreeQty = clsMain.MyDouble(dr["FreeQty1"]),
        //                            FItemPrice = clsMain.MyDouble(dr["FItemPrice1"]),
        //                            SchemeCode = clsMain.MyInt(dr["SchemeCode1"]),
        //                            SchemeType = clsMain.MyInt(dr["SchemeType1"]),
        //                            Remarks = clsMain.MyString(dr["Remarks1"]),
        //                            Description1 = clsMain.MyString(dr["Desc1"]),
        //                            Description2 = clsMain.MyString(dr["Desc2"]),
        //                            Description3 = clsMain.MyString(dr["Desc3"]),
        //                            Description4 = clsMain.MyString(dr["Desc4"])
        //                        }); ;
        //                    }
        //                }

        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };

        //                //if (dt != null && dt.Rows.Count > 0)
        //                //{
        //                //    Salesmencart pl = new Salesmencart();

        //                //    foreach (DataRow item in dt.Rows)
        //                //    {
        //                //        int itemCode = clsMain.MyInt(item["ProductCode"]);
        //                //        bool itemFound = false;

        //                //        for (int i = 0; i < objResult.Count; i=1)
        //                //        {
        //                //            if (objResult[i].ProductId == itemCode)
        //                //            {
        //                //                itemFound = true;
        //                //                pl = objResult[i];
        //                //                break;
        //                //            }
        //                //        }
        //                //        if (!itemFound)
        //                //        {
        //                //            pl = new Salesmencart();
        //                //            pl.ProductId = itemCode;
        //                //            pl.ProductName = clsMain.MyString(item["ProductName"]);
        //                //            pl.PartyName = clsMain.MyString(item["PartyName"]);
        //                //            pl.TotalPrice = clsMain.MyString(item["TotalPrice"]);
        //                //            pl.Price = clsMain.MyString(item["Price"]);
        //                //            pl.PartyId = clsMain.MyInt(item["PartyId"]);
        //                //            pl.SalesManId = clsMain.MyInt(item["SalesManId"]);
        //                //            pl.MinQty = clsMain.MyInt(item["Qty"]);
        //                //            pl.ProductImage = new List<Image1>();
        //                //            if (clsMain.MyLen(item["ProductImage"]) > 0)
        //                //            {

        //                //                Image1 im = new Image1();
        //                //                im.ProductImage = clsMain.MyString(item["ProductImage"]);
        //                //                pl.ProductImage.Add(im);
        //                //            }
        //                //            objResult.Add(pl);
        //                //        }
        //                //        else
        //                //        {
        //                //            if (clsMain.MyLen(item["ProductImage"]) > 0)
        //                //            {
        //                //                Image1 im = new Image1();

        //                //                im.ProductImage = clsMain.MyString(item["ProductImage"]);
        //                //                pl.ProductImage.Add(im);
        //                //            }
        //                //        }


        //                //    }


        //                //}


        //                //return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };

        //            }

        //            //public HttpResponseMessage Get(int id)
        //            //{
        //            //    SQLHELPER obj = new SQLHELPER(ConnectionString);
        //            //    string str = "select ProductImage from ESProductImage where id=" + id + "";
        //            //    DataTable dt = obj.getTable(str);
        //            //    byte[] imgData;
        //            //    if (dt.Rows.Count > 0)
        //            //    {
        //            //        imgData = (byte[])dt.Rows[0][0];

        //            //        string base64String = Convert.ToBase64String(imgData, 0, imgData.Length);
        //            //        //Image1.ImageUrl = "data:image/png;base64," + base64String;
        //            //        //Image1.Visible = true;

        //            //        System.IO.MemoryStream ms = new System.IO.MemoryStream(imgData);
        //            //        HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.OK);
        //            //        response.Content = new StreamContent(ms);
        //            //        response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/png");
        //            //        return response;
        //            //    }
        //            //    else
        //            //    {
        //            //        HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.NotFound);
        //            //        return response;
        //            //    }
        //            //}

        //            [HttpGet]
        //            public dynamic AccountLedger(string AccCode, string FDate, string TDate, string CompCode, string FY)
        //            {
        //                List<LedgerReport> objLedger = new List<LedgerReport>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string ConnectionStringPY = "";
        //                    int LYear = Convert.ToInt16(FY) - 1;
        //                    string PreVDBName = "";
        //                    string DueDate = "";

        //                    string strQry = "";
        //                    string Qry = "";
        //                    double RowBalance = 0;
        //                    double Result = 0;

        //                    double Credit = 0;
        //                    double Debit = 0;
        //                    string Balance = "0";

        //                    int OverDueDay = 0;
        //                    bool PrevYrData = false;
        //                    int Atype = 0;
        //                    DateTime FDT;
        //                    DateTime EDT;

        //                    DataTable dt = new DataTable();
        //                    DataTable dt1 = new DataTable();

        //                    DateTime DT2 = Convert.ToDateTime("01/Apr/" + FY.ToString()).Date;
        //                    //var Stringdt1 = DateTime.ParseExact(FDate, "MM/dd/yyyy", null); //ParseExact(FDate, "MM/dd/yyyy", null);
        //                    //var Stringdt2 = DateTime.ParseExact(TDate, "MM/dd/yyyy", null);
        //                    if (Provider == 1)
        //                    {
        //                        PreVDBName = "db1" + LYear.ToString() + ".bds";
        //                    }
        //                    else
        //                    {
        //                        PreVDBName = "Busy" + CompCode + "_db1" + LYear.ToString();
        //                    }

        //                    if (Convert.ToDateTime(DT2) > Convert.ToDateTime(FDate))
        //                    {

        //                        if (CheckDBExist(PreVDBName, CompCode, ConnectionString) == true) { PrevYrData = true; }

        //                        if (PrevYrData == true) { ConnectionStringPY = GetConnectionString(Provider, CompCode, LYear.ToString()); }
        //                    }

        //                    if (Convert.ToBoolean(PrevYrData) == true)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            Qry = "Select IIF(IsNull(Sum(A.Amt)),0,Sum(A.Amt)) as Bal From (Select D1 as Amt From Folio1 Where MasterCode = " + AccCode + " Union All Select Sum(Value1) as Amt From Tran2 Where Date < #" + FDate + "# And Rectype= 1 And MasterCode1 = " + AccCode + ") A";
        //                            dt1 = new OLEDBHELPER(ConnectionStringPY).getTable(Qry);
        //                        }
        //                        else
        //                        {
        //                            Qry = "Select IsNull(Sum(A.Amt),0) as Bal From (Select D1 as Amt From Folio1 Where MasterCode = " + AccCode + " Union All Select Sum(Value1) as Amt From Tran2 Where Date < '" + FDate + "' And Rectype= 1 And MasterCode1 = " + AccCode + ") A";
        //                            dt1 = new SQLHELPER(ConnectionStringPY).getTable(Qry);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            Qry = "Select IIF(IsNull(Sum(A.Amt)),0,Sum(A.Amt)) as Bal From (Select D1 as Amt From Folio1 Where MasterCode = " + AccCode + " Union All Select Sum(Value1) as Amt From Tran2 Where Date < #" + FDate + "# And Rectype= 1 And MasterCode1 = " + AccCode + ") A";
        //                            dt1 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                        }
        //                        else
        //                        {
        //                            Qry = "Select IsNull(Sum(A.Amt),0) as Bal From (Select D1 as Amt From Folio1 Where MasterCode = " + AccCode + " Union All Select Sum(Value1) as Amt From Tran2 Where Date < '" + FDate + "' And Rectype= 1 And MasterCode1 = " + AccCode + ") A";
        //                            dt1 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                        }
        //                    }
        //                    if (dt1 != null && dt1.Rows.Count > 0)
        //                    {
        //                        Result = clsMain.MyDouble(dt1.Rows[0][0]);
        //                    }

        //                    if (Result > 0)
        //                    {
        //                        Credit = Result;
        //                        Balance = clsMain.MyDoubleUptoNDecimal(Credit, 2) + " Cr";
        //                    }
        //                    else if (Result < 0)
        //                    {
        //                        Debit = Result;
        //                        Debit = Debit * -1;
        //                        Balance = clsMain.MyDoubleUptoNDecimal(Debit, 2) + " Dr";
        //                    }
        //                    else
        //                    {
        //                        Balance = "";
        //                    }
        //                    RowBalance = clsMain.MyDouble(Result);

        //                    objLedger.Add(new LedgerReport
        //                    {
        //                        vchcode = 0,
        //                        date = clsMain.MyString(FDate),
        //                        dtorder = "",
        //                        Type = "OpBal",
        //                        BillNo = "",
        //                        Account = "",
        //                        Value = clsMain.MyDouble(Result),
        //                        Credit = clsMain.MyString(Credit),
        //                        debit = clsMain.MyString(Debit),
        //                        Balance = clsMain.MyString(Balance),
        //                        Shortnar = "",
        //                        DueDate = "",
        //                        OverDueDays = 0
        //                    });

        //                    if (Convert.ToBoolean(PrevYrData) == true)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            strQry = "Select A.VchCode,A.VchNo as BillNo,A.Value1 as Amount,(Select Top 1 DueDate From Tran3 Where Method = 1 And VchCode = A.VchCode And RecType = 1) as DueDT,IIF(A.VALUE1 > 0, (Select top 1 (Select Top 1 Name from Master1 where Code = t21.mastercode1) from Tran2 as t21 where t21.vchcode = A.vchcode and t21.rectype = 1 and t21.value1 < 0 and t21.mastercode1 <> A.MasterCode1 order by t21.srno),(Select top 1 (Select Top 1 Name from Master1 where Code = t22.mastercode1) from Tran2 as t22 where t22.vchcode = A.vchcode and t22.rectype = 1 and t22.value1 > 0 and t22.mastercode1 <> A.MasterCode1 order by t22.srno)) AS Account,IIF(A.VchType = 2,'Purc',IIF(A.VchType = 3,'SlRt',IIF(A.VchType = 9,'Sale',IIF(A.VchType = 10,'PrRt',IIF(A.VchType = 14,'Rcpt',IIF(A.VchType = 15,'Contra',IIF(A.VchType = 16,'Jrnl',IIF(A.VchType = 17,'DrNt',IIf(A.VchType = 18,'CrNt',IIF(A.VchType = 19,'Pymt')))))))))) as VchTypeStr,Format(A.[Date],'dd/MM/yyyy') as CDate,IIF(A.Value1 > 0,CStr(A.Value1),'') as Credit,IIF(A.Value1 < 0,CStr(A.Value1 * (-1)),'') as Debit,A.ShortNar From Tran2 A Where A.MasterCode1 = " + AccCode + " And A.RecType = 1 AND A.Date >= #" + FDate + "# AND A.Date <= #" + TDate + "# Order By A.Date,A.VchCode";
        //                            dt = new OLEDBHELPER(ConnectionStringPY).getTable(strQry);
        //                        }
        //                        else
        //                        {
        //                            strQry = "Select A.VchCode,A.VchNo as BillNo,A.Value1 as Amount,(Select Top 1 DueDate From Tran3 Where Method = 1 And VchCode = A.VchCode And RecType = 1) as DueDT,case when A.VALUE1 > 0 then (Select top 1 (Select Top 1 Name from Master1 where Code = t21.mastercode1) from Tran2 as t21 where t21.vchcode = A.vchcode and t21.rectype = 1 and t21.value1 < 0 and t21.mastercode1 <> A.MasterCode1 order by t21.srno) else (Select top 1 (Select Top 1 Name from Master1 where Code = t22.mastercode1) from Tran2 as t22 where t22.vchcode = A.vchcode and t22.rectype = 1 and t22.value1 > 0 and t22.mastercode1 <> A.MasterCode1 order by t22.srno) end AS Account,case when A.vchtype = 1 then 'OpBal' When A.vchtype = 9 then 'Sale' when A.vchtype = 2 then 'Pur' when A.vchtype =3 then 'SaleR' When A.vchtype = 10 then 'PurR' when A.vchtype = 14 then 'Recipt' when A.vchtype = 15 then 'Cont' when A.vchtype = 16 then 'Journal' when A.vchtype = 17 then 'DrNote' when A.vchtype = 18 then 'CrNote' when A.vchtype = 19 then 'Paymt' else 'Other' end VchTypeStr,Convert(varchar(20),A.[Date],103) as CDate,case when A.Value1 > 0 then cast(A.VALUE1 as char(20)) else '' end as Credit,case when A.Value1 < 0 then cast(A.VALUE1 * -1 as char(20)) else '' end as Debit,A.ShortNar From Tran2 A Where A.MasterCode1 = " + AccCode + " And A.RecType = 1 AND A.Date >= '" + FDate + "' AND A.Date <= '" + TDate + "' Order By A.Date,A.VchCode";
        //                            dt = new SQLHELPER(ConnectionStringPY).getTable(strQry);
        //                        }
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            for (int i = 0; i < dt.Rows.Count; i++)
        //                            {
        //                                DueDate = "";
        //                                OverDueDay = 0;

        //                                if (dt.Rows[i]["DueDT"].ToString() != "")
        //                                {
        //                                    DueDate = clsMain.MyDate(dt.Rows[i]["DueDT"]).ToString("dd-MM-yyyy");
        //                                    EDT = DateTime.Now.Date;
        //                                    FDT = clsMain.MyDate(dt.Rows[i]["DueDT"]);

        //                                    OverDueDay = ((TimeSpan)(EDT - FDT)).Days;
        //                                }
        //                                RowBalance = RowBalance + clsMain.MyDouble(dt.Rows[i]["Amount"]);

        //                                if (RowBalance > 0)
        //                                {
        //                                    Balance = clsMain.MyDoubleUptoNDecimal(RowBalance, 2) + " Cr";
        //                                }
        //                                else if (RowBalance < 0)
        //                                {
        //                                    Balance = (clsMain.MyDoubleUptoNDecimal(RowBalance * -1, 2)) + " Dr";
        //                                }
        //                                else
        //                                {
        //                                    Balance = "0.00";
        //                                }

        //                                objLedger.Add(new LedgerReport
        //                                {
        //                                    vchcode = clsMain.MyInt(dt.Rows[i]["vchcode"]),
        //                                    date = clsMain.MyString(dt.Rows[i]["CDate"]),
        //                                    dtorder = "",
        //                                    Type = clsMain.MyString(dt.Rows[i]["VchTypeStr"]),
        //                                    BillNo = clsMain.MyString(dt.Rows[i]["BillNo"]).Trim(),
        //                                    Account = clsMain.MyString(dt.Rows[i]["Account"]),
        //                                    Value = clsMain.MyDouble(dt.Rows[i]["Amount"]),
        //                                    Credit = clsMain.MyString(dt.Rows[i]["Credit"]).Trim(),
        //                                    debit = clsMain.MyString(dt.Rows[i]["debit"]).Trim(),
        //                                    Balance = clsMain.MyString(Balance),
        //                                    Shortnar = clsMain.MyString(dt.Rows[i]["Shortnar"]),
        //                                    DueDate = clsMain.MyString(DueDate),
        //                                    OverDueDays = clsMain.MyInt(OverDueDay)
        //                                });
        //                            }
        //                        }
        //                    }

        //                    if (Provider == 1)
        //                    {
        //                        strQry = "Select A.VchCode,A.VchNo as BillNo,A.Value1 as Amount,(Select Top 1 DueDate From Tran3 Where Method = 1 And VchCode = A.VchCode And RecType = 1) as DueDT,IIF(A.VALUE1 > 0, (Select top 1 (Select Top 1 Name from Master1 where Code = t21.mastercode1) from Tran2 as t21 where t21.vchcode = A.vchcode and t21.rectype = 1 and t21.value1 < 0 and t21.mastercode1 <> A.MasterCode1 order by t21.srno),(Select top 1 (Select Top 1 Name from Master1 where Code = t22.mastercode1) from Tran2 as t22 where t22.vchcode = A.vchcode and t22.rectype = 1 and t22.value1 > 0 and t22.mastercode1 <> A.MasterCode1 order by t22.srno)) AS Account,IIF(A.VchType = 2,'Purc',IIF(A.VchType = 3,'SlRt',IIF(A.VchType = 9,'Sale',IIF(A.VchType = 10,'PrRt',IIF(A.VchType = 14,'Rcpt',IIF(A.VchType = 15,'Contra',IIF(A.VchType = 16,'Jrnl',IIF(A.VchType = 17,'DrNt',IIf(A.VchType = 18,'CrNt',IIF(A.VchType = 19,'Pymt')))))))))) as VchTypeStr,Format(A.[Date],'dd/MM/yyyy') as CDate,IIF(A.Value1 > 0,CStr(A.Value1),'') as Credit,IIF(A.Value1 < 0,CStr(A.Value1 * (-1)),'') as Debit,A.ShortNar From Tran2 A Where A.MasterCode1 = " + AccCode + " And A.RecType = 1 AND A.Date >= #" + FDate + "# AND A.Date <= #" + TDate + "# Order By A.Date,A.VchCode";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    else
        //                    {
        //                        strQry = "Select A.VchCode,A.VchNo as BillNo,A.Value1 as Amount,(Select Top 1 DueDate From Tran3 Where Method = 1 And VchCode = A.VchCode And RecType = 1) as DueDT,case when A.VALUE1 > 0 then (Select top 1 (Select Top 1 Name from Master1 where Code = t21.mastercode1) from Tran2 as t21 where t21.vchcode = A.vchcode and t21.rectype = 1 and t21.value1 < 0 and t21.mastercode1 <> A.MasterCode1 order by t21.srno) else (Select top 1 (Select Top 1 Name from Master1 where Code = t22.mastercode1) from Tran2 as t22 where t22.vchcode = A.vchcode and t22.rectype = 1 and t22.value1 > 0 and t22.mastercode1 <> A.MasterCode1 order by t22.srno) end AS Account,case when A.vchtype = 1 then 'OpBal' When A.vchtype = 9 then 'Sale' when A.vchtype = 2 then 'Pur' when A.vchtype =3 then 'SaleR' When A.vchtype = 10 then 'PurR' when A.vchtype = 14 then 'Recipt' when A.vchtype = 15 then 'Cont' when A.vchtype = 16 then 'Journal' when A.vchtype = 17 then 'DrNote' when A.vchtype = 18 then 'CrNote' when A.vchtype = 19 then 'Paymt' else 'Other' end VchTypeStr,Convert(varchar(20),A.[Date],103) as CDate,case when A.Value1 > 0 then cast(A.VALUE1 as char(20)) else '' end as Credit,case when A.Value1 < 0 then cast(A.VALUE1 * -1 as char(20)) else '' end as Debit,A.ShortNar From Tran2 A Where A.MasterCode1 = " + AccCode + " And A.RecType = 1 AND A.Date >= '" + FDate + "' AND A.Date <= '" + TDate + "' Order By A.Date,A.VchCode";
        //                        dt = new SQLHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        for (int i = 0; i < dt.Rows.Count; i++)
        //                        {
        //                            DueDate = "";
        //                            OverDueDay = 0;

        //                            string frmDate = DateTime.Now.ToString("dd-MM-yyyy");

        //                            if (dt.Rows[i]["DueDT"].ToString() != "")
        //                            {

        //                                DueDate = clsMain.MyDate(dt.Rows[i]["DueDT"]).ToString("dd-MM-yyyy");
        //                                EDT = DateTime.Now.Date;
        //                                FDT = clsMain.MyDate(dt.Rows[i]["DueDT"]);

        //                                OverDueDay = ((TimeSpan)(EDT - FDT)).Days;
        //                            }
        //                            RowBalance = RowBalance + clsMain.MyDouble(dt.Rows[i]["Amount"]);

        //                            if (RowBalance > 0)
        //                            {
        //                                Balance = clsMain.MyDoubleUptoNDecimal(RowBalance, 2) + " Cr";
        //                            }
        //                            else if (RowBalance < 0)
        //                            {
        //                                Balance = (clsMain.MyDoubleUptoNDecimal(RowBalance * -1, 2)) + " Dr";
        //                            }
        //                            else
        //                            {
        //                                Balance = "0.00";
        //                            }

        //                            objLedger.Add(new LedgerReport
        //                            {
        //                                vchcode = clsMain.MyInt(dt.Rows[i]["vchcode"]),
        //                                date = clsMain.MyString(dt.Rows[i]["CDate"]),
        //                                dtorder = "",
        //                                Type = clsMain.MyString(dt.Rows[i]["VchTypeStr"]),
        //                                BillNo = clsMain.MyString(dt.Rows[i]["BillNo"]).Trim(),
        //                                Account = clsMain.MyString(dt.Rows[i]["Account"]),
        //                                Value = clsMain.MyDouble(dt.Rows[i]["Amount"]),
        //                                Credit = clsMain.MyString(dt.Rows[i]["Credit"]).Trim(),
        //                                debit = clsMain.MyString(dt.Rows[i]["debit"]).Trim(),
        //                                Balance = clsMain.MyString(Balance),
        //                                Shortnar = clsMain.MyString(dt.Rows[i]["Shortnar"]),
        //                                DueDate = clsMain.MyString(DueDate),
        //                                OverDueDays = clsMain.MyInt(OverDueDay)
        //                            });
        //                        }
        //                    }

        //                    return new { Sucess = 1, msg = "Sucess", Data = objLedger };
        //                }
        //                catch (Exception ex)
        //                {
        //                    string strQry = "select -1 as Status";

        //                    SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    DataTable dt = obj.getTable(strQry);

        //                    return dt;
        //                }
        //            }


        //            [HttpGet]
        //            public dynamic AccountWiseStatement(int AccCode, string FDate, string TDate, string CompCode, string FY)
        //            {
        //                List<AccountWiseStatement> objLedger = new List<AccountWiseStatement>();
        //                double LBal;
        //                int DD = 0;
        //                string LBalance = "0.00";
        //                double Balance = 0;
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable dt = new DataTable();

        //                    LBal = GetLedgerBalance(AccCode, TDate, ConnectionString);
        //                    if (LBal > 0)
        //                    {
        //                        LBalance = clsMain.MyDoubleUptoNDecimal(LBal, 2) + " Cr.";
        //                    }
        //                    else if (LBal < 0)
        //                    {
        //                        LBalance = clsMain.MyDoubleUptoNDecimal(LBal * (-1), 2) + " Dr.";
        //                    }

        //                    string strQry = "";

        //                    if (Provider == 1)
        //                    {
        //                        strQry = "Select A.[Date],A.[No],IIF(A.VchType = 2,'Purc',IIF(A.VchType = 3,'SlRt',IIF(A.VchType = 9,'Sale',IIF(A.VchType = 10,'PrRt',IIF(A.VchType = 14,'Rcpt',IIF(A.VchType = 15,'Contra',IIF(A.VchType = 16,'Jrnl',IIF(A.VchType = 17,'DrNt',IIf(A.VchType = 18,'CrNt',IIF(A.VchType = 19,'Pymt')))))))))) as VchTypeStr,A.Value1,Sum(B.Value1) as PAmount,A.DueDate,DateDiff('d',A.[Date],Date()) as D,DateDiff('d',A.DueDate,DATE()) as DD from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = " + AccCode + " And A.RecType = 1 And A.Method = 1 AND A.Date >= #" + FDate + "# AND A.Date <= #" + TDate + "# Group By A.RefCode,A.[No],A.[Date],A.VchType,A.MasterCode1,A.DueDate,A.Value1 Having Round(SUM(B.Value1),2) <> 0 Order By A.Date,A.RefCode";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    else
        //                    {
        //                        strQry = "SElect A.[Date],A.[No],(Select Case A.VchType When 2 Then 'Purc' When 3 Then 'SlRt' When 9 Then 'Sale' When 10 Then 'PrRt' When 14 Then 'Rcpt' When 15 Then 'Contra' When 16 Then 'Jrnl' When 17 Then 'DrNt' When 18 Then 'CrNt' When 19 Then 'Pymt' End) as VchTypeStr,A.Value1,Sum(B.Value1) as PAmount,A.DueDate,DateDiff(d,A.Date,GETDATE()) as D,DateDiff(d,A.DueDate,GETDATE()) as DD from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.MasterCode1 = " + AccCode + " And A.RecType = 1 And A.Method = 1 AND A.Date >= '" + FDate + "' AND A.Date <= '" + TDate + "' Group By A.RefCode,A.[No],A.[Date],A.VchType,A.MasterCode1,A.DueDate,A.Value1 Having Round(SUM(B.Value1),2) <> 0 Order By A.Date,A.RefCode";
        //                        dt = new SQLHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            AccountWiseStatement AWS = new AccountWiseStatement();
        //                            AWS.date = Convert.ToDateTime(dr["Date"]).ToString("dd-MM-yyyy");
        //                            AWS.VchNo = clsMain.MyString(dr["No"].ToString().Trim());
        //                            AWS.Type = clsMain.MyString(dr["VchTypeStr"]);
        //                            AWS.BillAmt = Math.Abs(clsMain.MyDouble(dr["Value1"]));
        //                            if (clsMain.MyDouble(dr["PAmount"]) > 0)
        //                            {
        //                                AWS.PAmtBillDr = 0;
        //                                AWS.PAmtBillCr = Math.Abs(clsMain.MyDouble(dr["PAmount"]));
        //                                Balance = Balance - Math.Abs(AWS.PAmtBillCr);
        //                            }
        //                            else
        //                            {
        //                                AWS.PAmtBillDr = Math.Abs(clsMain.MyDouble(dr["PAmount"]));
        //                                AWS.PAmtBillCr = 0;
        //                                Balance = Balance - Math.Abs(AWS.PAmtBillDr);
        //                            }
        //                            AWS.Balance = clsMain.MyDouble(Balance);
        //                            AWS.DueDate = Convert.ToDateTime(dr["DueDate"]).ToString("dd-MM-yyyy");
        //                            AWS.Due = "N";

        //                            DD = clsMain.MyInt(dr["DD"]);

        //                            //if (Convert.ToDateTime(TDate) >= Convert.ToDateTime(dr["DueDate"]))
        //                            //{
        //                            //    AWS.Due = "Y";                           
        //                            //}
        //                            if (DD >= 0) { AWS.Due = "Y"; }
        //                            AWS.PDays = clsMain.MyInt(dr["D"]);
        //                            objLedger.Add(AWS);
        //                        }
        //                    }

        //                    return new { Sucess = 1, msg = "Sucess", LedgerBalance = LBalance, Data = objLedger };
        //                }
        //                catch (Exception ex)
        //                {
        //                    string strQry = "select -1 as Status";

        //                    SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    DataTable dt = obj.getTable(strQry);
        //                    return dt;
        //                }
        //            }



        //            [HttpGet]
        //            public dynamic CheckPartyCreditLimit(int AccCode, double OrderAmt, string CompCode, string FY)
        //            {
        //                Double CrLimit = 0;
        //                bool CrYN = false;
        //                double OpBal = 0;
        //                double TotLimit = 0;
        //                try
        //                {
        //                    string Qry = "";
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt3 = new DataTable();
        //                    DataTable dt2 = new DataTable();
        //                    DataTable dt1 = new DataTable();
        //                    Qry = "Select B18 From Config where rectype = 5 and B18=1";
        //                    //DataTable dt3 = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                    if (Provider == 1)
        //                    {
        //                        dt3 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                    }
        //                    else
        //                    {
        //                        dt3 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                    }

        //                    if (dt3 != null && dt3.Rows.Count > 0)
        //                    {
        //                        // SQLHELPER obj1 = new SQLHELPER(ConnectionString);
        //                        Qry = "Select I1 From Config where rectype = 7 and I1=3";
        //                        // DataTable dt2 = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                        if (Provider == 1)
        //                        {
        //                            dt2 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                        }
        //                        else
        //                        {
        //                            dt2 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                        }

        //                        if (dt2 != null && dt2.Rows.Count > 0)
        //                        {
        //                            Qry = "select D1,B6 From Master1 where Code = " + AccCode + "";
        //                            //DataTable dt1 = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                            if (Provider == 1)
        //                            {
        //                                dt1 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                            }
        //                            else
        //                            {
        //                                dt1 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                            }

        //                            if (dt1 != null && dt1.Rows.Count > 0)
        //                            {
        //                                CrLimit = (double)dt1.Rows[0]["D1"];
        //                                CrYN = (bool)dt1.Rows[0]["B6"];
        //                            }
        //                            if (CrYN == true)
        //                            {
        //                                OpBal = (GetLedgerBalance(AccCode, DateTime.Now.ToString("dd/MMM/yyyy"), ConnectionString)) * (-1);
        //                                TotLimit = CrLimit - OpBal - OrderAmt;
        //                                if (TotLimit < 0)
        //                                {
        //                                    return new { Sucess = 0, msg = "Your Credit Limit is Exceeded" };
        //                                }
        //                                else
        //                                {
        //                                    return new { Sucess = 1, msg = "Sucess" };
        //                                }
        //                            }
        //                            else
        //                            {
        //                                return new { Sucess = 1, msg = "Sucess" };
        //                            }
        //                        }
        //                        else
        //                        {
        //                            return new { Sucess = 1, msg = "Sucess" };
        //                        }
        //                    }
        //                    else
        //                    {
        //                        return new { Sucess = 1, msg = "Sucess" };
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Fail" };
        //                }
        //            }
        //            public int IfCreditLimitExist(int AccCode, double OrderAmt, string ConnectionString)
        //            {
        //                double CrLimit = 0;
        //                bool CrYN = false;
        //                double OpBal = 0;
        //                double TotLimit = 0;
        //                try
        //                {
        //                    string Qry = "";
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    DataTable dt3 = new DataTable();
        //                    DataTable dt2 = new DataTable();
        //                    DataTable dt1 = new DataTable();
        //                    Qry = "Select B18 From Config where rectype = 5 and B18=1";
        //                    //DataTable dt3 = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                    if (Provider == 1)
        //                    {
        //                        dt3 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                    }
        //                    else
        //                    {
        //                        dt3 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                    }
        //                    if (dt3 != null && dt3.Rows.Count > 0)
        //                    {
        //                        //SQLHELPER obj1 = new SQLHELPER(ConnectionString);
        //                        Qry = "Select I1 From Config where rectype = 7 and I1=3";
        //                        //DataTable dt2 = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                        if (Provider == 1)
        //                        {
        //                            dt2 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                        }
        //                        else
        //                        {
        //                            dt2 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                        }
        //                        if (dt2 != null && dt2.Rows.Count > 0)
        //                        {
        //                            Qry = "select D1,B6 From Master1 where Code = " + AccCode + "";
        //                            //DataTable dt1 = new ESCommon.SQLHELPER(ConnectionString).getTable(Qry);
        //                            if (Provider == 1)
        //                            {
        //                                dt1 = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                            }
        //                            else
        //                            {
        //                                dt1 = new SQLHELPER(ConnectionString).getTable(Qry);
        //                            }
        //                            if (dt1 != null && dt1.Rows.Count > 0)
        //                            {
        //                                CrLimit = (double)dt1.Rows[0]["D1"];
        //                                CrYN = (bool)dt1.Rows[0]["B6"];
        //                            }
        //                            if (CrYN == true)
        //                            {
        //                                OpBal = (GetLedgerBalance(AccCode, DateTime.Now.ToString("dd/MMM/yyyy"), ConnectionString)) * (-1);
        //                                TotLimit = CrLimit - OpBal - OrderAmt;
        //                                if (TotLimit < 0)
        //                                {
        //                                    return 1;
        //                                }
        //                                else
        //                                {
        //                                    return 0;
        //                                }
        //                            }
        //                            else
        //                            {
        //                                return 0;
        //                            }
        //                        }
        //                        else
        //                        {
        //                            return 0;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        return 0;
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //            }

        //            public int IfBillGettingOverDue(int AccCode, string ConnectionString)
        //            {
        //                int OverDue = 0;
        //                try
        //                {
        //                    string Qry = "";
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select A.RefCode,Sum(B.Value1) from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.RecType = 1 and A.MasterCode1 = " + AccCode + " And A.Method = 1 And A.Value1 < 0 And A.Date <= Format(Date(),'dd/MM/yyyy') And A.DueDate <= Format(Date(),'dd/MM/yyyy') Group By A.RefCode Having Sum(B.Value1) <= -0.01 Order By A.RefCode";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select A.RefCode,Sum(B.Value1) from Tran3 A Left Join Tran3 B On A.RefCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.RecType = B.RecType Where A.RecType = 1 and A.MasterCode1 = " + AccCode + " And A.Method = 1 And A.Value1 < 0 And A.Date <= Cast(getDate() as Date) And A.DueDate <= Cast(getDate() as Date)  Group By A.RefCode Having Sum(B.Value1) <= -0.01 Order By A.RefCode";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        OverDue = 1;
        //                    }
        //                }
        //                catch
        //                {
        //                    return OverDue;
        //                }
        //                return OverDue;
        //            }

        //            public double GetLedgerBalance(int AccCode, string DT, string ConnectionString)
        //            {
        //                double Bal = 0;
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    string Qry = "";

        //                    if (Provider == 1)
        //                    {
        //                        Qry = "Select IIF(IsNull(Sum(closingbal)),0,Sum(closingbal)) as CB From (Select D1 as closingbal From Folio1 Where MasterCode = " + AccCode + "  Union All Select Sum(Value1) as closingbal From Tran2 Where Date <= #" + DT + "# And Rectype = 1  And MasterCode1 = " + AccCode + ") A";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(Qry);
        //                    }
        //                    else
        //                    {
        //                        Qry = "select IsNull(Sum(closingbal),0) as CB From (Select D1 as closingbal From Folio1 Where MasterCode = " + AccCode + "  Union All Select IsNull(Sum(Value1),0) as closingbal From Tran2 Where Date <= Cast('" + DT + "' as dateTime)  AND Rectype = 1  And MasterCode1 = " + AccCode + ") A";
        //                        dt = new SQLHELPER(ConnectionString).getTable(Qry);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Bal = clsMain.MyDouble(dt.Rows[0]["CB"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return Bal;
        //            }
        //            //Start Party Pending Payment List
        //            [HttpGet]
        //            public dynamic GetPendingPyments(string UserId)
        //            {
        //                List<PendingPayments> objResult = new List<PendingPayments>();

        //                SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string strQry = " SElect A.RefCode,ltrim(A.[No]) RefNo, max(A.VchCode) VchCode," +
        //                 " case when A.vchtype = 1 then 'OpBl' when A.vchtype = 14 then 'Rcpt' when A.vchType = 9 then 'Sale' when A.vchtype =3 then 'SaleR' when A.vchType = 16 then 'Pymt' else 'Other' end Type," +
        //                 " Datediff(dd,A.DueDate,getdate()) Days,convert(nvarchar(12), A.date, 113) as date,convert(nvarchar(12), A.Duedate, 113) as Duedate," +
        //                 " abs(A.Value1) TotalAmt,(case when round(Sum(B.Value1),2) < 0 then round(ABS(Sum(B.Value1)),2) else 0 end) as Receivable," +
        //                 " (case when round(Sum(B.Value1),2) > 0 then round(Sum(B.Value1),2) else 0 end) as Payable From Tran3 A" +
        //                 " Left Join Tran3 B On A.RecType = B.Rectype And A.refCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.Mastercode2 = B.MasterCode2" +
        //                 " Where A.MasterCode1 =" + UserId + " And A.rectype = 1 and A.Method =1 Group By A.vchtype, A.RefCode,A.[No],A.Date,A.DueDate,A.MasterCode1,A.Value1 " +
        //                 " Having (Sum(B.Value1) <= -0.01) Order By A.Date";

        //                DataTable dt = obj.getTable(strQry);
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new PendingPayments
        //                        {
        //                            RefCode = (int)dr["RefCode"],
        //                            RefNo = (string)dr["RefNo"],
        //                            RefDate = (string)dr["Date"],
        //                            VchCode = (int)dr["VchCode"],
        //                            Type = (string)dr["Type"],
        //                            Days = (int)dr["Days"],
        //                            DueDate = (string)dr["DueDate"],
        //                            Payable = (double)dr["Payable"],
        //                            Reciveable = (double)dr["Receivable"],
        //                            TotalAmount = (double)dr["TotalAmt"],
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }
        //            //End Party Pending Payment List
        //            //Start Party Pending Order List

        //            [HttpGet]
        //            public dynamic GetPendingOrder(string AccCode, string FDate, string TDate, string CompCode, string FY)
        //            {
        //                List<PendingOrder> objResult = new List<PendingOrder>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    queryStr = "SElect A.RefCode,ltrim(A.[No]) As RefNo, Format(A.date, 'dd/MMM/yyyyy') as dt, Format(A.Duedate, 'dd/MMM/yyyyy') as Dudate, Master1.Name as ItemName, UnitName.Name as Unit,A.Value3,Sum(B.Value1) as PQty,PartyMaster.name as PartyName From((((Tran3 A  Left Join Tran3 B On A.RecType = B.Rectype And A.refCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.Mastercode2 = B.MasterCode2) Left join Master1 on master1.code = a.MasterCode1) Left join Master1 as UnitName on master1.CM1 = UnitName.Code) Left join Master1 PartyMaster on PartyMaster.code = a.MasterCode2) Where A.MasterCode2 =  " + AccCode + " And A.VchType = 12 And A.Method = 1 And A.rectype = 4 And A.Value1 > 0 And A.Date >= #" + FDate + "# And A.Date <= #" + TDate + "# Group By A.RefCode,A.[No],A.Date,A.DueDate,A.MasterCode1,A.Value3,Master1.Name,UnitName.Name,PartyMaster.name Having Sum(B.Value1) >= 0.01 Order By A.Date";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "SElect A.RefCode,ltrim(A.[No]) RefNo," +
        //                           " convert(varchar, A.date, 103) as dt,convert(varchar, A.Duedate, 103) as Dudate," +
        //                           " Master1.Name as ItemName, UnitName.Name as Unit,A.Value3,Sum(B.Value1) as PQty,PartyMaster.name as PartyName" +
        //                           " From Tran3 A " +
        //                           " Left Join Tran3 B On A.RecType = B.Rectype And A.refCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.Mastercode2 = B.MasterCode2" +
        //                           " Left join Master1 on master1.code = a.MasterCode1" +
        //                           " Left join Master1 as UnitName on master1.CM1 = UnitName.Code" +
        //                           " Left join Master1 PartyMaster on PartyMaster.code = a.MasterCode2" +
        //                           " Where A.MasterCode2 =  " + AccCode + " And A.VchType = 12 And A.Method = 1 And A.rectype = 4 And A.Value1 > 0 And A.Date >= '" + FDate + "' And A.Date <= '" + TDate + "'" +
        //                           " Group By A.RefCode,A.[No],A.Date,A.DueDate,A.MasterCode1,A.Value3,Master1.Name,UnitName.Name,PartyMaster.name Having Sum(B.Value1) >= 0.01 Order By A.Date";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new PendingOrder
        //                        {
        //                            RefCode = (int)dr["RefCode"],
        //                            RefNo = (string)dr["RefNo"],
        //                            RefDate = (string)dr["dt"],
        //                            PartyName = (string)dr["PartyName"],
        //                            ItemName = (string)dr["ItemName"],
        //                            DueDate = (string)dr["Dudate"],
        //                            Unit = (string)dr["Unit"],
        //                            PQty = (double)dr["PQty"],
        //                            TotalAmount = (((double)dr["Value3"]) * ((double)dr["PQty"]))
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetPendingSaleQuo(string AccCode, string FDate, string TDate, string CompCode, string FY)
        //            {
        //                List<PendingOrder> objResult = new List<PendingOrder>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    queryStr = "SElect A.RefCode,ltrim(A.[No]) As RefNo, Format(A.date, 'dd/MMM/yyyyy') as dt, Format(A.Duedate, 'dd/MMM/yyyyy') as Dudate, Master1.Name as ItemName, UnitName.Name as Unit,A.Value3,Sum(B.Value1) as PQty,PartyMaster.name as PartyName From((((Tran3 A  Left Join Tran3 B On A.RecType = B.Rectype And A.refCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.Mastercode2 = B.MasterCode2) Left join Master1 on master1.code = a.MasterCode1) Left join Master1 as UnitName on master1.CM1 = UnitName.Code) Left join Master1 PartyMaster on PartyMaster.code = a.MasterCode2) Where A.MasterCode2 =  " + AccCode + " And A.VchType = 26 And A.Method = 1 And A.rectype = 5 And A.Value1 > 0 And A.Date >= #" + FDate + "# And A.Date <= #" + TDate + "# Group By A.RefCode,A.[No],A.Date,A.DueDate,A.MasterCode1,A.Value3,Master1.Name,UnitName.Name,PartyMaster.name Having Sum(B.Value1) >= 0.01 Order By A.Date";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "SElect A.RefCode,ltrim(A.[No]) RefNo," +
        //                           " convert(varchar, A.date, 103) as dt,convert(varchar, A.Duedate, 103) as Dudate," +
        //                           " Master1.Name as ItemName, UnitName.Name as Unit,A.Value3,Sum(B.Value1) as PQty,PartyMaster.name as PartyName" +
        //                           " From Tran3 A " +
        //                           " Left Join Tran3 B On A.RecType = B.Rectype And A.refCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.Mastercode2 = B.MasterCode2" +
        //                           " Left join Master1 on master1.code = a.MasterCode1" +
        //                           " Left join Master1 as UnitName on master1.CM1 = UnitName.Code" +
        //                           " Left join Master1 PartyMaster on PartyMaster.code = a.MasterCode2" +
        //                           " Where A.MasterCode2 =  " + AccCode + " And A.VchType = 26 And A.Method = 1 And A.rectype = 5 And A.Value1 > 0 And A.Date >= '" + FDate + "' And A.Date <= '" + TDate + "'" +
        //                           " Group By A.RefCode,A.[No],A.Date,A.DueDate,A.MasterCode1,A.Value3,Master1.Name,UnitName.Name,PartyMaster.name Having Sum(B.Value1) >= 0.01 Order By A.Date";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new PendingOrder
        //                        {
        //                            RefCode = (int)dr["RefCode"],
        //                            RefNo = (string)dr["RefNo"],
        //                            RefDate = (string)dr["dt"],
        //                            PartyName = (string)dr["PartyName"],
        //                            ItemName = (string)dr["ItemName"],
        //                            DueDate = (string)dr["Dudate"],
        //                            Unit = (string)dr["Unit"],
        //                            PQty = (double)dr["PQty"],
        //                            TotalAmount = (((double)dr["Value3"]) * ((double)dr["PQty"]))
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }


        //            [HttpGet]
        //            public dynamic GetReceiptSummary(int AccCode, string FDate, string TDate, string CompCode, string FY)
        //            {
        //                List<ReceiptSum> objResult = new List<ReceiptSum>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    //queryStr = "Select t1.Vchtype,T1.VchCode,Format(t1.date, 'dd/MMM/yyyyy') as dt,ltrim(T1.VchNo) as VNo ,M1.Name,Sum(t2.value1 * -1) as Qty,Voi.Station,Voi.GrNo,Voi.Transport from (((Tran1 T1 Left join Tran2 T2 on t1.vchcode = t2.vchcode) left Join Vchotherinfo VOI on t1.VchCode = VOI.VchCode) left join Master1 M1 on T1.MasterCode1 = M1.Code) where T1.MasterCode1 = " + AccCode + " and T1.Vchtype = 9 and T1.Date >= #" + FDate + "# And T1.Date <= #" + TDate + "# and T2.Rectype in(2,7) Group by T1.Date,T1.VchNo,M1.Name,Voi.Station,Voi.GrNo,Voi.Transport,t1.Vchcode,T1.vchtype order by T1.vchno";
        //                    queryStr = "Select (case when T2.Trantype = 1 then 'PDC' else 'Regular' end) as Type,T2.C2 as Num,t2.Shortnar,Format(t1.date, 'dd/MMM/yyyyy') as dt,ltrim(t1.VchNo) as Vno,M1.Name,t2.Value1 as Amt,voi.narration1 from (((Tran1 T1 left join Tran2 t2 on T1.vchcode = t2.vchcode) left join vchotherinfo voi on Voi.vchcode = t1.vchcode) left Join Master1 M1 on t2.Mastercode1 = M1.Code) where T1.Date >= #" + FDate + "# And T1.Date <= #" + TDate + "# and M1.Code = " + AccCode + " and t2.VchType = 14 and t2.Value1>0 order by T1.Vchcode";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "Select (case when T2.Trantype = 1 then 'PDC' else 'Regular' end) as Type ,T2.C2 as Num,t2.Shortnar,convert(varchar, T1.date, 103) as dt,ltrim(T1.VchNo) as VNo,M1.Name,t2.Value1 as Amt,voi.narration1 from (((Tran1 T1 left join Tran2 t2 on T1.vchcode = t2.vchcode) left join vchotherinfo voi on Voi.vchcode = t1.vchcode) left Join Master1 M1 on t2.Mastercode1 = M1.Code) where T1.Date >= '" + FDate + "' And T1.Date <= '" + TDate + "' and M1.Code = " + AccCode + " and t2.VchType = 14 and t2.Value1>0 order by T1.Vchcode";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        int Ty = 0;
        //                        objResult.Add(new ReceiptSum
        //                        {

        //                            VchNo = (string)dr["Vno"],
        //                            InvDate = (string)dr["dt"],
        //                            PartyName = (string)dr["Name"],
        //                            type = (string)dr["type"],
        //                            Num = (string)dr["Num"],
        //                            Amount = (double)dr["Amt"],
        //                            Narration = (string)dr["Shortnar"],
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetSaleHeader(string AccCode, string FDate, string TDate, string CompCode, string FY)
        //            {
        //                List<SaleHeaderinv> objResult = new List<SaleHeaderinv>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                if (Provider == 1)
        //                {
        //                    queryStr = "Select t1.Vchtype,T1.VchCode,Format(t1.date, 'dd/MMM/yyyyy') as dt,ltrim(T1.VchNo) as VNo ,M1.Name,Sum(t2.value1 * -1) as Qty,Voi.Station,Voi.GrNo,Voi.Transport from (((Tran1 T1 Left join Tran2 T2 on t1.vchcode = t2.vchcode) left Join Vchotherinfo VOI on t1.VchCode = VOI.VchCode) left join Master1 M1 on T1.MasterCode1 = M1.Code) where T1.MasterCode1 = " + AccCode + " and T1.Vchtype = 9 and T1.Date >= #" + FDate + "# And T1.Date <= #" + TDate + "# and T2.Rectype in(2,7) Group by T1.Date,T1.VchNo,M1.Name,Voi.Station,Voi.GrNo,Voi.Transport,t1.Vchcode,T1.vchtype order by T1.vchno";
        //                    //queryStr = "SElect A.RefCode,ltrim(A.[No]) As RefNo, Format(A.date, 'dd/MMM/yyyyy') as dt, Format(A.Duedate, 'dd/MMM/yyyyy') as Dudate, Master1.Name as ItemName, UnitName.Name as Unit,A.Value3,Sum(B.Value1) as PQty,PartyMaster.name as PartyName From((((Tran3 A  Left Join Tran3 B On A.RecType = B.Rectype And A.refCode = B.RefCode And A.MasterCode1 = B.MasterCode1 And A.Mastercode2 = B.MasterCode2) Left join Master1 on master1.code = a.MasterCode1) Left join Master1 as UnitName on master1.CM1 = UnitName.Code) Left join Master1 PartyMaster on PartyMaster.code = a.MasterCode2) Where A.MasterCode2 =  " + AccCode + " And A.VchType = 26 And A.Method = 1 And A.rectype = 5 And A.Value1 > 0 And A.Date >= #" + FDate + "# And A.Date <= #" + TDate + "# Group By A.RefCode,A.[No],A.Date,A.DueDate,A.MasterCode1,A.Value3,Master1.Name,UnitName.Name,PartyMaster.name Having Sum(B.Value1) >= 0.01 Order By A.Date";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "Select t1.Vchtype,T1.VchCode,convert(varchar, T1.date, 103) as dt,ltrim(T1.VchNo) as VNo,M1.Name,Sum(t2.value1 * -1) as Qty,isnull(Voi.Station,'') as Station,isnull(Voi.GrNo,'') as Grno,isnull(Voi.Transport,'') as Transport from Tran1 T1 Left join Tran2 T2 on t1.vchcode = t2.vchcode left Join Vchotherinfo VOI on t1.VchCode = VOI.VchCode left join Master1 M1 on T1.MasterCode1 = M1.Code where T1.MasterCode1 = " + AccCode + " and T1.Vchtype = 9 and T1.Date >= '" + FDate + "' And T1.Date <= '" + TDate + "' and T2.Rectype in(2,7) Group by T1.Date,T1.VchNo,M1.Name,Voi.Station,Voi.GrNo,Voi.Transport,t1.Vchcode,T1.vchtype order by T1.vchno";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new SaleHeaderinv
        //                        {
        //                            Vchcode = (int)dr["VchCode"],
        //                            VchNo = (string)dr["VNo"],
        //                            InvDate = (string)dr["dt"],
        //                            PartyName = (string)dr["Name"],
        //                            GrNo = (string)dr["GrNo"],
        //                            Transport = (string)dr["Transport"],
        //                            Station = (string)dr["Station"],
        //                            Qty = (double)dr["Qty"],
        //                            //TotalAmount = (double)(((double)dr["Value3"]) * ((double)dr["PQty"]))
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetSaleItemDt(int VchCode, string CompCode, string FY)
        //            {
        //                List<SaleItemDet> objResult = new List<SaleItemDet>();

        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();

        //                queryStr = "SElect A.SrNo,M1.Name as ItemName,Abs(A.Value1) as Qty,M2.Name as Unit,A.D2 as Price,A.D5 as Amount from ((Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code) Left Join Master1 M2 On A.CM2 = M2.Code) Where A.VchCode = " + VchCode + " And A.RecType In (2,7) Order By A.SrNo";
        //                if (Provider == 1)
        //                {
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new SaleItemDet
        //                        {
        //                            SrNo = Convert.ToInt16(dr["SrNo"]),
        //                            ItemName = (string)dr["ItemName"],
        //                            IUnit = (string)dr["Unit"],
        //                            Qty = (double)(dr["Qty"]),
        //                            Price = (double)dr["Price"],
        //                            Amount = (double)dr["Amount"],

        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetCompanyDet(string CompCode, string FY)
        //            {
        //                Company Comp = new Company();
        //                try
        //                {

        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string ConnectionStringDB = GetConnectionStringDB(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        //string DBName = "db.bds";
        //                        queryStr = "SElect iif(Isnull(A.PrintName),'',A.PrintName) as CompName,iif(IsNull(A.Address1),'',A.Address1) + ' ' + iif(IsNull(A.Address2),'',A.Address2) as Add1,iif(IsNull(A.Address3),'',A.Address3) + ' ' + iif(IsNull(A.Address4),'',A.Address4) as Add2,iif(Isnull(A.TelNo),'',A.TelNo) as TelNo,iif(IsNull(A.EMail),'',A.EMail) as EMail,iif(IsNull(A.ITPAN),'',A.ITPAN) as ITPAN,iif(IsNull(A.GSTNo),'',A.GSTNO) as GSTNo,iif(Isnull(A.TINNO),'',A.TINNO) as TINNo,iif(Isnull(A.PinCode),'',A.PinCode) as Pincode from Company A";
        //                        dt = new OLEDBHELPER(ConnectionStringDB).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        string DBName = "Busy" + CompCode + "_db";
        //                        queryStr = "SElect Isnull(A.PrintName,'') as CompName,(IsNull(A.Address1,'') + ' ' + IsNull(A.Address2,'')) as Add1,(IsNull(A.Address3,'') + ' ' + IsNull(A.Address4,'')) as Add2,Isnull(A.TelNo,'') as TelNo,IsNull(A.EMail,'') as EMail,IsNull(A.ITPAN,'') as ITPAN,IsNull(A.GSTNo,'') as GSTNo,Isnull(A.TINNO,'') as TINNo,Isnull(A.PinCode,'') as Pincode from " + DBName + ".dbo.Company A";
        //                        dt = new SQLHELPER(ConnectionStringDB).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Comp.CompName = clsMain.MyString(dt.Rows[0]["CompName"]);
        //                        Comp.Address1 = clsMain.MyString(dt.Rows[0]["Add1"]).Trim();
        //                        Comp.Address2 = clsMain.MyString(dt.Rows[0]["Add2"]).Trim();
        //                        Comp.TelNo = clsMain.MyString(dt.Rows[0]["TelNo"]);
        //                        Comp.EMail = clsMain.MyString(dt.Rows[0]["EMail"]);
        //                        Comp.ITPAN = clsMain.MyString(dt.Rows[0]["ITPAN"]);
        //                        Comp.GSTNo = clsMain.MyString(dt.Rows[0]["GSTNo"]);
        //                        Comp.TinNo = clsMain.MyString(dt.Rows[0]["TINNO"]);
        //                        Comp.PinCode = clsMain.MyString(dt.Rows[0]["Pincode"]);


        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return new { Sucess = 0, msg = EX.Message.ToString(), Data = Comp };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = Comp };
        //            }

        //            [HttpPost]
        //            public List<AlertPayment> SavePendingOrderPayment(PendingBillPayment obj)
        //            {
        //                List<AlertPayment> objResult = new List<AlertPayment>();
        //                string[] RefCode = obj.RefCode.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToArray();
        //                string[] RefNo = obj.RefNo.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Distinct().ToArray();
        //                string[] RefDate = obj.RefDate.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToArray();
        //                string[] PendingAmount = obj.PendingAmount.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).ToArray();
        //                try
        //                {
        //                    DataTable dt = new DataTable();
        //                    int PaymentId = 0;

        //                    for (int i = 0; i < RefCode.Length; i++)
        //                    {
        //                        SqlParameter[] Para = new SqlParameter[13];
        //                        Para[0] = new SqlParameter("@SalesManId", clsMain.MyString(obj.SalesManId));
        //                        Para[1] = new SqlParameter("@PartyId", clsMain.MyString(obj.PartyId));
        //                        Para[2] = new SqlParameter("@PaymentId", clsMain.MyInt(PaymentId));
        //                        Para[3] = new SqlParameter("@TotalAmount", clsMain.MyDouble(obj.Amount));
        //                        Para[4] = new SqlParameter("@ChequeDate", clsMain.MyString(obj.ChequeDate));
        //                        //Para[4] = new SqlParameter("@ChequeDate", Convert.ToDateTime(obj.ChequeDate).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
        //                        Para[5] = new SqlParameter("@ChequeNo", clsMain.MyString(obj.ChequeNo));
        //                        Para[6] = new SqlParameter("@ChequeImage", clsMain.MyString(obj.ChequeImage));
        //                        Para[7] = new SqlParameter("@Remarks", clsMain.MyString(obj.Remarks));
        //                        Para[8] = new SqlParameter("@PaymentType", clsMain.MyInt(obj.PaymentType));
        //                        Para[9] = new SqlParameter("@RefCode", clsMain.MyInt(RefCode[i]));
        //                        Para[10] = new SqlParameter("@RefNo", clsMain.MyString(RefNo[i]));
        //                        // Para[11] = new SqlParameter("@RefDate", clsMain.MyString(RefDate[i]));
        //                        Para[11] = new SqlParameter("@RefDate", Convert.ToDateTime(RefDate[i]).ToString("yyyy-MM-dd", CultureInfo.InvariantCulture));
        //                        Para[12] = new SqlParameter("@PendingAmount", clsMain.MyDouble(PendingAmount[i]));

        //                        dt = new ESCommon.SQLHELPER(ConnectionString).getTable("SP_PendingBillPayment2", Para);

        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            PaymentId = clsMain.MyInt(dt.Rows[0]["PaymentId"]);
        //                        }
        //                    }
        //                    if (dt.Rows.Count > 0)
        //                    {
        //                        objResult = dt.AsEnumerable()
        //                                                .Select(row => new AlertPayment()
        //                                                {
        //                                                    Message = row.Field<string>("msg"),
        //                                                    Sucess = row.Field<int>("Sucess"),
        //                                                    PaymentId = row.Field<int>("PaymentId"),
        //                                                }).ToList();
        //                    }
        //                    else
        //                    {
        //                        string msg = "dsjcu";
        //                        objResult = new List<AlertPayment>();
        //                        AlertPayment ap = new AlertPayment();
        //                        ap.Message = msg;
        //                        objResult.Add(ap);
        //                    }
        //                    return objResult;
        //                }
        //                catch (Exception Ex)
        //                {
        //                    objResult = new List<AlertPayment>();
        //                    AlertPayment ap = new AlertPayment();
        //                    ap.Message = Ex.Message.ToString();
        //                    objResult.Add(ap);
        //                    return objResult;
        //                }
        //            }

        //            string GetXml(object obj1)
        //            {
        //                string ReturnVal = "";
        //                try
        //                {
        //                    XmlSerializer xs = new XmlSerializer(obj1.GetType());
        //                    StringWriter textWriter = new StringWriter();
        //                    xs.Serialize(textWriter, obj1);
        //                    string DoubleQ = @"""";
        //                    string Remove2 = @"""xmlns:xsi=""" + "http://www.w3.org/2001/XMLSchema-instance" + DoubleQ;
        //                    string Encoding = "<?xml version=" + DoubleQ + "1.0" + DoubleQ + " encoding=" + DoubleQ + "utf-16" + DoubleQ + "?>";
        //                    string InnerChild1 = "xmlns:xsi=" + DoubleQ + "http://www.w3.org/2001/XMLSchema-instance" + DoubleQ;
        //                    string InnerChild2 = "xmlns:xsd=" + DoubleQ + "http://www.w3.org/2001/XMLSchema" + DoubleQ;
        //                    string XML = textWriter.ToString().Replace(Encoding, "").Replace(InnerChild1, "").Replace(InnerChild2, "");
        //                    ReturnVal = XML;
        //                }
        //                catch (Exception ex)
        //                {
        //                    throw new Exception(ex.Message);
        //                }
        //                return ReturnVal;
        //            }

        //            [HttpGet]
        //            public dynamic PartyTarget(string UserId, int FMon, int TMon, string CompCode, string FY)
        //            {
        //                List<TargetReport> objResult = new List<TargetReport>();
        //                try
        //                {
        //                    SqlParameter[] Para = new SqlParameter[1];
        //                    Para[0] = new SqlParameter("@SalesManId", clsMain.MyString(UserId));
        //                    //Para[1] = new SqlParameter("@RType", clsMain.MyString(RType));
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    int Uid = 0;
        //                    DataTable dt = new DataTable();
        //                    Uid = Convert.ToInt32(UserId);

        //                    if (Uid == 0)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "SElect T1.Code,iif(IsNull(T2.YTarget), 0, T2.YTarget) as YT,iif(IsNull(T3.YAchieve), 0, T3.YAchieve) as YA,iif(IsNull(T2.MTarget), 0, T2.MTarget) as MT,iif(IsNull(T3.MAchieve), 0, T3.MAchieve) as MA From((Select A.Code From Master1 A where A.Mastertype =2 and parentgrp ) T1" + Environment.NewLine +
        //                                       " Left Join(SElect Top 1 A.SalesCode, Sum(A.TargetVal) as YTarget, (Select top 1 Sum(TargetVal) From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " And TMonth <= " + clsMain.MyInt(TMon) + ") as MTarget From ESSalesTarget A Where TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " And TMonth <= " + clsMain.MyInt(TMon) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode)" + Environment.NewLine +
        //                                       " Left Join(Select T1.MasterCode1, iif(IsNull(Sum(T2.Value3)),0,Sum(T2.Value3)) *(-1) as YAchieve,iif(IsNull((Select Top 1 Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In(9, 3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " And Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In(2, 7) And TM1.MasterCode1 = T1.MasterCode1)),0,(Select Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In(9,3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " And Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In(2,7) And TM1.MasterCode1 = T1.MasterCode1)) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In(9,3) And T2.RecType In(2,7) Group By T1.CM4) T3 On T1.Code = T3.MasterCode1";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "SElect T1.Code,IsNull(T2.YTarget,0) as YT,IsNull(T3.YAchieve,0) as YA,IsNull(T2.MTarget,0) as MT,IsNull(T3.MAchieve,0) as MA From (Select A.Code From Master1 A where A.Mastertype =19) T1 Left Join (SElect Top 1 A.SalesCode,Sum(A.TargetVal) as YTarget,(Select TargetVal From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " And TMonth <= " + clsMain.MyInt(TMon) + ") as MTarget From ESSalesTarget A Where A.TYear = " + clsMain.MyInt(FinYr) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode" + Environment.NewLine +
        //                                                       " Left Join (Select T1.MasterCode1,IsNull(Sum(T2.Value3),0) * (-1) as YAchieve,IsNull((Select Top 1 Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In (9,3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " And Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In (2,7) And TM1.MasterCode1 = T1.MasterCode1),0) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7)  Group By T1.MasterCode1) T3 On T1.Code = T3.MasterCode1";

        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "SElect T1.Code,iif(IsNull(T2.YTarget), 0, T2.YTarget) as YT,iif(IsNull(T3.YAchieve), 0, T3.YAchieve) as YA,iif(IsNull(T2.MTarget), 0, T2.MTarget) as MT,iif(IsNull(T3.MAchieve), 0, T3.MAchieve) as MA From((Select A.Code From Master1 A Where A.Code = " + clsMain.MyInt(UserId) + ") T1" + Environment.NewLine +
        //                                       " Left Join(SElect Top 1 A.SalesCode, Sum(A.TargetVal) as YTarget, (Select Top 1 Sum(TargetVal) From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " And TMonth <= " + clsMain.MyInt(TMon) + ") as MTarget From ESSalesTarget A Where TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " And TMonth <= " + clsMain.MyInt(TMon) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode)" + Environment.NewLine +
        //                                       " Left Join(Select T1.MasterCode1, iif(IsNull(Sum(T2.Value3)),0,Sum(T2.Value3)) *(-1) as YAchieve,iif(IsNull((Select Top 1 Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In(9, 3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " And Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In(2, 7) And TM1.MasterCode1 = T1.MasterCode1)),0,(Select Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In(9,3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " And Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In(2,7) And TM1.MasterCode1 = T1.MasterCode1)) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In(9,3) And T2.RecType In(2,7) And T1.MasterCode1 = " + clsMain.MyInt(UserId) + " Group By T1.CM4) T3 On T1.Code = T3.MasterCode1";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "SElect T1.Code,IsNull(T2.YTarget,0) as YT,IsNull(T3.YAchieve,0) as YA,IsNull(T2.MTarget,0) as MT,IsNull(T3.MAchieve,0) as MA From (Select A.Code From Master1 A Where A.Code = " + clsMain.MyInt(UserId) + ") T1 Left Join (SElect Top 1 A.SalesCode,Sum(A.TargetVal) as YTarget,(Select Top 1 Sum(TargetVal) From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " And TMonth <= " + clsMain.MyInt(TMon) + ") as MTarget From ESSalesTarget A Where A.SalesCode = " + clsMain.MyInt(UserId) + " And A.TYear = " + clsMain.MyInt(FinYr) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode" + Environment.NewLine +
        //                                                       " Left Join (Select T1.MasterCode1,IsNull(Sum(T2.Value3),0) * (-1) as YAchieve,IsNull((Select Top 1 Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In (9,3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " And Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In (2,7) And TM1.MasterCode1 = T1.MasterCode1),0) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.Mastercode1 = " + clsMain.MyInt(UserId) + " Group By T1.MasterCode1) T3 On T1.Code = T3.MasterCode1";

        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new TargetReport
        //                            {
        //                                SCode = (int)dr["Code"],
        //                                SName = BVch.GetMasterCodeToName(Provider, ConnectionString, (int)dr["Code"]),
        //                                MTarget = (double)dr["MT"],
        //                                YTarget = (double)dr["YT"],
        //                                MAchived = (double)dr["MA"],
        //                                YAchived = (double)dr["YA"],
        //                            });
        //                        }
        //                    }
        //                    return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpGet]
        //            public dynamic SalesManTarget(string UserId, int FMon, int TMon, string CompCode, string FY)
        //            {
        //                List<TargetReport> objResult = new List<TargetReport>();
        //                try
        //                {
        //                    SqlParameter[] Para = new SqlParameter[1];
        //                    Para[0] = new SqlParameter("@SalesManId", clsMain.MyString(UserId));
        //                    //Para[1] = new SqlParameter("@RType", clsMain.MyString(RType));
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    int Uid = 0;
        //                    DataTable dt = new DataTable();
        //                    //  Uid = Convert.ToInt32(UserId);

        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "SElect T1.Code,iif(IsNull(T2.YTarget), 0, T2.YTarget) as YT,iif(IsNull(T3.YAchieve), 0, T3.YAchieve) as YA,iif(IsNull(T2.MTarget), 0, T2.MTarget) as MT,iif(IsNull(T3.MAchieve), 0, T3.MAchieve) as MA From((Select A.Code From Master1 A Where A.Code = " + clsMain.MyInt(UserId) + ") T1" + Environment.NewLine +
        //                                    " Left Join(SElect top 1 A.SalesCode, Sum(A.TargetVal) as YTarget, (Select Top 1 Sum(TargetVal)  From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " and TMonth <= " + clsMain.MyInt(TMon) + ") as MTarget From ESSalesTarget A Where A.SalesCode = " + clsMain.MyInt(UserId) + "  And TMonth >= " + clsMain.MyInt(FMon) + " and TMonth <= " + clsMain.MyInt(TMon) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode)" + Environment.NewLine +
        //                                    " Left Join(Select T1.CM4, iif(IsNull(Sum(T2.Value3)),0,Sum(T2.Value3)) *(-1) as YAchieve,iif(IsNull((Select Top 1 Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In(9, 3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " and Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In(2, 7) And TM1.CM4 = T1.CM4)),0,(Select Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In(9,3) And Month(TM1.Date) = 8 And TM2.RecType In(2,7) And TM1.CM4 = T1.CM4)) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In(9,3) And T2.RecType In(2,7) And T1.CM4 = " + clsMain.MyInt(UserId) + " Group By T1.CM4) T3 On T1.Code = T3.CM4";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "SElect T1.Code,IsNull(T2.YTarget,0) as YT,IsNull(T3.YAchieve,0) as YA,IsNull(T2.MTarget,0) as MT,IsNull(T3.MAchieve,0) as MA From (Select A.Code From Master1 A Where A.Code = " + clsMain.MyInt(UserId) + ") T1 Left Join (SElect Top 1 A.SalesCode,Sum(A.TargetVal) as YTarget,(Select Top 1 Sum(TargetVal) From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth >= " + clsMain.MyInt(FMon) + " and TMonth <= " + clsMain.MyInt(TMon) + ") as MTarget From ESSalesTarget A Where A.SalesCode = " + clsMain.MyInt(UserId) + " And A.TYear = " + clsMain.MyInt(FinYr) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode" + Environment.NewLine +
        //                                                    " Left Join (Select T1.CM4,IsNull(Sum(T2.Value3),0) * (-1) as YAchieve,IsNull((Select top 1 Sum(TM2.Value3) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode Where TM1.VchType In (9,3) And Month(TM1.Date) >= " + clsMain.MyInt(FMon) + " and Month(TM1.Date) <= " + clsMain.MyInt(TMon) + " And TM2.RecType In (2,7) And TM1.CM4 = T1.CM4),0) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.CM4 = " + clsMain.MyInt(UserId) + " Group By T1.CM4) T3 On T1.Code = T3.CM4";

        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new TargetReport
        //                            {

        //                                MTarget = (double)dr["MT"],
        //                                YTarget = (double)dr["YT"],
        //                                MAchived = (double)dr["MA"],
        //                                YAchived = (double)dr["YA"],
        //                            });
        //                        }
        //                    }
        //                    return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesManTarget(string UserId, string CompCode, string FY)
        //            {
        //                List<SalesmanTarget> objResult = new List<SalesmanTarget>();
        //                try
        //                {
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    int Uid = 0;
        //                    DataTable dt = new DataTable();
        //                    Uid = Convert.ToInt32(UserId);

        //                    if (Uid == 0)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select A.SalesCode, A.TMonth,A.TargetVal,iif(IsNull(B.Achievement),0,B.Achievement) as Achieve From ((ESSalesTarget A Left Join (Select Month(T1.Date) as M,iif(IsNull(Sum(T2.Value3)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7)  Group By Month(T1.Date)) B On A.TMonth = B.M) left join Master1 M1 on A.SalesCode = M1.Code) Where A.SalesCode = " + UserId + " And A.TYear = " + clsMain.MyInt(FY) + " And A.TargetVal > 0";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.SalesCode,A.TMonth,A.TargetVal,IsNull(B.Achievement,0) as Achieve From ESSalesTarget A Left Join (Select Month(T1.Date) as M,IsNull(Sum(T2.Value3),0) * (-1) as Achievement From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7)  Group By Month(T1.Date)) B On A.TMonth = B.M left join Master1 M1 on A.SalesCode = M1.Code Where A.TYear = " + clsMain.MyInt(FY) + " And A.TargetVal > 0";
        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select A.SalesCode,M1.Name,A.TMonth,A.TargetVal,iif(IsNull(B.Achievement),0,B.Achievement) as Achieve From ((ESSalesTarget A Left Join (Select Month(T1.Date) as M,iif(IsNull(Sum(T2.Value3)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.CM4 = " + Uid + " Group By Month(T1.Date)) B On A.TMonth = B.M)  left join Master1 M1 on A.SalesCode = M1.Code) Where A.SalesCode = " + Uid + " And A.TYear = " + clsMain.MyInt(FY) + " And A.TargetVal > 0";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.SalesCode,M1.Name,A.TMonth,A.TargetVal,IsNull(B.Achievement,0) as Achieve From ESSalesTarget A Left Join (Select Month(T1.Date) as M,IsNull(Sum(T2.Value3),0) * (-1) as Achievement From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.CM4 = " + Uid + " Group By Month(T1.Date)) B On A.TMonth = B.M left join Master1 M1 on A.SalesCode = M1.Code  Where A.SalesCode = " + Uid + " And A.TYear = " + clsMain.MyInt(FY) + " And A.TargetVal > 0";
        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }

        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesmanTarget
        //                            {
        //                                SCode = clsMain.MyInt(dr["SalesCode"]),
        //                                SName = clsMain.MyString(dr["Name"]),
        //                                MonthVal = clsMain.MyInt(dr["TMonth"]),
        //                                MTarget = clsMain.MyDouble(dr["TargetVal"]),
        //                                MAchived = clsMain.MyDouble(dr["Achieve"])
        //                            });
        //                        }
        //                    }
        //                    return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }
        //            [HttpGet]
        //            public dynamic PartyWiseTargetAchievement(int UserId, int Mon, string CompCode, string FY)
        //            {
        //                List<TargetReport> objResult = new List<TargetReport>();
        //                try
        //                {
        //                    //SqlParameter[] Para = new SqlParameter[1];
        //                    //Para[0] = new SqlParameter("@SalesManId", clsMain.MyString(UserId));
        //                    //Para[1] = new SqlParameter("@RType", clsMain.MyString(RType));
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "SElect T1.Code,iif(IsNull(T2.YTarget), 0, T2.YTarget) as YT,iif(IsNull(T3.YAchieve), 0, T3.YAchieve) as YA,iif(IsNull(T2.MTarget), 0, T2.MTarget) as MT,iif(IsNull(T3.MAchieve), 0, T3.MAchieve) as MA From((Select A.Code From Master1 A Where A.Code = " + clsMain.MyInt(UserId) + ") T1 Left Join(SElect A.SalesCode, Sum(A.TargetVal) as YTarget, (Select TargetVal From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth = " + clsMain.MyInt(Mon) + ") as MTarget From ESSalesTarget A Where A.SalesCode = " + clsMain.MyInt(UserId) + " And A.TYear = " + clsMain.MyInt(FinYr) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode)" + Environment.NewLine +
        //                                   " Left Join(Select T1.MasterCode1, iif(IsNull(Sum(T2.Value1)),0,Sum(T2.Value1)) *(-1) as YAchieve,iif(IsNull((Select Sum(TM2.Value1) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode And TM1.MasterCode1 = TM2.MasterCode1 Where TM1.VchType In(9, 3) And Month(TM1.Date) = " + clsMain.MyInt(Mon) + " And TM2.RecType = 1 And TM1.MasterCode1 = T1.MasterCode1)),0,(Select Sum(TM2.Value1) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode And TM1.MasterCode1 = TM2.MasterCode1 Where TM1.VchType In(9,3) And Month(TM1.Date) = 8 And TM2.RecType = 1 And TM1.MasterCode1 = T1.MasterCode1)) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode And T1.MasterCode1 = T2.MasterCode1 Where T1.VchType In(9,3) And T2.RecType = 1 And T1.MasterCode1 = " + clsMain.MyInt(UserId) + " Group By T1.MasterCode1) T3 On T1.Code = T3.MasterCode1";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "SElect T1.Code,IsNull(T2.YTarget, 0) as YT,IsNull(T3.YAchieve, 0) as YA,IsNull(T2.MTarget, 0) as MT,IsNull(T3.MAchieve, 0) as MA From(Select A.Code From Master1 A Where A.Code = " + clsMain.MyInt(UserId) + ") T1 Left Join(SElect A.SalesCode, Sum(A.TargetVal) as YTarget, (Select TargetVal From ESSalesTarget Where SalesCode = A.SalesCode And TYear = " + clsMain.MyInt(FinYr) + " And TMonth = " + clsMain.MyInt(Mon) + ") as MTarget From ESSalesTarget A Where A.SalesCode = " + clsMain.MyInt(UserId) + " And A.TYear = " + clsMain.MyInt(FinYr) + " Group By A.SalesCode) T2 On T1.Code = T2.SalesCode" + Environment.NewLine +
        //                                    " Left Join (Select T1.MasterCode1,IsNull(Sum(T2.Value1),0) * (-1) as YAchieve,IsNull((Select Sum(TM2.Value1) * (-1) as MAchievement From Tran1 TM1 Inner Join Tran2 TM2 On TM1.VchCode = TM2.VchCode And TM1.MasterCode1 = TM2.MasterCode1 Where TM1.VchType In (9,3) And Month(TM1.Date) = " + clsMain.MyInt(Mon) + " And TM2.RecType = 1 And TM1.MasterCode1 = T1.MasterCode1),0) as MAchieve From Tran1 T1 Inner Join Tran2 T2 On T1.VchCode = T2.VchCode And T1.MasterCode1 = T2.MasterCode1 Where T1.VchType In (9,3) And T2.RecType = 1 And T1.MasterCode1 = " + clsMain.MyInt(UserId) + " Group By T1.MasterCode1) T3 On T1.Code = T3.MasterCode1";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new TargetReport
        //                            {
        //                                MTarget = (double)dr["MT"],
        //                                YTarget = (double)dr["YT"],
        //                                MAchived = (double)dr["MA"],
        //                                YAchived = (double)dr["YA"],
        //                            });
        //                        }
        //                    }
        //                    return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }
        //            [HttpGet]
        //            public dynamic GetTargetMaster(int SCode, int Itype, string CompCode, string FY)
        //            {
        //                List<TargetMaster> objResult = new List<TargetMaster>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select iif(isnull(T1.Code),0,T1.Code) as Id,iif(isnull(T1.Name),'',T1.Name) as MasterName,iif(isnull(T1.Type),0,T1.Type) as MasterType,iif(isnull(T1.RangeType),0,T1.RangeType) as MasterRangeType,iif(ISNULL(T1.ApplyOn ),0,t1.ApplyOn) as MasterApplyOn From ESSFATargetMaster T1 Left Join ESSFAItemTarget T2 On T1.Code = T2.Code  Where T2.ICode = " + SCode + " and t1.Type = " + Itype + "";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select isnull(T1.Code,0) as Id,isnull(T1.Name,'') as MasterName,isnull(T1.Type,0) as MasterType,isnull(T1.RangeType,0) as MasterRangeType,ISNULL(T1.ApplyOn ,0) as MasterApplyOn From ESSFATargetMaster T1 Left Join ESSFAItemTarget T2 On T1.Code = T2.Code  Where T2.ICode = " + SCode + " and t1.Type = " + Itype + "";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new TargetMaster
        //                            {
        //                                Id = (int)dr["Id"],
        //                                Name = (string)dr["MasterName"],
        //                                MasterType = (int)dr["MasterType"],
        //                                MasterRangeType = (int)dr["MasterRangeType"],
        //                                MasterApplyOn = (int)dr["MasterApplyOn"],

        //                            });
        //                        }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }
        //            public int GetTargetType(int Code, int Itype, string Constr)
        //            {
        //                int Ttype = 0;
        //                try
        //                {
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Itype == 1)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select iif(isnull(Type),0,Type) as TType From ESSFATargetMaster where Code = " + Code + "";
        //                            dt = new OLEDBHELPER(Constr).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select isnull(Type,0) as TType From ESSFATargetMaster where Code = " + Code + "";
        //                            dt = new SQLHELPER(Constr).getTable(queryStr);
        //                        }

        //                    }
        //                    else if (Itype == 2)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select iif(isnull(RangeType),0,Type) as TType From ESSFATargetMaster where Code = " + Code + "";
        //                            dt = new OLEDBHELPER(Constr).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select isnull(RangeType,0) as TType From ESSFATargetMaster where Code = " + Code + "";
        //                            dt = new SQLHELPER(Constr).getTable(queryStr);
        //                        }
        //                    }
        //                    else if (Itype == 3)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select iif(isnull(ApplyOn),0,Type) as TType From ESSFATargetMaster where Code = " + Code + "";
        //                            dt = new OLEDBHELPER(Constr).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select isnull(ApplyOn,0) as TType From ESSFATargetMaster where Code = " + Code + "";
        //                            dt = new SQLHELPER(Constr).getTable(queryStr);
        //                        }
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        Ttype = clsMain.MyInt(dt.Rows[0]["TType"]);

        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return 0;
        //                }
        //                return Ttype;
        //            }
        //            [HttpGet]
        //            public dynamic GetSalesManMasterTarget(int SCode, int Code, string CompCode, string FY)
        //            {
        //                List<TargetMasterDetail> objResult = new List<TargetMasterDetail>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    string AccStr = "";
        //                    int TargetType = 0;
        //                    int RangeType = 0;
        //                    int ApplyOn = 0;
        //                    int Mon = 0;
        //                    string SDate = "";
        //                    string EDate = "";
        //                    double TargetAmt = 0;
        //                    string ICodeStr = "";
        //                    DataTable dt = new DataTable();
        //                    DataTable dt1 = new DataTable();
        //                    AccStr = GetSalesManWiseAccount(SCode, ConnectionString);
        //                    TargetType = GetTargetType(Code, 1, ConnectionString);
        //                    RangeType = GetTargetType(Code, 2, ConnectionString);
        //                    ApplyOn = GetTargetType(Code, 3, ConnectionString);
        //                    if (ApplyOn == 1) { ICodeStr = GetItemStr(Code, ConnectionString); }
        //                    if (ApplyOn == 2) { ICodeStr = GetAllItemStr(Code, ConnectionString); }

        //                    if (TargetType == 1)
        //                    {
        //                        if (RangeType == 2)
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                queryStr = "Select Sdate as FDate, EDate as TDate,iff(isnull(Amt),0,Amt) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {

        //                                //queryStr = "Select  CAST(Sdate as DATE) as FDate,CAST(Edate as DATE) as TDate,isnull(Amt,0) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                queryStr = "Select   [Sdate] as FDate,  Edate as TDate,isnull(Amt,0) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt != null && dt.Rows.Count > 0)
        //                            {
        //                                SDate = Convert.ToDateTime(dt.Rows[0]["FDate"]).ToString("dd/MMM/yyyy");
        //                                EDate = Convert.ToDateTime(dt.Rows[0]["TDate"]).ToString("dd/MMM/yyyy");
        //                                TargetAmt = clsMain.MyDouble(dt.Rows[0]["Amount"]);
        //                            }
        //                            if (Provider == 1)
        //                            {
        //                                if (ApplyOn == 3)
        //                                {
        //                                    queryStr = "Select iif(IsNull(round(Sum(T2.Value3),2)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.MasterCode1 in(" + AccStr + ") And T1.Date >= #" + SDate + "# and T1.Date <= #" + EDate + "#";
        //                                }
        //                                else if (ApplyOn == 2)
        //                                {
        //                                    queryStr = "Select iif(IsNull(round(Sum(T2.Value3),2)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And M1.Parentgrp in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And T1.Date >= #" + SDate + "# and T1.Date <= #" + EDate + "#";
        //                                }
        //                                else if (ApplyOn == 1)
        //                                {
        //                                    queryStr = "Select iif(IsNull(round(Sum(T2.Value3),2)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And t2.MasterCode2 in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And T1.Date >= #" + SDate + "# and T1.Date <= #" + EDate + "#";
        //                                }
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                                if (ApplyOn == 3)
        //                                {
        //                                    queryStr = "Select IsNull(round(Sum(T2.Value3),2),0) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.MasterCode1 in(" + AccStr + ") And T1.Date >= '" + SDate + "' and T1.Date <= '" + EDate + "'";
        //                                }
        //                                else if (ApplyOn == 2)
        //                                {
        //                                    queryStr = "Select IsNull(round(Sum(T2.Value3),2),0) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And M1.Parentgrp in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And T1.Date >= '" + SDate + "' and T1.Date <= '" + EDate + "'";
        //                                }
        //                                else if (ApplyOn == 1)
        //                                {
        //                                    queryStr = "Select IsNull(round(Sum(T2.Value3),2),0) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And t2.MasterCode2 in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And T1.Date >= '" + SDate + "' and T1.Date <= '" + EDate + "'";
        //                                }
        //                                dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt != null && dt.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow dr in dt.Rows)
        //                                {
        //                                    objResult.Add(new TargetMasterDetail
        //                                    {
        //                                        Month = 0,
        //                                        Target = TargetAmt,
        //                                        Achivement = (double)dr["Achievement"],
        //                                        Diffrence = (double)dr["Achievement"] - TargetAmt,
        //                                        Percent = ((double)dr["Achievement"] / TargetAmt) * 100,

        //                                    });
        //                                }
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                queryStr = "Select  iif(isnull(ICode),0,ICode) as Mon,iff(isnull(Amt),0,Amt) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                                queryStr = "Select  isnull(ICode,0) as Mon,isnull(Amt,0) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt1 != null && dt1.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow dr in dt1.Rows)
        //                                {
        //                                    Mon = (int)dr["Mon"];
        //                                    TargetAmt = (double)dr["Amount"];

        //                                    if (Provider == 1)
        //                                    {
        //                                        if (ApplyOn == 3)
        //                                        {
        //                                            queryStr = "Select iif(IsNull(round(Sum(T2.Value3),2)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.MasterCode1 in(" + AccStr + ") And Month(T1.Date) = " + clsMain.MyInt(Mon) + "";
        //                                        }
        //                                        else if (ApplyOn == 2)
        //                                        {
        //                                            queryStr = "Select iif(IsNull(round(Sum(T2.Value3),2)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And M1.Parentgrp in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And Month(T1.Date) = " + clsMain.MyInt(Mon) + "";
        //                                        }
        //                                        else if (ApplyOn == 1)
        //                                        {
        //                                            queryStr = "Select iif(IsNull(round(Sum(T2.Value3),2)),0,Sum(T2.Value3)) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And t2.MasterCode2 in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And Month(T1.Date) = " + clsMain.MyInt(Mon) + "";
        //                                        }
        //                                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                    }
        //                                    else
        //                                    {
        //                                        if (ApplyOn == 3)
        //                                        {
        //                                            queryStr = "Select IsNull(round(Sum(T2.Value3),2),0) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Where T1.VchType In (9,3) And T2.RecType In (2,7) And T1.MasterCode1 in(" + AccStr + ") And Month(T1.Date) = " + clsMain.MyInt(Mon) + "";
        //                                        }
        //                                        else if (ApplyOn == 2)
        //                                        {
        //                                            queryStr = "Select IsNull(round(Sum(T2.Value3),2),0) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And M1.Parentgrp in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And Month(T1.Date) = " + clsMain.MyInt(Mon) + "";
        //                                        }
        //                                        else if (ApplyOn == 1)
        //                                        {
        //                                            queryStr = "Select IsNull(round(Sum(T2.Value3),2),0) * (-1) as Achievement From Tran1 T1 Left Join Tran2 T2 On T1.VchCode = T2.VchCode Left Join Master1 m1 on T2.MasterCode2 = M1.Code Where T1.VchType In (9,3) And T2.RecType In (2,7) And t2.MasterCode2 in(" + ICodeStr + ") And T1.MasterCode1 in(" + AccStr + ") And Month(T1.Date) = " + clsMain.MyInt(Mon) + "";
        //                                        }
        //                                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                    }
        //                                    if (dt != null && dt.Rows.Count > 0)
        //                                    {
        //                                        foreach (DataRow dr1 in dt.Rows)
        //                                        {
        //                                            TargetMasterDetail TM = new TargetMasterDetail();

        //                                            TM.Month = Mon;
        //                                            TM.Target = TargetAmt;
        //                                            TM.Achivement = (double)dr1["Achievement"];
        //                                            TM.Diffrence = (double)dr1["Achievement"] - TargetAmt;
        //                                            TM.Percent = ((double)dr1["Achievement"] / TargetAmt) * 100;
        //                                            objResult.Add(TM);
        //                                        }
        //                                    }
        //                                }

        //                            }

        //                        }
        //                    }
        //                    else
        //                    {
        //                        if (RangeType == 2)
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                queryStr = "Select  Sdate as FDate, (EDate as TDate,iff(isnull(Amt),0,Amt) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                                queryStr = "Select   [Sdate] as FDate,  Edate as TDate,isnull(Amt,0) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt != null && dt.Rows.Count > 0)
        //                            {
        //                                SDate = Convert.ToDateTime(dt.Rows[0]["FDate"]).ToString("dd/MMM/yyyy");
        //                                EDate = Convert.ToDateTime(dt.Rows[0]["TDate"]).ToString("dd/MMM/yyyy");
        //                                TargetAmt = clsMain.MyDouble(dt.Rows[0]["Amount"]);
        //                            }
        //                            if (Provider == 1)
        //                            {
        //                                queryStr = "Select iif(IsNull(round(Sum(T2.Value1),2)),0,Sum(T2.Value1))  as Achievement From Tran2 T2 Where T2.VchType In (14) And T2.MasterCode1 in(" + AccStr + ") And T2.Date >= #" + SDate + "# and T2.Date <= #" + EDate + "# And t2.value1>0";
        //                                dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                                queryStr = "Select IsNull(round(Sum(T2.Value1),2),0) as Achievement From Tran2 T2  Where T2.VchType In (14) And T2.MasterCode1 in(" + AccStr + ") And T2.Date >= '" + SDate + "' and T2.Date <= '" + EDate + "' And t2.value1>0";
        //                                dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt != null && dt.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow dr in dt.Rows)
        //                                {
        //                                    objResult.Add(new TargetMasterDetail
        //                                    {
        //                                        Month = 0,
        //                                        Target = TargetAmt,
        //                                        Achivement = (double)dr["Achievement"],
        //                                        Diffrence = (double)dr["Achievement"] - TargetAmt,
        //                                        Percent = ((double)dr["Achievement"] / TargetAmt) * 100,

        //                                    });
        //                                }
        //                            }
        //                        }
        //                        else
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                queryStr = "Select  iif(isnull(ICode),0,ICode) as Mon,iff(isnull(Amt),0,Amt) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            else
        //                            {
        //                                queryStr = "Select  isnull(ICode,0) as Mon,isnull(Amt,0) as Amount From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 2";
        //                                dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                            }
        //                            if (dt1 != null && dt1.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow dr in dt1.Rows)
        //                                {
        //                                    Mon = (int)dr["Mon"];
        //                                    TargetAmt = (double)dr["Amount"];
        //                                    if (Provider == 1)
        //                                    {
        //                                        queryStr = "Select iif(IsNull(round(Sum(T2.Value1),2)),0,Sum(T2.Value1)) as Achievement From Tran2 T2  Where T2.VchType In (14) And T2.MasterCode1 in(" + AccStr + ") And Month(T2.Date) = " + clsMain.MyInt(Mon) + " And t2.value1>0";
        //                                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                                    }
        //                                    else
        //                                    {
        //                                        queryStr = "Select IsNull(round(Sum(T2.Value1),2),0)  as Achievement From Tran2 T2  Where T2.VchType In (14) And T2.MasterCode1 in(" + AccStr + ") And Month(T2.Date) = " + clsMain.MyInt(Mon) + " And t2.value1>0";
        //                                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                                    }
        //                                    if (dt != null && dt.Rows.Count > 0)
        //                                    {
        //                                        foreach (DataRow dr1 in dt.Rows)
        //                                        {
        //                                            TargetMasterDetail TM = new TargetMasterDetail();

        //                                            TM.Month = Mon;
        //                                            TM.Target = TargetAmt;
        //                                            TM.Achivement = (double)dr1["Achievement"];
        //                                            TM.Diffrence = (double)dr1["Achievement"] - TargetAmt;
        //                                            TM.Percent = ((double)dr1["Achievement"] / TargetAmt) * 100;
        //                                            objResult.Add(TM);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return objResult;
        //                }
        //                return objResult;
        //            }
        //            public string GetItemStr(int Code, string ConnectionString)
        //            {
        //                string ItemStr = "";

        //                try
        //                {
        //                    string sql = "";

        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    queryStr = "Select ICode From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 3";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (ItemStr.Length > 0)
        //                            {

        //                                ItemStr = ItemStr + "," + clsMain.MyString(Row["ICode"]);
        //                            }
        //                            else
        //                            {
        //                                ItemStr = clsMain.MyString(Row["ICode"]);

        //                            }
        //                            //if (IGStr.Length > 0) { IGStr = IGStr + "," + Convert.ToString(Row["Saleshead"]); } else { IGStr = Convert.ToString(Row["Saleshead"]); }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return ItemStr;
        //                }
        //                return ItemStr;
        //            }

        //            public string GetAllItemStr(int Code, string ConnectionString)
        //            {
        //                string IGStr = "";
        //                int iGCode = 0;
        //                try
        //                {
        //                    string sql = "";

        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    queryStr = "Select ICode From ESSFAItemTarget Where  Code = " + Code + " And Rectype = 3";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (IGStr.Length > 0)
        //                            {
        //                                iGCode = clsMain.MyInt(Row["ICode"]);
        //                                IGStr = IGStr + "," + GetAllItemSubGroups(iGCode, ConnectionString);
        //                            }
        //                            else
        //                            {
        //                                iGCode = clsMain.MyInt(Row["ICode"]);
        //                                IGStr = GetAllItemSubGroups(iGCode, ConnectionString);
        //                            }
        //                            //if (IGStr.Length > 0) { IGStr = IGStr + "," + Convert.ToString(Row["Saleshead"]); } else { IGStr = Convert.ToString(Row["Saleshead"]); }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return IGStr;
        //                }
        //                return IGStr;
        //            }

        //            [HttpGet]
        //            public dynamic RecommendedItem(int PartyId, int SCode, string CompCode, string FY)
        //            {
        //                List<RecItem> objResult = new List<RecItem>();
        //                try
        //                {
        //                    //SqlParameter[] Para = new SqlParameter[1];
        //                    //Para[0] = new SqlParameter("@SalesManId", clsMain.MyString(UserId));
        //                    ////Para[1] = new SqlParameter("@RType", clsMain.MyString(RType));
        //                    int Atype = 0;
        //                    string SalesStr = "";

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    DataTable dt1 = new DataTable();
        //                    Atype = GetchkAllMCType(SCode, ConnectionString);
        //                    if (Atype == 1)
        //                    {
        //                        if (Provider == 1)
        //                        {

        //                            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.Alias,A.MRP,A.PPrice,A.Price,A.AltPrice,A.PMRP,A.DiscPer,A.AltUnit,A.ConFactor,A.CFMode,A.MinPrice,A.Unit,A.Stock,A.MinQty,iif(ISNULL(PF),0,PF) as PF1 from (Select Top 10 M1.Code as ItemCode, M1.Name as ItemName,M1.Alias,m1.d2 as MRP,m1.D3 as Price,IsNull(m1.D16,0) as DiscPer,IsNull(M1.I9,1) as CFMode,isnull(M3.Name,'') as AltUnit,IsNull(m1.D1,1) as ConFactor,m1.D10 as MinPrice,isnull(m1.D21,0) as AltPrice,ISNULL(m1.I7,0) as ApplyPrice, IIF(IsNull(M2.Name), '', M2.Name) as Unit,((SElect IIF(IsNull(D1), 0, D1) From Folio1 Where MasterCode = M1.Code) + (Select IIF(IsNull(Sum(Value1)), 0, Sum(Value1)) as Qty From Tran2 Where MasterCode1 = M1.Code And RecType = 2 And[Date] <= Date())) as Stock,1 as MinQty,A.Qty,(iif(IsNull(MA.Address1), '', MA.Address1) + ' ' + iif(IsNull(MA.Address2), '', MA.Address2) + ' ' + iif(IsNull(MA.Address3), '', MA.Address3) + ' ' + iif(IsNull(MA.Address4), '', MA.Address4)) as Description,(Select Top 1 1 From ES_PartyFavourite Where PartyID = " + clsMain.MyInt(PartyId) + " And ProductID = M1.Code) as PF,(SElect Top 1 B.D1 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = " + clsMain.MyInt(PartyId) + " And B.MasterCode = m1.Code) as PPrice,(SElect Top 1 B.D3 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = 1 And B.MasterCode = m1.Code) as PMRP From(((((Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) And A.CM1 = " + clsMain.MyInt(PartyId) + " Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code) Left Join Master1 M2 On M1.CM1 = M2.Code) Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode) left join Master1 M3 on M1.Cm2 = M3.code) A Order By A.Qty Desc";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);

        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.Alias,A.MRP,A.PPrice,A.Price,A.AltPrice,A.PMRP,A.DiscPer,A.AltUnit,A.ConFactor,A.CFMode,A.MinPrice,A.Unit,A.Stock,A.MinQty,ISNULL(PF,0) as PF1 from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.Alias,m1.d2 as MRP,m1.D3 as Price,IsNull(m1.D16,0) as DiscPer,IsNull(M1.I9,1) as CFMode,isnull(M3.Name,'') as AltUnit,IsNull(m1.D1,1) as ConFactor,m1.D10 as MinPrice,isnull(m1.D21,0) as AltPrice,ISNULL(m1.I7,0) as ApplyPrice,IsNull(M2.Name,'') as Unit,IsNull((Select Sum(A.Qty) as Stock From(SElect D1 as Qty From Folio1 Where MasterCode = M1.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = M1.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,1 as MinQty,A.Qty,(IsNull(MA.Address1, '') + ' ' + IsNull(MA.Address2, '') + ' ' + IsNull(MA.Address3, '') + ' ' + IsNull(MA.Address4, '')) as Description,(Select Top 1 1 From ES_PartyFavourite Where PartyID = " + clsMain.MyInt(PartyId) + " And ProductID = M1.Code) as PF,IsNull((SElect Top 1 B.D1 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = " + clsMain.MyInt(PartyId) + " And B.MasterCode = m1.Code),0) as PPrice,IsNull((SElect Top 1 B.D3 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = " + clsMain.MyInt(PartyId) + " And B.MasterCode = m1.Code),0) as PMRP From(Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) And A.CM1 = " + clsMain.MyInt(PartyId) + " Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On M1.CM1 = M2.Code Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode left join Master1 M3 on M1.Cm2 = M3.code) A Order By A.Qty Desc";
        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                        if (Provider == 1)
        //                        {

        //                            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.MRP,A.Price,A.PMRP,A.PPrice,A.MinPrice,A.Unit,A.Stock,A.MinQty,iif(ISNULL(PF),0,PF) as PF1 from (Select Top 10 M1.Code as ItemCode, M1.Name as ItemName, M1.D2 as MRP, M1.D3 as Price, M1.D10 as MinPrice, IIF(IsNull(M2.Name), '', M2.Name) as Unit,((SElect IIF(IsNull(D1), 0, D1) From Tran4 Where MasterCode1 = M1.Code And MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)), 0, Sum(Value1)) as Qty From Tran2 Where MasterCode1 = M1.Code And MasterCode2 in (" + SalesStr + ") And RecType = 2 And[Date] <= Date())) as Stock,1 as MinQty,A.Qty,(iif(IsNull(MA.Address1), '', MA.Address1) + ' ' + iif(IsNull(MA.Address2), '', MA.Address2) + ' ' + iif(IsNull(MA.Address3), '', MA.Address3) + ' ' + iif(IsNull(MA.Address4), '', MA.Address4)) as Description,(Select Top 1 1 From ES_PartyFavourite Where PartyID = " + clsMain.MyInt(PartyId) + " And ProductID = M1.Code) as PF,(SElect Top 1 B.D1 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = " + clsMain.MyInt(PartyId) + " And B.MasterCode = m1.Code) as PPrice,(SElect Top 1 B.D3 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = 1 And B.MasterCode = m1.Code) as PMRP From((((Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) And A.CM1 = " + clsMain.MyInt(PartyId) + " Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code) Left Join Master1 M2 On M1.CM1 = M2.Code) Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode)) A Order By A.Qty Desc";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);

        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.Alias,A.MRP,A.PPrice,A.Price,A.AltPrice,A.PMRP,A.DiscPer,A.AltUnit,A.ConFactor,A.CFMode,A.MinPrice,A.Unit,A.Stock,A.MinQty,ISNULL(PF,0) as PF1 from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.Alias,m1.d2 as MRP,m1.D3 as Price,IsNull(m1.D16,0) as DiscPer,IsNull(M1.I9,1) as CFMode,isnull(M3.Name,'') as AltUnit,IsNull(m1.D1,1) as ConFactor,m1.D10 as MinPrice,isnull(m1.D21,0) as AltPrice,ISNULL(m1.I7,0) as ApplyPrice,IsNull(M2.Name,'') as Unit,IsNull((Select Sum(A.Qty) as Stock From(SElect D1 as Qty From Tran4 Where MasterCode1 = M1.Code And Mastercode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = M1.Code And MasterCode2 in (" + SalesStr + ") And RecType = 2 And Date <= getDate()) A),0) as Stock,1 as MinQty,A.Qty,(IsNull(MA.Address1, '') + ' ' + IsNull(MA.Address2, '') + ' ' + IsNull(MA.Address3, '') + ' ' + IsNull(MA.Address4, '')) as Description,(Select Top 1 1 From ES_PartyFavourite Where PartyID = " + clsMain.MyInt(PartyId) + " And ProductID = M1.Code) as PF,IsNull((SElect Top 1 B.D1 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = " + clsMain.MyInt(PartyId) + " And B.MasterCode = m1.Code),0) as PPrice,IsNull((SElect Top 1 B.D3 from Master1 A Inner Join MasterSupport B On(A.I3 + 100) = B.I1 Where A.Code = " + clsMain.MyInt(PartyId) + " And B.MasterCode = m1.Code),0) as PMRP From(Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) And A.CM1 = " + clsMain.MyInt(PartyId) + " Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On M1.CM1 = M2.Code Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode left join Master1 M3 on M1.Cm2 = M3.code) A Order By A.Qty Desc";
        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                    }

        //                    double PPrice = 0;
        //                    //double PMRP = 0;
        //                    //if (dt == null || dt.Rows.Count < 1)
        //                    //{
        //                    //    //string strQry1 = "Select A.ItemCode,A.ItemName,A.Description,A.MRP,A.Price,0 as PMRP,0 as PPrice,A.MinQty,0 as PF from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.D2 as MRP,M1.D3 as Price,1 as MinQty,A.Qty,(IsNull(MA.Address1,'') + ' ' + IsNull(MA.Address2,'') + ' ' + IsNull(MA.Address3,'') + ' ' + IsNull(MA.Address4,'')) as Description From (Select A.MasterCode1,Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2,7) Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode) A Order By A.Qty Desc";
        //                    //    if (Atype == 1)
        //                    //    {
        //                    //        if (Provider == 1)
        //                    //        {
        //                    //            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.MRP,A.Price,0 as PMRP,0 as PPrice,A.MinPrice,A.Unit,A.Stock,A.MinQty,0 as PF1 from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.D2 as MRP,M1.D3 as Price,M1.D10 as MinPrice,iif(IsNull(M2.Name),'',M2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = M1.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = M1.Code And RecType = 2 And [Date] <= Date())) as Stock,1 as MinQty,A.Qty,(iif(IsNull(MA.Address1), '',MA.Address1) + ' ' + iif(IsNull(MA.Address2), '',MA.Address2) + ' ' + iif(IsNull(MA.Address3), '',MA.Address3) + ' ' + iif(IsNull(MA.Address4), '',MA.Address4)) as Description From ((((Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code) Left Join Master1 M2 On M1.CM1 = M2.Code) Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode)) A Order By A.Qty Desc";
        //                    //            dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);

        //                    //        }
        //                    //        else
        //                    //        {
        //                    //            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.MRP,A.Price,0 as PMRP,0 as PPrice,A.MinPrice,A.Unit,A.Stock,A.MinQty,0 as PF1 from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.D2 as MRP,M1.D3 as Price,M1.D10 as MinPrice,IsNull(M2.Name,'') as Unit,IsNull((Select Sum(A.Qty) as Stock From(SElect D1 as Qty From Folio1 Where MasterCode = M1.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = M1.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,1 as MinQty,A.Qty,(IsNull(MA.Address1, '') + ' ' + IsNull(MA.Address2, '') + ' ' + IsNull(MA.Address3, '') + ' ' + IsNull(MA.Address4, '')) as Description From(Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On M1.CM1 = M2.Code Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode) A Order By A.Qty Desc";
        //                    //            dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    //        }
        //                    //    }
        //                    //    else
        //                    //    {
        //                    //        SalesStr = GetAllMCQueryStr(SCode, ConnectionString);
        //                    //        if (Provider == 1)
        //                    //        {
        //                    //            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.MRP,A.Price,0 as PMRP,0 as PPrice,A.MinPrice,A.Unit,A.Stock,A.MinQty,0 as PF1 from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.D2 as MRP,M1.D3 as Price,M1.D10 as MinPrice,iif(IsNull(M2.Name),'',M2.Name) as Unit,((SElect IIF(IsNull(D1),0,D1) From Tran4 Where MasterCode1 = M1.Code and MasterCode2 in(" + SalesStr + ")) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = M1.Code and Mastercode2 in(" + SalesStr + ") And RecType = 2 And [Date] <= Date())) as Stock,1 as MinQty,A.Qty,(iif(IsNull(MA.Address1), '',MA.Address1) + ' ' + iif(IsNull(MA.Address2), '',MA.Address2) + ' ' + iif(IsNull(MA.Address3), '',MA.Address3) + ' ' + iif(IsNull(MA.Address4), '',MA.Address4)) as Description From ((((Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code) Left Join Master1 M2 On M1.CM1 = M2.Code) Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode)) A Order By A.Qty Desc";
        //                    //            dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);

        //                    //        }
        //                    //        else
        //                    //        {
        //                    //            queryStr = "Select A.ItemCode,A.ItemName,A.Description,A.MRP,A.Price,0 as PMRP,0 as PPrice,A.MinPrice,A.Unit,A.Stock,A.MinQty,0 as PF1 from (Select Top 10 M1.Code as ItemCode,M1.Name as ItemName,M1.D2 as MRP,M1.D3 as Price,M1.D10 as MinPrice,IsNull(M2.Name,'') as Unit,IsNull((Select Sum(A.Qty) as Stock From(SElect D1 as Qty From Tran4 Where MasterCode = M1.Code and MasterCode2 in(" + SalesStr + ") Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = M1.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,1 as MinQty,A.Qty,(IsNull(MA.Address1, '') + ' ' + IsNull(MA.Address2, '') + ' ' + IsNull(MA.Address3, '') + ' ' + IsNull(MA.Address4, '')) as Description From(Select A.MasterCode1, Sum(A.Value1) * (-1) as Qty from Tran2 A Where A.VchType = 9 And A.RecType in (2, 7) Group By A.MasterCode1) A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On M1.CM1 = M2.Code Left Join MasterAddressInfo MA On M1.Code = MA.MasterCode) A Order By A.Qty Desc";
        //                    //            dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    //        }
        //                    //    }

        //                    //    //DataTable dt1 = new ESCommon.SQLHELPER(ConnectionString).getTable(strQry1);
        //                    //    if (dt1!= null && dt1.Rows.Count > 0)
        //                    //    {
        //                    //        RecItem pl = new RecItem();

        //                    //        foreach (DataRow item in dt1.Rows)
        //                    //        {
        //                    //            int itemCode = clsMain.MyInt(item["ItemCode"]);
        //                    //            bool itemFound = false;
        //                    //            for (int i = 0; i < objResult.Count; i++)
        //                    //            {
        //                    //                if (objResult[i].ProductCode == itemCode)
        //                    //                {
        //                    //                    itemFound = true;
        //                    //                    pl = objResult[i];
        //                    //                    break;
        //                    //                }
        //                    //            }
        //                    //            if (!itemFound)
        //                    //            {
        //                    //                pl = new RecItem();
        //                    //                pl.ProductCode = itemCode;
        //                    //                pl.ProductName = clsMain.MyString(item["ItemName"]);
        //                    //                pl.Name = clsMain.MyString(item["ItemName"]);
        //                    //                pl.Code = itemCode;
        //                    //                //pl.Price = clsMain.MyDouble(item["Price"]);
        //                    //                pl.Description = clsMain.MyString(item["Description"]);
        //                    //                pl.MinQty = clsMain.MyInt(item["MinQty"]);
        //                    //                pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                    //                pl.AltUnit = clsMain.MyString(item["AltUnit"]);
        //                    //                PPrice = clsMain.MyDouble(item["PPrice"]);
        //                    //                pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                    //                //PMRP = clsMain.MyDouble(item["PMRP"]);

        //                    //                if (PPrice > 0)
        //                    //                {
        //                    //                    pl.Price = clsMain.MyDouble(PPrice);
        //                    //                }
        //                    //                else
        //                    //                {
        //                    //                    pl.Price = clsMain.MyDouble(item["Price"]);
        //                    //                }
        //                    //                //if (PMRP > 0)
        //                    //                //{
        //                    //                //    pl.MRP = clsMain.MyDouble(PMRP);
        //                    //                //}
        //                    //                //else
        //                    //                //{
        //                    //                //    pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                    //                //}
        //                    //                pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //                    //                pl.Stock = clsMain.MyDouble(item["Stock"]);
        //                    //                pl.Unit = clsMain.MyString(item["Unit"]);
        //                    //                pl.CFMode = clsMain.MyInt(item["CFMode"]);
        //                    //                pl.Confactor = clsMain.MyDouble(item["Confactor"]);
        //                    //                pl.DiscPer = clsMain.MyDouble(item["DiscPer"]);
        //                    //                if (clsMain.MyInt(item["PF1"]) > 0)
        //                    //                {
        //                    //                    pl.Faourite = 1;
        //                    //                }
        //                    //                else
        //                    //                {
        //                    //                    pl.Faourite = 0;
        //                    //                }
        //                    //                string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["ItemName"]) + ".jpg";
        //                    //                pl.imgURL = url;
        //                    //                objResult.Add(pl);
        //                    //            }
        //                    //        }
        //                    //    }
        //                    //    return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };

        //                    //}
        //                    //else
        //                    {
        //                        RecItem pl = new RecItem();

        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            int itemCode = clsMain.MyInt(item["ItemCode"]);
        //                            bool itemFound = false;
        //                            for (int i = 0; i < objResult.Count; i++)
        //                            {
        //                                if (objResult[i].ProductCode == itemCode)
        //                                {
        //                                    itemFound = true;
        //                                    pl = objResult[i];
        //                                    break;
        //                                }
        //                            }
        //                            if (!itemFound)
        //                            {
        //                                pl = new RecItem();
        //                                pl.ProductCode = itemCode;
        //                                pl.ProductName = clsMain.MyString(item["ItemName"]);
        //                                pl.Name = clsMain.MyString(item["ItemName"]);
        //                                pl.Code = itemCode;
        //                                //pl.Price = clsMain.MyDouble(item["Price"]);
        //                                pl.Description = clsMain.MyString(item["Description"]);
        //                                pl.MinQTY = clsMain.MyString(item["MinQty"]);
        //                                pl.AltPrice = clsMain.MyDouble(item["AltPrice"]);
        //                                pl.AltUnit = clsMain.MyString(item["AltUnit"]);
        //                                pl.Confactor = clsMain.MyDouble(item["confactor"]);
        //                                pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                                pl.CFMode = clsMain.MyInt(item["CFMode"]);
        //                                PPrice = clsMain.MyDouble(item["PPrice"]);
        //                                pl.Alias = clsMain.MyString(item["Alias"]);
        //                                //PMRP = clsMain.MyDouble(item["PMRP"]);

        //                                if (PPrice > 0)
        //                                {
        //                                    pl.Price = clsMain.MyDouble(PPrice);
        //                                }
        //                                else
        //                                {
        //                                    pl.Price = clsMain.MyDouble(item["Price"]);
        //                                }

        //                                pl.MinPrice = clsMain.MyDouble(item["MinPrice"]);
        //                                pl.Stock = clsMain.MyDouble(item["Stock"]);
        //                                pl.Unit = clsMain.MyString(item["Unit"]);
        //                                //if (PMRP > 0)
        //                                //{
        //                                //    pl.MRP = clsMain.MyDouble(PMRP);
        //                                //}
        //                                //else
        //                                //{
        //                                //    pl.MRP = clsMain.MyDouble(item["MRP"]);
        //                                //}

        //                                if (clsMain.MyInt(item["PF1"]) > 0)
        //                                {
        //                                    pl.Faourite = 1;
        //                                }
        //                                else
        //                                {
        //                                    pl.Faourite = 0;
        //                                }

        //                                //string folderPath = HttpContext.Current.Server.MapPath("~/CatalogImages");
        //                                //var files = Directory.GetFiles(folderPath, clsMain.MyString(item["ItemName"]) + "*.*", SearchOption.AllDirectories);
        //                                //if (files.Length > 0)
        //                                //{
        //                                //    string url = clsMain.MyString(files[0]);
        //                                //    pl.imgURL = url;
        //                                //}
        //                                string url = clsMain.MyString(IMGFolder) + clsMain.MyString(item["ItemName"]) + ".jpg";
        //                                pl.imgURL = url;

        //                                objResult.Add(pl);
        //                            }
        //                        }
        //                    }
        //                    return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //                    //{
        //                    //    foreach (DataRow dr in dt.Rows)
        //                    //    {
        //                    //        objResult.Add(new RecItem
        //                    //        {
        //                    //            ProductName = (string)dr["ItemName"],
        //                    //            ProductCode = (int)dr["ItemCode"],
        //                    //            Price = (double)dr["Price"],
        //                    //            MinQty = (int)dr["MinQty"],
        //                    //            Description = (string)dr["ItemName"],
        //                    //        });
        //                    //    }
        //                    //}
        //                    //return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }

        //            public dynamic GetProductWisePrice(string ProductId, string CompCode, string FY)
        //            {
        //                List<ProductPrice> objResult = new List<ProductPrice>();
        //                List<MRPList> objResult1 = new List<MRPList>();
        //                // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                queryStr = "select D1 As Price,D3 as MRP,MasterCode as ProductCode from MasterSupport where I2=9 and I1 between 101 and 105 and  MasterCode=" + ProductId + " order by I1";
        //                //DataTable dt = obj.getTable(str);
        //                if (Provider == 1)
        //                {
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    ProductPrice pl = new ProductPrice();
        //                    pl = new ProductPrice();
        //                    pl.ProductCode = clsMain.MyInt(dt.Rows[0]["ProductCode"]);
        //                    pl.MRPList = new List<MRPList>();
        //                    foreach (DataRow item in dt.Rows)
        //                    {
        //                        MRPList im = new MRPList();
        //                        im.Price = clsMain.MyDouble(item["Price"]);
        //                        im.MRP = clsMain.MyDouble(item["MRP"]);
        //                        pl.MRPList.Add(im);
        //                    }
        //                    objResult.Add(pl);
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult.ToList() };
        //            }

        //            [HttpGet]
        //            public dynamic ClosingStockAlphabetical(string ItemCode, int Salescode, string CompCode, string FY)
        //            {
        //                List<Stock> lstStock = new List<Stock>();
        //                Stock stock = new Stock();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                int Atype = 0;
        //                string MCStr = "";
        //                Atype = GetchkAllMCType(Salescode, ConnectionString);
        //                if (Atype == 1)
        //                {
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select A.Code,A.Name,B.Name as UnitName,(Select Sum(STK) From (Select D1 as STK From Folio1 Where MasterCode = " + ItemCode + " Union All Select Sum(Value1) as STK From Tran2 Where MasterCode1 = " + ItemCode + " And RecType = 2) AS A) as CLStock from Master1 A Inner Join Master1 B On A.CM1 = B.Code Where A.Code = " + ItemCode + "";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select A.Code,A.Name,B.Name as UnitName,IsNull((Select Sum(STK) From (Select D1 as STK From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as STK From Tran2 Where MasterCode1 = A.Code And RecType = 2) A),0) as CLStock from Master1 A Inner Join Master1 B On A.CM1 = B.Code Where A.Code = " + ItemCode + "";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                }
        //                else
        //                {
        //                    MCStr = GetAllMCQueryStr(Salescode, ConnectionString);
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select A.Code,A.Name,B.Name as UnitName,(Select Sum(STK) From (Select D1 as STK From Tran4 Where MasterCode1 = " + ItemCode + " and MasterCode2 in(" + MCStr + ") Union All Select Sum(Value1) as STK From Tran2 Where MasterCode1 = " + ItemCode + " and MasterCode2 in(" + MCStr + ") And RecType = 2) AS A) as CLStock from Master1 A Inner Join Master1 B On A.CM1 = B.Code Where A.Code = " + ItemCode + "";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select A.Code,A.Name,B.Name as UnitName,IsNull((Select Sum(STK) From (Select D1 as STK From Tran4 Where MasterCode = A.Code  and MasterCode2 in(" + MCStr + ") Union All Select Sum(Value1) as STK From Tran2 Where MasterCode1 = A.Code and MasterCode2 in(" + MCStr + ") And RecType = 2) A),0) as CLStock from Master1 A Inner Join Master1 B On A.CM1 = B.Code Where A.Code = " + ItemCode + "";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                }

        //                //string strQry = "SELECT M.CODE as Code,M.MASTERTYPE,M.Name as Name,(Select Top 1 NameAlias from " + DbName + ".dbo.Help1 as H1 where H1.NameOrAlias = 1 and H1.Code = M.CM1) " + Environment.NewLine +
        //                // "as UnitName, (Select sum(D1) From  " + DbName + ".dbo.Tran4 Where MasterCode1=M.Code) as OpStock, " + Environment.NewLine +
        //                // "(Select sum(D3) From  " + DbName + ".dbo.Tran4 Where MasterCode1=M.Code) as OpAmt , " + Environment.NewLine +
        //                // "(Select sum(Value1) From " + DbName + ".dbo.Tran2 Where Rectype=2 And MasterCode1=M.Code And   Date<getdate() ) as OpTran," + Environment.NewLine +
        //                // "(Select sum(Value1) From " + DbName + ".dbo.Tran2 Where MasterCode1=M.Code And Value1> 0.00 And RecType=2 AND VCHTYPE <> 5 And cast( Date as date) = cast(getdate() as date)  ) as QtyIn ," + Environment.NewLine +
        //                // "(Select Sum(Value1) From " + DbName + ".dbo.Tran2 Where MasterCode1=M.Code And Value1< 0.00 And RecType=2 AND VCHTYPE <> 5 And cast( Date as date) = cast(getdate() as date)  ) as QtyOut , " + Environment.NewLine +
        //                // "M.D9 as SVP,M.I4 as SVM  " + Environment.NewLine +
        //                // "FROM  " + DbName + ".dbo.MASTER1 M  " + Environment.NewLine +
        //                // "WHERE (M.MASTERTYPE = 6 And M.B21=0) and (m.code = '" + ItemCode + "' or '" + ItemCode + "'= 0)" + Environment.NewLine +
        //                // "And ((M.Code in(Select Distinct MasterCode1 From " + DbName + ".dbo.Tran4) Or M.Code in (Select Distinct MasterCode1 From " + DbName + ".dbo.Tran2 " + Environment.NewLine +
        //                // " Where RecType=2 ))) ORDER BY M.Name";

        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                //DataTable dt = obj.getTable(strQry);
        //                foreach (DataRow Drr in dt.Rows)
        //                {
        //                    Stock st = new Stock();
        //                    st.Code = clsMain.MyString(Drr["Code"]);
        //                    st.ItemName = clsMain.MyString(Drr["Name"]);
        //                    st.UnitName = clsMain.MyString(Drr["UnitName"]);
        //                    st.CloseStock = clsMain.MyDouble(Drr["CLStock"]);
        //                    lstStock.Add(st);
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = lstStock };
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesManWiseParty(int SalesCode, string CompCode, string FY)
        //            {
        //                List<SalesParty> objResult = new List<SalesParty>();
        //                //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                string CurrentYear = DateTime.Now.Year.ToString();
        //                if (Provider == 1)
        //                {
        //                    queryStr = "Select Name,code,IIF(IsNull(ESBeat),0,ESBeat) as Beat from Master1 where MasterType = 2 And CM3 = " + SalesCode + " And ApprovalStatus In (0,1)";
        //                    dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                else
        //                {
        //                    queryStr = "Select Name,code,IsNull(ESBeat,0) as Beat from Master1 where MasterType = 2 And CM3 = " + SalesCode + " And ApprovalStatus In (0,1)";
        //                    dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                }
        //                if (dt != null && dt.Rows.Count > 0)
        //                {
        //                    foreach (DataRow dr in dt.Rows)
        //                    {
        //                        objResult.Add(new SalesParty
        //                        {
        //                            Code = (int)dr["Code"],
        //                            Name = (string)dr["Name"],
        //                            Beat = (int)dr["Beat"],
        //                            fromDate = "01/04/" + FinYr.ToString() + ""
        //                        });
        //                    }
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            //    public dynamic GetSaleSummary(string CompCode, string FY)
        //            //{

        //            //    int OrderId = 0;
        //            //    string sql = "";
        //            //    int R = 0;
        //            //    int VchCode = 0;
        //            //    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //            //    BusyVoucher.InvVoucher Inv = new BusyVoucher.InvVoucher();
        //            //    Inv.ItemEntries = new List<BusyVoucher.InvItemDetail>();
        //            //    Inv.BSEntries = new List<BusyVoucher.InvBSDetail>();
        //            //    try
        //            //    {
        //            //        DataTable dt = new DataTable(); 
        //            //        DataTable dt1 = new DataTable();

        //            //        string queryStr = "";

        //            //        queryStr = "Select A.VchCode,IsNull(M1.Name,'') as SeriesName,Convert(Varchar,A.[Date],103) as VchDate,LTrim(A.VchNo) as VchNo,IsNull(M2.Name,'') as PartyName,IsNull(V.Narration1,'') as Narration1,A.VchAmtBaseCur as NetAmount,Abs(Sum(B.D1)) as Qty,Sum(B.D5) as Amount From ((((Tran1 A Left Join Master1 M1 On A.VchSeriesCode = M1.Code)";
        //            //        queryStr = queryStr + " Left Join Master1 M2 On A.MasterCode1 = M2.Code) Left Join Tran2 B On A.VchCode = B.VchCode And B.RecType In (2,7)) Left Join VchOtherInfo V On A.VchCode = V.VchCode) Where A.Vchtype = 9  Group By A.VchCode,M1.Name,A.[Date],A.VchNo,IsNull(M2.Name, ''),A.VchAmtBaseCur,V.Narration1";
        //            //        if (Provider == 1)
        //            //        {
        //            //            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //            //        }
        //            //        else
        //            //        {
        //            //            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //            //        }
        //            //        if (dt != null && dt.Rows.Count > 0)
        //            //        {
        //            //            foreach (DataRow dt11 in dt.Rows)
        //            //            {
        //            //                BusyVoucher.InvVoucher a = new BusyVoucher.InvVoucher();
        //            //                Inv.VchSeriesName = clsMain.MyString(dt.Rows[0]["SeriesName"]).Substring(2);
        //            //                Inv.Date = clsMain.MyString(dt.Rows[0]["VchDate"]);
        //            //                Inv.VchNo = clsMain.MyString(dt.Rows[0]["VchNo"]);
        //            //                Inv.PartyName = clsMain.MyString(dt.Rows[0]["PartyName"]);
        //            //                Inv.TQty = clsMain.MyDouble(dt.Rows[0]["Qty"]);
        //            //                Inv.TAmount = clsMain.MyDouble(dt.Rows[0]["Amount"]);
        //            //                Inv.NetAmount = clsMain.MyDouble(dt.Rows[0]["NetAmount"]);
        //            //                Inv.Narration = clsMain.MyString(dt.Rows[0]["Narration1"]);
        //            //                VchCode = clsMain.MyInt(dt.Rows[0]["vCHCODE"]);
        //            //                    queryStr = "Select A.SrNo,IsNull(M1.Name,'') as ItemName,Abs(A.Value1) as MQty,IsNull(M2.Name,'') as UnitName,Abs(A.Value2) as AQty,A.D2,A.D5 from Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code Left Join Master1 M2 On A.CM2 = M2.Code Where A.VchCode = " + VchCode + " And A.RecType In (2,7) Order By A.SrNo";
        //            //                    if (Provider == 1)
        //            //                    {
        //            //                        dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //            //                    }
        //            //                    else
        //            //                    {
        //            //                        dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //            //                    }
        //            //                    if (dt1 != null && dt1.Rows.Count > 0)
        //            //                    {
        //            //                        foreach (DataRow dr1 in dt1.Rows)
        //            //                        {
        //            //                            Inv.ItemEntries.Add(new BusyVoucher.InvItemDetail()
        //            //                            {
        //            //                                SrNo = clsMain.MyInt(dr1["SrNo"]),
        //            //                                ItemName = clsMain.MyString(dr1["ItemName"]),
        //            //                                QtyMainUnit = clsMain.MyDouble(dr1["MQty"]),
        //            //                                QtyAltUnit = clsMain.MyDouble(dr1["AQty"]),
        //            //                                UnitName = clsMain.MyString(dr1["UnitName"]),
        //            //                                Price = clsMain.MyDouble(dr1["D2"]),
        //            //                                Amount = clsMain.MyDouble(dr1["D5"])
        //            //                            });
        //            //                        }
        //            //                    }

        //            //                    queryStr = "Select A.SrNo,IsNull(M1.Name,'') as BSName,Abs(A.Value1) as BSPer,Abs(A.Value3) as Amount from Tran2 A Left Join Master1 M1 On A.MasterCode1 = M1.Code Where A.VchCode = " + VchCode + " And A.RecType In (3) Order By A.SrNo";
        //            //                    if (Provider == 1)
        //            //                    {
        //            //                        dt1 = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //            //                    }
        //            //                    else
        //            //                    {
        //            //                        dt1 = new SQLHELPER(ConnectionString).getTable(queryStr);
        //            //                    }
        //            //                    if (dt1 != null && dt1.Rows.Count > 0)
        //            //                    {
        //            //                        foreach (DataRow dr1 in dt1.Rows)
        //            //                        {
        //            //                            Inv.BSEntries.Add(new BusyVoucher.InvBSDetail()
        //            //                            {
        //            //                                SrNo = clsMain.MyInt(dr1["SrNo"]),
        //            //                                BSName = clsMain.MyString(dr1["BSName"]),
        //            //                                BSPer = clsMain.MyDouble(dr1["BSPer"]),
        //            //                                Amount = clsMain.MyDouble(dr1["Amount"]),
        //            //                            });
        //            //                        }
        //            //                    }
        //            //            }
        //            //        }
        //            //    }
        //            //    catch (Exception EX)
        //            //    {
        //            //        return new { Status = 0, Msg = EX.Message.ToString(), Data = Inv };
        //            //    }
        //            //    return new { Status = 1, Msg = "Success", Data = Inv };
        //            //}


        //            [HttpGet]
        //            public dynamic GetSalesManOrderHistory(int SalesCode, string SDate, string EDate, string CompCode, string FY)
        //            {
        //                List<SalesOrderHistory> objResult = new List<SalesOrderHistory>();

        //                try
        //                {
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //string strQry = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select Format(A.OrderDate,'dd/MM/yyyy') as OrdDate,iif(IsNull(B.Name),'',B.Name) as PartyName,A.TotalAmount From ESOrderHeaderDetails A Inner Join Master1 B On A.PartyId = B.Code Where A.SalesManID = " + SalesCode + " And A.OrderDate >= #" + SDate + " 00:00:00# And A.OrderDate <= #" + EDate + " 23:59:59# Order By A.OrderDate";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        // DataTable dt = obj.getTable(strQry);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select Convert(VarChar,A.OrderDate,103) as OrdDate,IsNull(B.Name,'') as PartyName,A.TotalAmount From ESOrderHeaderDetails A Inner Join Master1 B On A.PartyId = B.Code Where A.SalesManID = " + SalesCode + " And A.OrderDate >= '" + SDate + " 00:00:00' And A.OrderDate <= '" + EDate + " 23:59:59' Order By A.OrderDate";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesOrderHistory
        //                            {
        //                                OrderDate = clsMain.MyString(dr["OrdDate"]),
        //                                PartyName = clsMain.MyString(dr["PartyName"]),
        //                                OrderAmount = clsMain.MyDouble(dr["TotalAmount"])
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesNewPartyHistory(int SalesCode, string SDate, string EDate, string CompCode, string FY)
        //            {
        //                List<SalesNewParty> objResult = new List<SalesNewParty>();

        //                try
        //                {
        //                    // SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string strQry = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select Format(A.CreationDate,'dd/MM/yyyy') as CDate,A.Name,A.MobileNo,A.Email,iif(Approved=1,'Approve' ,iif(Approved=2,'Rejected',iif(Approved <>1 or Approved <>2 ,'Pending'))) as Status From ESPartyDetails A Where A.SalesManID = " + SalesCode + " And A.CreationDate >= #" + SDate + " 00:00:00# And A.CreationDate <= #" + EDate + " 23:59:59# Order By A.CreationDate";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select Convert(VarChar,A.CreationDate,103) as CDate,A.Name,A.MobileNo,A.Email,(Select Case When IsNull(Approved,0) = 1 Then 'Approve' when IsNull(Approved,0) = 2 then 'Rejected' Else 'Pending' end) as Status From ESPartyDetails A Where A.SalesManID = " + SalesCode + " And A.CreationDate >= '" + SDate + " 00:00:00' And A.CreationDate <= '" + EDate + " 23:59:59' Order By A.CreationDate";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesNewParty
        //                            {
        //                                CDate = clsMain.MyString(dr["CDate"]),
        //                                PartyName = clsMain.MyString(dr["Name"]),
        //                                Mobile = clsMain.MyString(dr["MobileNo"]),
        //                                EMail = clsMain.MyString(dr["Email"]),
        //                                Status = clsMain.MyString(dr["Status"])
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }


        //            [HttpGet]
        //            public dynamic GetSalesmanVisitHistory(int SalesCode, string SDate, string EDate, string CompCode, string FY)
        //            {
        //                List<SalesmanVisit> objResult = new List<SalesmanVisit>();

        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //string strQry = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select Format(A.VisitDate,'dd/MM/yyyy') as VisitDate,A.AccName,A.Distance From ESPartyVisitLog A Where A.SalesmanCode = " + SalesCode + " And A.VisitDate >= #" + SDate + " 00:00:00# And A.VisitDate <= #" + EDate + " 23:59:59# Order By A.VisitDate";
        //                        //DataTable dt = obj.getTable(strQry);
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select Convert(VarChar,A.VisitDate,103) as VisitDate,A.AccName,A.Distance From ESPartyVisitLog A Where A.SalesmanCode = " + SalesCode + " And A.VisitDate >= '" + SDate + " 00:00:00' And A.VisitDate <= '" + EDate + " 23:59:59' Order By A.VisitDate";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesmanVisit
        //                            {
        //                                VisitDate = clsMain.MyString(dr["VisitDate"]),
        //                                PartyName = clsMain.MyString(dr["AccName"]),
        //                                Distance = clsMain.MyString(dr["Distance"]),
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesmanLocationTracking(int SalesCode, string SDate, string EDate, string CompCode, string FY)
        //            {
        //                List<SalesmanLocation> objResult = new List<SalesmanLocation>();

        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //string strQry = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {

        //                        queryStr = "Select iif(IsNull(Latitude),'',Latitude) as Latitude,iif(IsNull(Longitude),'',Longitude) as Longitude,Min(CreatedDate) as CDate From ESSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate >= #" + SDate + " 00:00:00# And CreatedDate <= #" + EDate + " 23:59:59# And iif(IsNull(Latitude),'0.0',Latitude) <> '0.0' Group By Latitude,Longitude Order By Min(CreatedDate)";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select IsNull(Latitude,'') as Latitude,IsNull(Longitude,'') as Longitude,Min(CreatedDate) as CDate From ESSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate >= '" + SDate + " 00:00:00' And CreatedDate <= '" + EDate + " 23:59:59' And IsNull(Latitude,'0.0') <> '0.0' Group By Latitude,Longitude Order By Min(CreatedDate)";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesmanLocation
        //                            {
        //                                Longitude = clsMain.MyString(dr["Longitude"]).Trim(),
        //                                Latitude = clsMain.MyString(dr["Latitude"]).Trim()
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesManHierarchy(int SalesCode, string CompCode, string FY)
        //            {
        //                List<SalesParty> objResult = new List<SalesParty>();

        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string strQry = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    int SType = GetSalesmanType(SalesCode, ConnectionString);
        //                    if (Provider == 1)
        //                    {
        //                        if (SType == 1)
        //                        {
        //                            strQry = "Select Code,Name From Master1 Where MasterType = 19 Order By Name";
        //                        }
        //                        else
        //                        {
        //                            string GrpStr = GetAllSubGroups1(SalesCode, ConnectionString);
        //                            strQry = "SElect M.Code,M.Name from Master1 M where M.Code in(" + GrpStr + ") and M.MasterType = 19 Order By M.Name";
        //                            //strQry = "With Grp as (Select SubSalemanCode From ESSalesManConfi Where SalesmanCode = " + SalesCode + " Union All Select A.SubSalemanCode From ESSalesManConfi A Inner Join Grp B On A.SalesmanCode = B.SubSaleManCode) Select A.Code,A.Name From Master1 A Where A.Code In ((Select SubSalemanCode as Code From Grp Group By SubSalemanCode Union All Select Code From Master1 Where Code = " + SalesCode + ")) Order By A.Name";
        //                        }
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    else
        //                    {
        //                        if (SType == 1)
        //                        {
        //                            strQry = "Select Code,Name From Master1 Where MasterType = 19 Order By Name";
        //                        }
        //                        else
        //                        {
        //                            strQry = "With Grp as (Select SubSalemanCode From ESSalesManConfi Where SalesmanCode = " + SalesCode + " Union All Select A.SubSalemanCode From ESSalesManConfi A Inner Join Grp B On A.SalesmanCode = B.SubSaleManCode) Select A.Code,A.Name From Master1 A Where A.Code In ((Select SubSalemanCode as Code From Grp Group By SubSalemanCode Union All Select Code From Master1 Where Code = " + SalesCode + ")) Order By A.Name";
        //                        }
        //                        dt = new SQLHELPER(ConnectionString).getTable(strQry);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesParty
        //                            {
        //                                Code = (int)dr["Code"],
        //                                Name = (string)dr["Name"]
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Failed", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            public string GetAllSubGroups1(int ParentGrp, string ConStr)
        //            {
        //                string GroupStr = Convert.ToString(ParentGrp);
        //                try
        //                {
        //                    GetAllChildQueryStr1(ParentGrp, ref GroupStr, ConStr);
        //                }
        //                catch
        //                {
        //                    return GroupStr;
        //                }
        //                return GroupStr;
        //            }


        //            public void GetAllChildQueryStr1(int ParentGrp, ref string GroupStr, string ConStr)
        //            {
        //                try
        //                {
        //                    string sql = "";
        //                    // sqlhelper Obj = new sqlhelper();
        //                    DataTable dt = new DataTable();
        //                    sql = "Select A.Code From ESSalesManConfi A Where A.SalesmanCode = " + ParentGrp + " Order By A.SalesmanCode";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (GroupStr.Length > 0) { GroupStr = GroupStr + "," + Convert.ToString(Row["SalesmanCode"]); } else { GroupStr = Convert.ToString(Row["SalesmanCode"]); }
        //                            GetAllChildQueryStr1(Convert.ToInt32(Row["SalesmanCode"]), ref GroupStr, ConStr);
        //                        }
        //                    }
        //                }
        //                catch
        //                {

        //                }
        //            }

        //            public string GetAllMCQueryStr(int SalesCode, string ConnectionString)
        //            {
        //                string MCStr = "";
        //                try
        //                {
        //                    string sql = "";
        //                    // sqlhelper Obj = new sqlhelper();
        //                    //string strQry = "";
        //                    //string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    queryStr = "Select A.Saleshead From ESSFASalesHeadConfig A Where A.SalesCode = " + SalesCode + " and Rectype = 3 Order By A.Saleshead";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (MCStr.Length > 0) { MCStr = MCStr + "," + Convert.ToString(Row["Saleshead"]); } else { MCStr = Convert.ToString(Row["Saleshead"]); }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return MCStr;
        //                }
        //                return MCStr;
        //            }
        //            public dynamic GetAllIGQueryStr123(int SalesCode, string CompCode, string FY)
        //            {
        //                string IGStr = "";

        //                int iGCode = 0;
        //                try
        //                {
        //                    string sql = "";
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    queryStr = "Select A.Saleshead From ESSFASalesHeadConfig A Where A.SalesCode = " + SalesCode + " and Rectype = 2 Order By A.Saleshead";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (IGStr.Length > 0)
        //                            {
        //                                iGCode = Convert.ToInt16(Row["Saleshead"]);
        //                                IGStr = IGStr + "," + GetAllItemSubGroups(iGCode, ConnectionString);
        //                            }
        //                            else
        //                            {

        //                                iGCode = Convert.ToInt32(Row["Saleshead"]);
        //                                IGStr = GetAllItemSubGroups(iGCode, ConnectionString);
        //                            }
        //                            //if (IGStr.Length > 0) { IGStr = IGStr + "," + Convert.ToString(Row["Saleshead"]); } else { IGStr = Convert.ToString(Row["Saleshead"]); }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return IGStr;
        //                }
        //                return IGStr;
        //            }
        //            public string GetAllIGQueryStr(int SalesCode, string ConnectionString)
        //            {
        //                string IGStr = "";
        //                int iGCode = 0;
        //                try
        //                {
        //                    string sql = "";

        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    queryStr = "Select A.Saleshead From ESSFASalesHeadConfig A Where A.SalesCode = " + SalesCode + " and Rectype = 2 Order By A.Saleshead";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        foreach (DataRow Row in dt.Rows)
        //                        {
        //                            if (IGStr.Length > 0)
        //                            {
        //                                iGCode = clsMain.MyInt(Row["Saleshead"]);
        //                                IGStr = IGStr + "," + GetAllItemSubGroups(iGCode, ConnectionString);
        //                            }
        //                            else
        //                            {
        //                                iGCode = clsMain.MyInt(Row["Saleshead"]);
        //                                IGStr = GetAllItemSubGroups(iGCode, ConnectionString);
        //                            }
        //                            //if (IGStr.Length > 0) { IGStr = IGStr + "," + Convert.ToString(Row["Saleshead"]); } else { IGStr = Convert.ToString(Row["Saleshead"]); }
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return IGStr;
        //                }
        //                return IGStr;
        //            }
        //            [HttpGet]
        //            public List<PartyBalanceDetails> PartyBalance(string MobileNo, string CompCode, string FY)
        //            {
        //                List<PartyBalanceDetails> objBal = new List<PartyBalanceDetails>();
        //                string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                string queryStr = "";
        //                DataTable dt = new DataTable();
        //                try
        //                {
        //                    //string FY = DateTime.Now.Year.ToString();
        //                    //string DbName = "Busy" + CompCode + "_db1" + FY;
        //                    MobileNo = MobileNo.Substring(3);
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "select SUM(t2.Value1) as balance, m1.Name from ((MasterAddressInfo mai " + Environment.NewLine +
        //                                   " left outer join Master1 m1 on mai.MasterCode=m1.Code) " + Environment.NewLine +
        //                                   " left outer join tran2 t2 on mai.MasterCode=t2.MasterCode1) " + Environment.NewLine +
        //                                   " where  mai.mobile='" + MobileNo + "' and m1.MasterType=2 and t2.RecType=1 " + Environment.NewLine +
        //                                   " group by m1.Name";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "select SUM(t2.Value1) balance, m1.Name from MasterAddressInfo mai " + Environment.NewLine +
        //                                        " left outer join Master1 m1 on mai.MasterCode=m1.Code " + Environment.NewLine +
        //                                        " left outer join tran2 t2 on mai.MasterCode=t2.MasterCode1 " + Environment.NewLine +
        //                                        " where  mai.mobile='" + MobileNo + "' and m1.MasterType=2 and t2.RecType=1 " + Environment.NewLine +
        //                                        " group by m1.Name";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            PartyBalanceDetails row = new PartyBalanceDetails();
        //                            int balnce = clsMain.MyInt(item["balance"]);
        //                            if (balnce >= 0)
        //                            {
        //                                row.PartyName = clsMain.MyString(item["Name"]);
        //                                row.Balance = clsMain.MyString(balnce.ToString("n2") + "Cr");
        //                            }
        //                            else
        //                            {
        //                                balnce = balnce * -1;
        //                                row.PartyName = clsMain.MyString(item["Name"]);
        //                                row.Balance = clsMain.MyString(balnce.ToString("n2")) + "Dr";
        //                            }
        //                            objBal.Add(row);
        //                        }
        //                    }
        //                    //return new { Sucess = 1, msg = "Sucess", Data = objBal };
        //                    return objBal;
        //                }
        //                catch
        //                {
        //                    //System.IO.File.WriteAllText(@"D:\txt1.txt", "PartyBalance:-" + ex.ToString());
        //                    //string strQry = "select -1 as Status";
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    //DataTable dt = obj.getTable(strQry);
        //                    //return dt;
        //                    return objBal;
        //                }
        //            }

        //            [HttpGet]
        //            public bool Validate()
        //            {
        //                return true;
        //            }
        //            [HttpPost]
        //            public List<Alert> CreateVisit(CraeteVisit obj, string CompCode, string FY)
        //            {
        //                List<Alert> objResult = new List<Alert>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    DataTable dt = new DataTable();

        //                    string sql = "";
        //                    int R = 0;

        //                    if (Provider == 1)
        //                    {
        //                        sql = "select Top 1 * from ESSalesManVisit where PartyCode=" + obj.PartyCode + " and SalesManId=" + obj.SalesManId + " and Format(ActionTime,'dd/MMM/yyyy') = Format(Date(),'dd/MMM/yyyy'))";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        sql = "select Top 1 * from ESSalesManVisit where PartyCode=" + obj.PartyCode + " and SalesManId=" + obj.SalesManId + " and CAST(Allotteddate as DATE) =CAST(GETDATE() as DATE))";
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        objResult = dt.AsEnumerable()
        //                        .Select(row => new Alert()
        //                        {
        //                            Message = "Already Assigned",
        //                            Sucess = 1,
        //                        }).ToList();
        //                    }
        //                    else
        //                    {
        //                        sql = "Insert Into ESSalesManVisit ([SalesManId],[PartyCode],[CreatedDate],[Beat],[Allotteddate],[Visited],[Revisit])";
        //                        if (Provider == 1)
        //                        {
        //                            sql = sql + " Values (" + clsMain.MyString(obj.SalesManId) + "," + clsMain.MyString(obj.PartyCode) + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + clsMain.MyString(obj.BeatId) + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,0,0)";
        //                            R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        else
        //                        {
        //                            sql = sql + " Values (" + clsMain.MyString(obj.SalesManId) + "," + clsMain.MyString(obj.PartyCode) + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#," + clsMain.MyString(obj.BeatId) + ",#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,0,0)";
        //                            R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                        }
        //                        if (R > 0)
        //                        {
        //                            objResult = dt.AsEnumerable()
        //                            .Select(row => new Alert()
        //                            {
        //                                Message = "AssignedSucessfully",
        //                                Sucess = 1,
        //                            }).ToList();
        //                        }
        //                        else
        //                        {
        //                            objResult = dt.AsEnumerable()
        //                            .Select(row => new Alert()
        //                            {
        //                                Message = "Failed",
        //                                Sucess = 0,
        //                            }).ToList();
        //                        }
        //                    }
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }
        //            [HttpGet]
        //            public dynamic GetSalesManPoints(int SalesCode, string CompCode, string FY)
        //            {
        //                List<SalesPoints> objResult = new List<SalesPoints>();
        //                try
        //                {
        //                    //SQLHELPER obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        queryStr = "Select iif(IsNull(Sum(Points)),0,Sum(Points)) as Points from ESPointDT where RecType = 2 AND AccCode = " + SalesCode + " And (PointApp = 0 Or PointApp Is Null)";
        //                        //DataTable dt = obj.getTable(strQry);
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select IsNull(Sum(Points),0) as Points from ESPointDT where RecType = 2 AND AccCode = " + SalesCode + " And (PointApp = 0 Or PointApp Is Null)";
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow dr in dt.Rows)
        //                        {
        //                            objResult.Add(new SalesPoints
        //                            {
        //                                Points = (double)dr["Points"],
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Sucess = 0, msg = "Fail", Data = objResult };
        //                }
        //                return new { Sucess = 1, msg = "Sucess", Data = objResult };
        //            }

        //            public bool CheckDBExist(string DBName, string CompCode, string ConnectionString)
        //            {
        //                bool DBExist = false;
        //                string sql = "";
        //                if (Provider == 1)
        //                {
        //                    string DBFilePath = BusyDataPath + "\\" + CompCode + "\\" + DBName;
        //                    if (File.Exists(DBFilePath) == true) { DBExist = true; }
        //                }
        //                else
        //                {
        //                    sql = "SELECT name FROM master.sys.databases WHERE name = '" + DBName.ToString() + "'";
        //                    DataTable dt = new DataTable();
        //                    dt = new ESCommon.SQLHELPER(ConnectionString).getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        DBExist = true;
        //                    }
        //                }
        //                return DBExist;
        //            }
        //            [HttpPost]
        //            public List<Alert> SalesManLocationTracking(Tracking obj, string CompCode, string FY)
        //            {
        //                List<Alert> objResult = new List<Alert>();
        //                try
        //                {
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string strQry = "";
        //                    int R = 0;

        //                    int Status = 0;
        //                    string Msg = "Failed";

        //                    DataTable dt = new DataTable();
        //                    {
        //                        strQry = "select Top 1 * from ESUserLogin where SalesManCode = " + obj.SalesManId + "";
        //                        if (Provider == 1)
        //                        {
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(strQry);
        //                        }
        //                        else
        //                        {
        //                            dt = new SQLHELPER(ConnectionString).getTable(strQry);
        //                        }
        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {
        //                            if (Provider == 1)
        //                            {
        //                                strQry = "Insert Into ESSalesManLocation ([SalesManId],[Address],[CreatedDate],[Latitude],[Longitude],[EType],[Distance]) Values(" + obj.SalesManId + ",'" + obj.Address.Replace("'", "''") + "',#" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "#,'" + obj.Latitude.Replace("'", "''") + "','" + obj.Longitude.Replace("'", "''") + "'," + obj.EType + "," + obj.Distance + ")";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(strQry);
        //                            }
        //                            else
        //                            {
        //                                strQry = "Insert Into ESSalesManLocation ([SalesManId],[Address],[CreatedDate],[Latitude],[Longitude],[EType],[Distance]) Values(" + obj.SalesManId + ",'" + obj.Address.Replace("'", "''") + "','" + DateTime.Now.ToString("dd/MMM/yyyy HH:mm") + "','" + obj.Latitude.Replace("'", "''") + "','" + obj.Longitude.Replace("'", "''") + "'," + obj.EType + "," + obj.Distance + ")";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(strQry);
        //                            }
        //                            if (R > 0)
        //                            {
        //                                Status = 1;
        //                                Msg = "Updated";
        //                            }
        //                        }
        //                        else
        //                        {
        //                            Status = 1;
        //                            Msg = "SalesMan Not Exist";
        //                        }
        //                    }
        //                    objResult = dt.AsEnumerable()
        //                                .Select(row => new Alert()
        //                                {
        //                                    Message = Msg,
        //                                    Sucess = Status,
        //                                }).ToList();
        //                    return objResult;
        //                }
        //                catch
        //                {
        //                    return objResult;
        //                }
        //            }



        //            [HttpGet]
        //            public dynamic GetWebLinks(string CompCode, string FY)
        //            {
        //                List<WebLink> ObjList = new List<WebLink>();
        //                try
        //                {
        //                    //SQLHELPER Obj = new SQLHELPER(ConnectionString);
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();

        //                    queryStr = "SElect Name,Link from ESWLConfig Order By SrNo";
        //                    // DataTable dt = Obj.getTable(sql);
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            ObjList.Add(new WebLink
        //                            {
        //                                Name = clsMain.MyString(item["Name"]),
        //                                Link = clsMain.MyString(item["Link"])
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }


        //            [HttpGet]
        //            public int GetRcptVoucherConfig(ref int CashAcc, ref int RSeries, string ConnectionString)
        //            {
        //                int BankAcc = 0;
        //                try
        //                {
        //                    //SQLHELPER Obj = new SQLHELPER(ConnectionString);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    string sql = "Select DebiAcc,CashAcc,RSeries From ESVchConfig";
        //                    // DataTable dt = Obj.getTable(sql);
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        BankAcc = clsMain.MyInt(dt.Rows[0]["DebiAcc"]);
        //                        CashAcc = clsMain.MyInt(dt.Rows[0]["CashAcc"]);
        //                        RSeries = clsMain.MyInt(dt.Rows[0]["RSeries"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return BankAcc;
        //                }
        //                return BankAcc;
        //            }
        //            [HttpGet]
        //            public dynamic CheckAutoCamera(string CompCode, string FY)
        //            {
        //                List<AutoCamera> ObjList = new List<AutoCamera>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    string sql = "Select RG,MEBA,CheckinDist,AutoCamera,OtherDet,Scheme From ESVchConfig";

        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ObjList.Add(new AutoCamera
        //                        {
        //                            CameraOnOff = clsMain.MyInt(dt.Rows[0]["AutoCamera"]),
        //                            CheckinDist = clsMain.MyDouble(dt.Rows[0]["CheckinDist"]),
        //                            OtherDet = clsMain.MyInt(dt.Rows[0]["OtherDet"]),
        //                            Scheme = clsMain.MyInt(dt.Rows[0]["Scheme"]),
        //                            RG = clsMain.MyInt(dt.Rows[0]["RG"]),
        //                            MEBA = clsMain.MyInt(dt.Rows[0]["MEBA"])

        //                        });

        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }
        //            [HttpGet]
        //            public dynamic GetCateWiseGrp(string CompCode, string FY, int Itype)
        //            {
        //                List<GroupList> ObjList = new List<GroupList>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Provider == 1)
        //                    {
        //                        string sql = "select if(isnull(C1.GCode),0,C1.GCode) as GCode,iif(ISNULL(M1.Name),'',M1.Name) as Name from ESSFACateMappingConfig C1 Left join Master1 M1 on C1.GCode = M1.Code Where C1.cateCode = " + Itype + "";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        string sql = "select isnull(C1.GCode,0) as GCode,ISNULL(M1.Name,'') as Name from ESSFACateMappingConfig C1 Left join Master1 M1 on C1.GCode = M1.Code Where C1.cateCode = " + Itype + "";
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ObjList.Add(new GroupList
        //                        {
        //                            Code = clsMain.MyInt(dt.Rows[0]["GCode"]),
        //                            Name = clsMain.MyString(dt.Rows[0]["Name"]),


        //                        });

        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }
        //            public string GetOFDeta(string ConnectionString, int Ttype, ref string OF2, ref string OF3, ref string OF4, ref string OF5)
        //            {
        //                string OFStr = "";
        //                int OF = 0;
        //                try
        //                {
        //                    string sql = "";

        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Ttype == 1)
        //                    {
        //                        queryStr = "Select OF1 as OP,OF2 as OP1,OF3 as OP2,OF4 as OP3,OF5 as OP4 From ESSFAOFComConfig";
        //                    }
        //                    else
        //                    {
        //                        queryStr = "Select OF6 as OP,OF7 as OP1,OF8 as OP2,OF9 as OP3,OF10 as OP4 From ESSFAOFComConfig";
        //                    }
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {

        //                        OFStr = "OF" + clsMain.MyInt(dt.Rows[0]["OP"]);
        //                        OF2 = "OF" + clsMain.MyInt(dt.Rows[0]["OP1"]);
        //                        OF3 = "OF" + clsMain.MyInt(dt.Rows[0]["OP2"]);
        //                        OF4 = "OF" + clsMain.MyInt(dt.Rows[0]["OP3"]);
        //                        OF5 = "OF" + clsMain.MyInt(dt.Rows[0]["OP4"]);
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return OFStr;
        //                }
        //                return OFStr;
        //            }
        //            public string GetOFData(string ConnectionString, ref int MType, int Ttype)
        //            {
        //                string OFStr = "";
        //                int OF = 0;
        //                try
        //                {
        //                    string sql = "";

        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    if (Ttype == 1)
        //                    {
        //                        queryStr = "Select OF1 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 2)
        //                    {
        //                        queryStr = "Select OF2 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 3)
        //                    {
        //                        queryStr = "Select OF3 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 4)
        //                    {
        //                        queryStr = "Select OF4 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 5)
        //                    {
        //                        queryStr = "Select OF5 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 6)
        //                    {
        //                        queryStr = "Select OF6 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 7)
        //                    {
        //                        queryStr = "Select OF10 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 8)
        //                    {
        //                        queryStr = "Select OF7 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 9)
        //                    {
        //                        queryStr = "Select OF9 as OPF From ESSFAOFComConfig";
        //                    }
        //                    else if (Ttype == 10)
        //                    {
        //                        queryStr = "Select OF8 as OPF From ESSFAOFComConfig";
        //                    }

        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }

        //                    if ((dt != null) && (dt.Rows.Count > 0))
        //                    {
        //                        OF = clsMain.MyInt(dt.Rows[0]["OPF"]);
        //                        OFStr = "OF" + clsMain.MyInt(dt.Rows[0]["OPF"]);
        //                        if (OF == 1) { MType = 201; } else if (OF == 2) { MType = 202; } else if (OF == 3) { MType = 203; } else if (OF == 4) { MType = 204; } else if (OF == 5) { MType = 205; } else if (OF == 6) { MType = 206; } else if (OF == 7) { MType = 207; } else if (OF == 8) { MType = 208; } else if (OF == 9) { MType = 209; } else if (OF == 10) { MType = 210; }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return OFStr;
        //                }
        //                return OFStr;
        //            }
        //            [HttpGet]
        //            public dynamic GetGroupWiseOF(string CompCode, string FY, int GCode, int Itype)
        //            {
        //                List<GroupList> ObjList = new List<GroupList>();
        //                try
        //                {
        //                    string OFName = "";
        //                    int MType = 0;
        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    OFName = GetOFData(ConnectionString, ref MType, Itype);
        //                    if (OFName.Length != 0)
        //                    {
        //                        if (Provider == 1)
        //                        {
        //                            queryStr = "Select Distinct " + OFName + " as OPF ,M3.Name From Master1 M1 Left Join MasterAddressInfo MAI On M1.Code = MAI.MasterCode Left join Master1 M3 on MAI." + OFName + "= M3.Code where M1.MasterType = 6 And Len(" + OFName + ") > 0 And M1.ParentGrp  = " + GCode + "";
        //                            dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                        }
        //                        else
        //                        {
        //                            queryStr = "Select Distinct " + OFName + " as OPF,M3.Name From Master1 M1 Left Join MasterAddressInfo MAI On M1.Code = MAI.MasterCode Left join Master1 M3 on MAI." + OFName + "= M3.Code where M1.MasterType = 6 And Len(" + OFName + ") > 0 And M1.ParentGrp  = " + GCode + "";
        //                            dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                        }

        //                        if (dt != null && dt.Rows.Count > 0)
        //                        {

        //                            foreach (DataRow item in dt.Rows)
        //                            {
        //                                GroupList ObjList1 = new GroupList();
        //                                ObjList1.Code = clsMain.MyInt(item["OPF"]);
        //                                ObjList1.Name = clsMain.MyString(item["Name"]);
        //                                ObjList.Add(ObjList1);
        //                            }

        //                        }
        //                    }
        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }
        //            [HttpGet]
        //            public int GetSalesmanWiseRcptVoucherConfig(ref int CashAcc, ref int RSeries, string ConnectionString, int SCode)
        //            {
        //                int BankAcc = 0;
        //                try
        //                {
        //                    //SQLHELPER Obj = new SQLHELPER(ConnectionString);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    string sql = "Select RSeries,CashAcc,bankAcc from ESuserLogin where SalesmanCode=" + SCode + " and AutoReceipt = 1";
        //                    // DataTable dt = Obj.getTable(sql);
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        BankAcc = clsMain.MyInt(dt.Rows[0]["bankAcc"]);
        //                        CashAcc = clsMain.MyInt(dt.Rows[0]["CashAcc"]);
        //                        RSeries = clsMain.MyInt(dt.Rows[0]["RSeries"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return BankAcc;
        //                }
        //                return BankAcc;
        //            }

        //            [HttpGet]
        //            public int GetRcptVoucherSeriesConfig(ref int CashAcc1, string ConnectionString, int SeriesCode)
        //            {
        //                int BankAcc = 0;
        //                try
        //                {
        //                    //SQLHELPER Obj = new SQLHELPER(ConnectionString);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    string sql = "Select * from ESSFAVchSubconfig where Rectype = 1 And RSeries = " + SeriesCode + "";
        //                    // DataTable dt = Obj.getTable(sql);
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        BankAcc = clsMain.MyInt(dt.Rows[0]["DBank"]);
        //                        CashAcc1 = clsMain.MyInt(dt.Rows[0]["DCash"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return BankAcc;
        //                }
        //                return BankAcc;
        //            }
        //            public int GetSalesmanConfigAccount(int SalesmanCode, string ConnectionString)
        //            {
        //                int AccCode = 0;
        //                try
        //                {
        //                    //SQLHELPER Obj = new SQLHELPER(ConnectionString);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    queryStr = "Select AccCode From ESUserLogin Where SalesManCode = " + SalesmanCode + " And [TagAcc] = 1";
        //                    //DataTable dt = Obj.getTable(sql);
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        AccCode = clsMain.MyInt(dt.Rows[0]["AccCode"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return AccCode;
        //            }

        //            public int GetExpenseHeadAccount(string ExpHead, string ConnectionString)
        //            {
        //                int AccCode = 0;
        //                try
        //                {
        //                    //SQLHELPER Obj = new SQLHELPER(ConnectionString);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    queryStr = "Select MasterCode1 from ESExpenseVchConfig Where RecType = 2 And C1 = '" + ExpHead.Replace("'", "''") + "' And MasterCode1 > 0";
        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(queryStr);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        AccCode = clsMain.MyInt(dt.Rows[0]["MasterCode1"]);
        //                    }
        //                }
        //                catch
        //                {
        //                    return 0;
        //                }
        //                return AccCode;
        //            }

        //            public void AutoCreateBusyNewReferance(int VchCode, string PartyName, string ConStr, int VchType)
        //            {
        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();

        //                    int AccCode = BVch.GetMasterNameToCode(Provider, ConStr, PartyName, 2);

        //                    BillByBill billBybill = BVch.IfBillByBillApplicableInAccMast(Provider, ConStr, AccCode);

        //                    if (clsMain.MyBool(billBybill.BillByBillApplicable) == true)
        //                    {
        //                        ReferenceDT refDT = BVch.GetVchNewRefDet(Provider, ConStr, VchCode, AccCode);

        //                        if (refDT.RefNo.Length > 0 && refDT.RefCode > 0 && refDT.Amount != 0)
        //                        {
        //                            DateTime DueDate = Convert.ToDateTime(refDT.VchDT).AddDays(clsMain.MyDouble(billBybill.CreditDays));

        //                            int R = 0;

        //                            string sql = "Insert Into Tran3 ([RefCode],[RecType],[Method],[VchCode],[VchType],[MasterCode1],[MasterCode2],[RefGrp],[SrNo],[Date],[DueDate],[No],[Status],[Type],[BrokerCode],[Value1],[Value2],[Value3],[Balance1],[Balance2],[Balance3],[ItemSrNo],[MfgDate],[TranType],[CM1],[CM2],[CM3],[ApprovalStatus],[NewRefAmount],[Narration],[BranchCode],[NewRefVchType],[NewRefVchCode])";
        //                            if (Provider == 1)
        //                            {
        //                                sql = sql + " Values (" + refDT.RefCode + ",1,1," + VchCode + "," + VchType + "," + AccCode + ",0,0,1,#" + Convert.ToDateTime(refDT.VchDT).ToString("dd/MMM/yyyy") + "#,#" + Convert.ToDateTime(DueDate).ToString("dd/MMM/yyyy") + "#,'" + refDT.RefNo.PadLeft(25) + "',1,1,0," + refDT.Amount + ",0,0,0,0,0,0,#" + Convert.ToDateTime(refDT.VchDT).ToString("dd/MMM/yyyy") + "#,0,0,0,0,0," + refDT.Amount + ",'',0,0,0)";
        //                                R = new OLEDBHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                            else
        //                            {
        //                                sql = sql + " Values (" + refDT.RefCode + ",1,1," + VchCode + "," + VchType + "," + AccCode + ",0,0,1,'" + Convert.ToDateTime(refDT.VchDT).ToString("dd/MMM/yyyy") + "','" + Convert.ToDateTime(DueDate).ToString("dd/MMM/yyyy") + "','" + refDT.RefNo.PadLeft(25) + "',1,1,0," + refDT.Amount + ",0,0,0,0,0,0,'" + Convert.ToDateTime(refDT.VchDT).ToString("dd/MMM/yyyy") + "',0,0,0,0,0," + refDT.Amount + ",'',0,0,0)";
        //                                R = new SQLHELPER(ConnectionString).ExecuteSQL(sql);
        //                            }
        //                        }
        //                    }
        //                }
        //                catch (Exception EX)
        //                {
        //                    return;
        //                }
        //            }

        //            [HttpGet]
        //            public dynamic GetSalesmanLocationTrackingDet(int SalesCode, string SDate, string EDate)
        //            {
        //                List<STracking> ObjList = new List<STracking>();
        //                try
        //                {
        //                    SQLHELPER Obj = new SQLHELPER(ConnectionString);

        //                    string sql = "SElect A.DT,IsNull(Convert(VarChar, B.SDate,108),'') as STime,IsNull((Select Top 1 [Address] From EsSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate = B.SDate And EType = 1),'') as SAddress,IsNull(Convert(VarChar, C.EDate,108),'') as ETime,IsNull((Select Top 1 [Address] From EsSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate = C.EDate And EType = 2),'') as EAddress From (Select Convert(Varchar,CreatedDate,103) As DT,Cast(CreatedDate as Date) as DTVal from EsSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate >= '" + SDate + " 00:00:00' And CreatedDate <= '" + EDate + " 23:59:59' And EType In (1,2) Group By Convert(Varchar,CreatedDate,103),Cast(CreatedDate as Date)) A Left Join (Select Convert(Varchar,CreatedDate,103) As DT,Min(CreatedDate) as SDate from EsSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate >= '" + SDate + " 00:00:00' And CreatedDate <= '" + EDate + " 23:59:59' And EType In (1) Group By Convert(Varchar,CreatedDate,103)) B On A.DT = B.DT Left Join (Select Convert(Varchar,CreatedDate,103) As DT,Max(CreatedDate) as EDate from EsSalesManLocation Where SalesManId = " + SalesCode + " And CreatedDate >= '" + SDate + " 00:00:00' And CreatedDate <= '" + EDate + " 23:59:59' And EType In (2) Group By Convert(Varchar,CreatedDate,103)) C On A.DT = C.DT Order By A.DTVal";
        //                    DataTable dt = Obj.getTable(sql);
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow item in dt.Rows)
        //                        {
        //                            ObjList.Add(new STracking
        //                            {
        //                                Date = clsMain.MyString(item["DT"]),
        //                                STime = clsMain.MyString(item["STime"]),
        //                                SAddress = clsMain.MyString(item["SAddress"]),
        //                                ETime = clsMain.MyString(item["ETime"]),
        //                                EAddress = clsMain.MyString(item["EAddress"]),
        //                            });
        //                        }
        //                    }
        //                }
        //                catch
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }

        //            public string GetOrderXML(string SalesManId, string Salesman, string PartyId, int SeriesCode, int STPTCode, int MCCode, List<addcart> Obj, List<BSDDetailCart> obj1, string Transport, string Station, string Narration, ref double InvAmount, string ConnectionString)
        //            {
        //                string XMLStr = "";
        //                try
        //                {
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    BusyVoucher.SaleOrder ORD = new BusyVoucher.SaleOrder();
        //                    double TaxableAmount = 0;

        //                    ORD.VchSeriesName = BVch.GetMasterCodeToName(Provider, ConnectionString, SeriesCode).Replace("12", "");
        //                    ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                    ORD.VchNo = "";
        //                    ORD.VchType = 12;
        //                    ORD.StockUpdationDate = ORD.Date;
        //                    ORD.STPTName = BVch.GetMasterCodeToName(Provider, ConnectionString, STPTCode);
        //                    ORD.MasterName1 = BVch.GetMasterCodeToName(Provider, ConnectionString, clsMain.MyInt(PartyId));
        //                    ORD.MasterName2 = BVch.GetMasterCodeToName(Provider, ConnectionString, MCCode);
        //                    if (Salesman.Length > 0)
        //                    {
        //                        ORD.BrokerInvolved = true;
        //                        ORD.BrokerName = Salesman;
        //                    }
        //                    ORD.TranCurName = "";
        //                    ORD.TmpVchCode = 0;
        //                    ORD.TmpVchSeriesCode = SeriesCode;

        //                    BusyVoucher.STPTData stptdata = BVch.GetSTPTData(Provider, ConnectionString, ORD.STPTName, 13);

        //                    ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
        //                    ORD.BillSundries = new List<BusyVoucher.BSDetail>();
        //                    ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();

        //                    ORD.VchOtherInfoDetails.Narration1 = clsMain.MyString(Narration);
        //                    ORD.VchOtherInfoDetails.Transport = clsMain.MyString(Transport);
        //                    ORD.VchOtherInfoDetails.Station = clsMain.MyString(Station);

        //                    int SrNo = 0;
        //                    foreach (var item in Obj)
        //                    {
        //                        BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
        //                        SrNo = SrNo + 1;
        //                        ID.SrNo = SrNo;
        //                        ID.VchType = ORD.VchType;
        //                        ID.Date = ORD.Date;
        //                        ID.VchNo = ORD.VchNo;
        //                        ID.ItemName = BVch.GetMasterCodeToName(Provider, ConnectionString, clsMain.MyInt(item.ProductId));

        //                        ID.ConFactor = clsMain.MyDouble(item.Confactor);

        //                        if (item.BillingUnit == 1)
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ProductId), 1);
        //                            ID.Qty = clsMain.MyDouble(item.MinQty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.MinQty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                            ID.ListPrice = clsMain.MyDouble(item.SalePrice);
        //                        }
        //                        else
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ProductId), 2);
        //                            ID.Qty = clsMain.MyDouble(item.AltQty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.MinQty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                            ID.ListPrice = clsMain.MyDouble(item.SalePrice);
        //                        }

        //                        //ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ProductId), 1);
        //                        //ID.Qty = clsMain.MyDouble(item.MinQty);
        //                        //ID.QtyMainUnit = clsMain.MyDouble(ID.Qty);
        //                        //ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                        //ID.ListPrice = clsMain.MyDouble(item.SalePrice);
        //                        if (ID.ListPrice <= 0) { ID.ListPrice = clsMain.MyDouble(item.Price); }
        //                        ID.Amt = clsMain.MyDouble(ID.ListPrice * ID.Qty);
        //                        ID.DiscountPercent = 0;
        //                        if (item.Disc.Length > 0) { ID.DiscountPercent = clsMain.MyDouble(item.Disc); };
        //                        ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                        ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                        ID.Price = clsMain.MyDouble(item.Price);
        //                        ID.PriceAltUnit = 0;
        //                        if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
        //                        ID.STPercent = 0;
        //                        ID.STPercent1 = 0;
        //                        ID.STAmount = 0;
        //                        if (stptdata.MultiTax == true)
        //                        {
        //                            BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, clsMain.MyInt(item.ProductId));
        //                            if (stptdata.GSTType == 1)
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(0);
        //                            }
        //                            else
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
        //                            }
        //                            if (stptdata.TaxType == true)
        //                            {
        //                                TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
        //                            }
        //                            else
        //                            {
        //                                TaxableAmount = ID.Amt;
        //                            }
        //                            ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
        //                            ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
        //                            if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
        //                        }
        //                        InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);

        //                        ID.TmpVchCode = 0;
        //                        ID.MC = ORD.MasterName2;
        //                        ID.AF = item.Remarks;
        //                        ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                        ID.ItemDescInfo.Description1 = item.Description1;
        //                        ID.ItemDescInfo.Description2 = item.Description2;
        //                        ID.ItemDescInfo.Description3 = item.Description3;
        //                        ID.ItemDescInfo.Description4 = item.Description4;
        //                        ID.ItemDescInfo.tmpSrNo = SrNo;
        //                        ID.ItemSerialNoEntries = new List<BusyVoucher.ItemSerialNoDetail>();
        //                        ORD.ItemEntries.Add(ID);
        //                    }
        //                    SrNo = 0;

        //                    foreach (var BS in obj1)
        //                    {
        //                        SrNo = SrNo + 1;
        //                        BusyVoucher.BSDetail BSDet = new BusyVoucher.BSDetail();
        //                        BSDet.BSName = BS.BSName;
        //                        BSDet.SrNo = SrNo;
        //                        BSDet.tmpBSCode = BS.BSCode;
        //                        BSDet.PercentVal = BS.BSPer;
        //                        BSDet.PercentOperatedOn = BS.PercentOperatedOn;
        //                        BSDet.Amt = BS.Amount;
        //                        ORD.BillSundries.Add(BSDet);


        //                    }

        //                    XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }

        //                return XMLStr;
        //            }
        //            public string GetInvSaleQuoXML(int VchType, VchInvoice Inv, ref double InvAmount, string ConnectionString)
        //            {
        //                string XMLStr = "";
        //                double TaxableAmount = 0;
        //                int CompoundDiscount = 0;

        //                try
        //                {
        //                    double Disc1 = 0;
        //                    double Disc2 = 0;
        //                    CompoundDiscount = GetCompoundDiscountStatus(ConnectionString);
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    BusyVoucher.STPTData stptdata = BVch.GetSTPTData(Provider, ConnectionString, Inv.StPtName, 13);
        //                    int MCCode = BVch.GetMasterNameToCode(Provider, ConnectionString, Inv.MCName, 11);

        //                    BusyVoucher.SaleQuotation ORD = new BusyVoucher.SaleQuotation();
        //                    ORD.VchSeriesName = Inv.SeriesName; //BVch.GetMasterCodeToName(ConnStr, SeriesCode).Replace("12", "");
        //                    ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                    ORD.VchNo = "";
        //                    ORD.VchType = VchType;
        //                    ORD.StockUpdationDate = ORD.Date;
        //                    ORD.STPTName = Inv.StPtName; //BVch.GetMasterCodeToName(ConnStr,Inv.StPtCode,pCmpCode,pFY);
        //                    ORD.MasterName1 = Inv.AccName; //BVch.GetMasterCodeToName(ConnStr, clsMain.MyInt(PartyId));
        //                    ORD.MasterName2 = Inv.MCName; //BVch.GetMasterCodeToName(ConnStr, MCCode);
        //                    if (Inv.Salesman.Length > 0)
        //                    {
        //                        ORD.BrokerInvolved = true;
        //                        ORD.BrokerName = Inv.Salesman;
        //                    }
        //                    ORD.TranCurName = "";
        //                    ORD.TmpVchCode = 0;
        //                    ORD.TmpVchSeriesCode = Inv.SeriesCode;

        //                    ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
        //                    ORD.BillSundries = new List<BusyVoucher.BSDetail>();
        //                    ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();

        //                    ORD.VchOtherInfoDetails.Narration1 = clsMain.MyString(Inv.Remarks);
        //                    ORD.VchOtherInfoDetails.Transport = clsMain.MyString(Inv.Transport);
        //                    ORD.VchOtherInfoDetails.Station = clsMain.MyString(Inv.Station);

        //                    int SrNo = 0;
        //                    int ISSrNo = 0;
        //                    foreach (var item in Inv.ItemDT)
        //                    {
        //                        BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
        //                        SrNo = SrNo + 1;
        //                        ID.SrNo = SrNo;
        //                        ID.VchType = ORD.VchType;
        //                        ID.Date = ORD.Date;
        //                        ID.VchNo = ORD.VchNo;
        //                        ID.ItemName = item.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));

        //                        ID.ConFactor = 1;
        //                        if (item.BillingUnit == 1)
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 1);
        //                            ID.Qty = clsMain.MyDouble(item.Qty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                        }
        //                        else
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 2);
        //                            ID.Qty = clsMain.MyDouble(item.AltQty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                        }
        //                        ID.ConFactor = clsMain.MyDouble(item.ConFactor);
        //                        ID.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                        ID.Amt = clsMain.MyDouble(ID.ListPrice * ID.Qty);
        //                        if (CompoundDiscount == 1)
        //                        {
        //                            ID.CompoundDiscount = clsMain.MyDouble(item.DiscPerent) + "+" + clsMain.MyDouble(item.AddDiscount);// "10+5";
        //                            Disc1 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.DiscPerent)) / 100).ToString("0.00"));
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - Disc1);
        //                            Disc2 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.AddDiscount)) / 100).ToString("0.00"));
        //                            ID.Discount = Disc1 + Disc2;
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - Disc2);
        //                        }
        //                        else
        //                        {
        //                            ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
        //                            ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                        }
        //                        //ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
        //                        //ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                        //ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                        ID.Price = clsMain.MyDouble(item.Price);
        //                        ID.PriceAltUnit = 0;
        //                        if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
        //                        ID.STPercent = 0;
        //                        ID.STPercent1 = 0;
        //                        ID.STAmount = 0;
        //                        if (stptdata.MultiTax == true)
        //                        {
        //                            BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, item.ItemCode);
        //                            if (stptdata.GSTType == 1)
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(0);
        //                            }
        //                            else
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
        //                            }
        //                            if (stptdata.TaxType == true)
        //                            {
        //                                TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
        //                            }
        //                            else
        //                            {
        //                                TaxableAmount = ID.Amt;
        //                            }
        //                            ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
        //                            ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
        //                            if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
        //                        }
        //                        InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);
        //                        ID.TmpVchCode = 0;
        //                        ID.MC = ORD.MasterName2;
        //                        ID.AF = item.IRemarks;
        //                        ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                        ID.ItemDescInfo.Description1 = item.IDescription1;
        //                        ID.ItemDescInfo.Description2 = item.IDescription2;
        //                        ID.ItemDescInfo.Description3 = item.IDescription3;
        //                        ID.ItemDescInfo.Description4 = item.IDescription4;
        //                        ID.ItemDescInfo.tmpSrNo = SrNo;
        //                        ID.ItemSerialNoEntries = new List<BusyVoucher.ItemSerialNoDetail>();
        //                        ISSrNo = 0;
        //                        foreach (var SerialItem in item.ItemSerailDT)
        //                        {
        //                            ISSrNo = ISSrNo + 1;
        //                            BusyVoucher.ItemSerialNoDetail serialNoDetail = new BusyVoucher.ItemSerialNoDetail();
        //                            serialNoDetail.ItemCode = item.ItemCode;
        //                            serialNoDetail.MCCode = MCCode;
        //                            serialNoDetail.VchItemSN = ID.SrNo;
        //                            serialNoDetail.GridSN = ISSrNo;
        //                            serialNoDetail.SerialNo = SerialItem.SerailNo;
        //                            serialNoDetail.MainQty = -1;
        //                            serialNoDetail.AltQty = -1;
        //                            serialNoDetail.MainUnitPrice = ID.Price;
        //                            serialNoDetail.AltUnitPrice = ID.Price;
        //                            ID.ItemSerialNoEntries.Add(serialNoDetail);
        //                        }
        //                        ORD.ItemEntries.Add(ID);
        //                    }
        //                    SrNo = 0;

        //                    foreach (var BS in Inv.BSDetail)
        //                    {
        //                        SrNo = SrNo + 1;
        //                        BusyVoucher.BSDetail BSDet = new BusyVoucher.BSDetail();
        //                        BSDet.BSName = BS.BSName;
        //                        BSDet.SrNo = SrNo;
        //                        BSDet.tmpBSCode = BS.BSCode;
        //                        BSDet.PercentVal = BS.BSPer;
        //                        BSDet.PercentOperatedOn = BS.PercentOperatedOn;
        //                        BSDet.Amt = BS.Amount;
        //                        ORD.BillSundries.Add(BSDet);


        //                    }
        //                    XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return XMLStr;
        //            }

        //            public string GetInvOrderXML(int VchType, VchInvoice Inv, ref double InvAmount, string ConnectionString)
        //            {
        //                string XMLStr = "";
        //                double TaxableAmount = 0;
        //                int CompoundDiscount = 0;
        //                try
        //                {
        //                    int SN = 0;
        //                    double Disc1 = 0;
        //                    double Disc2 = 0;
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    BusyVoucher.STPTData stptdata = BVch.GetSTPTData(Provider, ConnectionString, Inv.StPtName, 13);
        //                    int MCCode = BVch.GetMasterNameToCode(Provider, ConnectionString, Inv.MCName, 11);
        //                    CompoundDiscount = GetCompoundDiscountStatus(ConnectionString);
        //                    BusyVoucher.SaleOrder ORD = new BusyVoucher.SaleOrder();
        //                    ORD.VchSeriesName = Inv.SeriesName; //BVch.GetMasterCodeToName(ConnStr, SeriesCode).Replace("12", "");
        //                    ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                    ORD.VchNo = "";
        //                    ORD.VchType = VchType;
        //                    ORD.StockUpdationDate = ORD.Date;
        //                    ORD.STPTName = Inv.StPtName; //BVch.GetMasterCodeToName(ConnStr,Inv.StPtCode,pCmpCode,pFY);
        //                    ORD.MasterName1 = Inv.AccName; //BVch.GetMasterCodeToName(ConnStr, clsMain.MyInt(PartyId));
        //                    ORD.MasterName2 = Inv.MCName; //BVch.GetMasterCodeToName(ConnStr, MCCode);
        //                    if (Inv.Salesman.Length > 0)
        //                    {
        //                        ORD.BrokerInvolved = true;
        //                        ORD.BrokerName = Inv.Salesman;
        //                    }
        //                    ORD.TranCurName = "";
        //                    ORD.TmpVchCode = 0;
        //                    ORD.TmpVchSeriesCode = Inv.SeriesCode;

        //                    ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
        //                    ORD.BillSundries = new List<BusyVoucher.BSDetail>();
        //                    ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();

        //                    ORD.VchOtherInfoDetails.Narration1 = clsMain.MyString(Inv.Remarks);
        //                    ORD.VchOtherInfoDetails.Transport = clsMain.MyString(Inv.Transport);
        //                    ORD.VchOtherInfoDetails.Station = clsMain.MyString(Inv.Station);

        //                    int SrNo = 0;
        //                    int ISSrNo = 0;
        //                    BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
        //                    foreach (var item in Inv.ItemDT)
        //                    {
        //                        ID = new BusyVoucher.ItemDetail();
        //                        SrNo = SrNo + 1;
        //                        SN = SrNo;
        //                        ID.SrNo = SrNo;
        //                        ID.VchType = ORD.VchType;
        //                        ID.Date = ORD.Date;
        //                        ID.VchNo = ORD.VchNo;
        //                        ID.ItemName = item.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));
        //                        ID.ConFactor = 1;
        //                        if (item.BillingUnit == 1)
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 1);
        //                            ID.Qty = clsMain.MyDouble(item.Qty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                            ID.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                        }
        //                        else
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 2);
        //                            ID.Qty = clsMain.MyDouble(item.AltQty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                            ID.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                        }
        //                        ID.ConFactor = clsMain.MyDouble(item.ConFactor);

        //                        ID.Amt = clsMain.MyDouble(item.ListPrice * ID.Qty);
        //                        if (CompoundDiscount == 1)
        //                        {
        //                            ID.CompoundDiscount = clsMain.MyDouble(item.DiscPerent) + "+" + clsMain.MyDouble(item.AddDiscount);// "10+5";
        //                            Disc1 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.DiscPerent)) / 100).ToString("0.00"));
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - Disc1);
        //                            Disc2 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.AddDiscount)) / 100).ToString("0.00"));
        //                            ID.Discount = Disc1 + Disc2;
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - Disc2);
        //                        }
        //                        else
        //                        {
        //                            ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
        //                            ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                        }
        //                        if (item.SchemeCode > 0)
        //                        {
        //                            ID.SchemeName = BVch.GetMasterCodeToName(Provider, ConnectionString, item.SchemeCode);
        //                            ID.SchemeType = item.SchemeType;
        //                            ID.SchemeParentRowNo = 0;
        //                        }
        //                        ID.Price = clsMain.MyDouble(item.Price);
        //                        ID.PriceAltUnit = 0;
        //                        if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
        //                        ID.STPercent = 0;
        //                        ID.STPercent1 = 0;
        //                        ID.STAmount = 0;
        //                        if (stptdata.MultiTax == true)
        //                        {
        //                            BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, item.ItemCode);
        //                            if (stptdata.GSTType == 1)
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(0);
        //                            }
        //                            else
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
        //                            }
        //                            if (stptdata.TaxType == true)
        //                            {
        //                                TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
        //                            }
        //                            else
        //                            {
        //                                TaxableAmount = ID.Amt;
        //                            }
        //                            ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
        //                            ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
        //                            if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
        //                        }
        //                        InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);
        //                        ID.TmpVchCode = 0;
        //                        ID.MC = ORD.MasterName2;
        //                        ID.AF = item.IRemarks;
        //                        ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                        ID.ItemDescInfo.Description1 = item.IDescription1;
        //                        ID.ItemDescInfo.Description2 = item.IDescription2;
        //                        ID.ItemDescInfo.Description3 = item.IDescription3;
        //                        ID.ItemDescInfo.Description4 = item.IDescription4;
        //                        ID.ItemDescInfo.tmpSrNo = SrNo;
        //                        ID.ItemSerialNoEntries = new List<BusyVoucher.ItemSerialNoDetail>();
        //                        ISSrNo = 0;
        //                        foreach (var SerialItem in item.ItemSerailDT)
        //                        {
        //                            ISSrNo = ISSrNo + 1;
        //                            BusyVoucher.ItemSerialNoDetail serialNoDetail = new BusyVoucher.ItemSerialNoDetail();
        //                            serialNoDetail.ItemCode = item.ItemCode;
        //                            serialNoDetail.MCCode = MCCode;
        //                            serialNoDetail.VchItemSN = ID.SrNo;
        //                            serialNoDetail.GridSN = ISSrNo;
        //                            serialNoDetail.SerialNo = SerialItem.SerailNo;
        //                            serialNoDetail.MainQty = -1;
        //                            serialNoDetail.AltQty = -1;
        //                            serialNoDetail.MainUnitPrice = ID.Price;
        //                            serialNoDetail.AltUnitPrice = ID.Price;
        //                            ID.ItemSerialNoEntries.Add(serialNoDetail);
        //                        }
        //                        ORD.ItemEntries.Add(ID);
        //                        if (item.FItemCode > 0 || item.FreeQty > 0)
        //                        {
        //                            ID = new BusyVoucher.ItemDetail();
        //                            SrNo = SrNo + 1;
        //                            ID.SrNo = SrNo;
        //                            ID.VchType = ORD.VchType;
        //                            ID.Date = ORD.Date;
        //                            ID.VchNo = ORD.VchNo;
        //                            ID.ItemName = BVch.GetMasterCodeToName(Provider, ConnectionString, item.FItemCode);

        //                            ID.ConFactor = 1;
        //                            //if (item.BillingUnit == 1)
        //                            //{
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.FItemCode), 1);
        //                            ID.Qty = clsMain.MyDouble(item.FreeQty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.FreeQty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.FreeQty);
        //                            //}
        //                            //else
        //                            //{
        //                            //    ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.FItemCode), 2);
        //                            //    ID.Qty = clsMain.MyDouble(item.FreeQty);
        //                            //    ID.QtyMainUnit = clsMain.MyDouble(item.FreeQty);
        //                            //    ID.QtyAltUnit = clsMain.MyDouble(item.FreeQty);

        //                            //}
        //                            ID.ConFactor = clsMain.MyDouble(item.ConFactor);
        //                            ID.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                            ID.Amt = clsMain.MyDouble(ID.ListPrice * ID.Qty);
        //                            //if (CompoundDiscount == 1)
        //                            //{
        //                            //    ID.CompoundDiscount = clsMain.MyDouble(item.DiscPerent) + "+" + clsMain.MyDouble(item.AddDiscount);// "10+5";
        //                            //    Disc1 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.DiscPerent)) / 100).ToString("0.00"));
        //                            //    ID.Amt = clsMain.MyDouble(ID.Amt - Disc1);
        //                            //    Disc2 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.AddDiscount)) / 100).ToString("0.00"));
        //                            //    ID.Discount = Disc1 + Disc2;
        //                            //    ID.Amt = clsMain.MyDouble(ID.Amt - Disc2);
        //                            //}
        //                            //else
        //                            //{
        //                            ID.DiscountPercent = 0;
        //                            ID.Discount = 0;//clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                                            //ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                                            //}
        //                                            //ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
        //                                            //ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                                            //ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                            ID.Price = clsMain.MyDouble(item.Price);
        //                            ID.PriceAltUnit = 0;
        //                            if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
        //                            if (item.SchemeCode > 0)
        //                            {
        //                                ID.SchemeName = BVch.GetMasterCodeToName(Provider, ConnectionString, item.SchemeCode);
        //                                ID.SchemeType = item.SchemeType;
        //                                ID.SchemeParentRowNo = SN;
        //                            }
        //                            ID.STPercent = 0;
        //                            ID.STPercent1 = 0;
        //                            ID.STAmount = 0;
        //                            if (stptdata.MultiTax == true)
        //                            {
        //                                BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, item.FItemCode);
        //                                if (stptdata.GSTType == 1)
        //                                {
        //                                    ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
        //                                    ID.STPercent1 = clsMain.MyDouble(0);
        //                                }
        //                                else
        //                                {
        //                                    ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
        //                                    ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
        //                                }
        //                                if (stptdata.TaxType == true)
        //                                {
        //                                    TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
        //                                }
        //                                else
        //                                {
        //                                    TaxableAmount = ID.Amt;
        //                                }
        //                                ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
        //                                ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
        //                                if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
        //                            }
        //                            ORD.ItemEntries.Add(ID);
        //                        }
        //                    }
        //                    SrNo = 0;

        //                    foreach (var BS in Inv.BSDetail)
        //                    {
        //                        SrNo = SrNo + 1;
        //                        BusyVoucher.BSDetail BSDet = new BusyVoucher.BSDetail();
        //                        BSDet.BSName = BS.BSName;
        //                        BSDet.SrNo = SrNo;
        //                        BSDet.tmpBSCode = BS.BSCode;
        //                        BSDet.PercentVal = BS.BSPer;
        //                        BSDet.PercentOperatedOn = BS.PercentOperatedOn;
        //                        BSDet.Amt = BS.Amount;
        //                        ORD.BillSundries.Add(BSDet);


        //                    }
        //                    XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }
        //                return XMLStr;
        //            }

        //            public string GetReceiptVoucherXML(int VchType, VchReceipt Inv, string ConStr)
        //            {
        //                string XMLStr = "";

        //                try
        //                {
        //                    int SrNo = 0;
        //                    int RefSrNo = 0;
        //                    int BankAcc = 0;
        //                    int RSeries = 0;
        //                    int CashAcc = 0;
        //                    int CashAcc2 = 0;
        //                    int CashAcc1 = 0;
        //                    int BankAcc1 = 0;
        //                    int BankAc = 0;
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    BusyVoucher.Receipt ORD = new BusyVoucher.Receipt();
        //                    if (Inv.SCode != 0)
        //                    {
        //                        BankAc = GetSalesmanWiseRcptVoucherConfig(ref CashAcc2, ref RSeries, ConStr, Inv.SCode);
        //                        if (BankAc == 0)
        //                        {
        //                            BankAc = GetRcptVoucherConfig(ref CashAcc, ref RSeries, ConStr);
        //                            //BankAcc1 = GetRcptVoucherSeriesConfig(ref CashAcc1, ConStr, Inv.SeriesCode);
        //                            if (Inv.SeriesCode == 0)
        //                            {
        //                                BankAcc1 = GetRcptVoucherSeriesConfig(ref CashAcc1, ConStr, RSeries);
        //                            }
        //                            else
        //                            {
        //                                BankAcc1 = GetRcptVoucherSeriesConfig(ref CashAcc1, ConStr, Inv.SeriesCode);
        //                            }
        //                            if (BankAcc1 != 0) { BankAcc = BankAcc1; }
        //                            if (CashAcc1 != 0) { CashAcc = CashAcc1; }
        //                        }
        //                        else
        //                        {
        //                            BankAcc = BankAc;
        //                            CashAcc = CashAcc2;
        //                        }
        //                    }
        //                    else
        //                    {
        //                        BankAc = GetRcptVoucherConfig(ref CashAcc, ref RSeries, ConStr);
        //                        if (Inv.SeriesCode == 0)
        //                        {
        //                            BankAcc1 = GetRcptVoucherSeriesConfig(ref CashAcc1, ConStr, RSeries);
        //                        }
        //                        else
        //                        {
        //                            BankAcc1 = GetRcptVoucherSeriesConfig(ref CashAcc1, ConStr, Inv.SeriesCode);
        //                        }
        //                        if (BankAcc1 != 0) { BankAcc = BankAcc1; }
        //                        if (CashAcc1 != 0) { CashAcc = CashAcc1; }
        //                    }
        //                    if (Inv.SeriesCode == 0)
        //                    {
        //                        ORD.VchSeriesName = BVch.GetMasterCodeToName(Provider, ConStr, RSeries).Replace("14", "");
        //                        ORD.tmpVchSeriesCode = RSeries;
        //                    }
        //                    else
        //                    {
        //                        ORD.VchSeriesName = Inv.SeriesName;
        //                        ORD.tmpVchSeriesCode = Inv.SeriesCode;
        //                    }
        //                    ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                    ORD.VchNo = "";
        //                    ORD.VchType = VchType;
        //                    ORD.StockUpdationDate = ORD.Date;

        //                    ORD.TranCurName = "Rs.";
        //                    ORD.tmpVchCode = 0;

        //                    ORD.AccEntries = new List<BusyVoucher.AccDetail>();

        //                    ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();
        //                    ORD.TranType = 0;

        //                    if (Inv.PDC == 1)
        //                    {
        //                        ORD.TranType = 1;
        //                        ORD.PDCDate = Inv.PDCDate;
        //                    }

        //                    ORD.VchOtherInfoDetails.Narration1 = Inv.Remarks;
        //                    SrNo = 0;

        //                    SrNo = SrNo + 1;
        //                    BusyVoucher.AccDetail ID = new BusyVoucher.AccDetail();
        //                    ID.SrNo = SrNo;
        //                    ID.AccountName = Inv.PartyName;
        //                    ID.AmountType = 2;
        //                    ID.AmtMainCur = Inv.Amount;
        //                    ID.CashFlow = Inv.Amount;
        //                    ID.ShortNar = "";
        //                    ID.Date = ORD.Date;
        //                    if (Inv.Mode == 2)
        //                    {
        //                        ID.ShortNar = Inv.chequeNo + "|" + Inv.ChequeDt;
        //                    }
        //                    ID.VchType = ORD.VchType;
        //                    //ID.BillRefs = new List<BillDetails>();
        //                    //RefSrNo = 0;
        //                    //foreach (var item in Inv.BillByBill)
        //                    //{
        //                    //    RefSrNo = RefSrNo + 1;
        //                    //    BillDetails billRefs = new BillDetails();
        //                    //    billRefs.ItemSrNo = ID.SrNo;
        //                    //    billRefs.SrNo = RefSrNo;
        //                    //    billRefs.Method = 2;
        //                    //    billRefs.RefNo = item.RefNo;
        //                    //    billRefs.Date = ORD.Date;
        //                    //    billRefs.DueDate = item.DueDate;
        //                    //    billRefs.Value1 = item.Amount;
        //                    //    billRefs.tmpRefCode = item.RefCode;
        //                    //    billRefs.tmpMasterCode1 = BVch.GetMasterNameToCode(ConStr, ID.AccountName, 2);
        //                    //    ID.BillRefs.Add(billRefs);
        //                    //}
        //                    ORD.AccEntries.Add(ID);

        //                    SrNo = SrNo + 1;
        //                    ID = new BusyVoucher.AccDetail();
        //                    ID.SrNo = SrNo;
        //                    if (Inv.Mode == 1)
        //                    {
        //                        ID.AccountName = BVch.GetMasterCodeToName(Provider, ConStr, CashAcc);
        //                    }
        //                    if (Inv.Mode == 2)
        //                    {
        //                        ID.AccountName = BVch.GetMasterCodeToName(Provider, ConStr, BankAcc);
        //                    }
        //                    ID.AmountType = 1;
        //                    ID.AmtMainCur = Inv.Amount;
        //                    ID.CashFlow = Inv.Amount;

        //                    ID.Date = ORD.Date;
        //                    ID.ShortNar = "";
        //                    if (Inv.Mode == 2)
        //                    {
        //                        ID.ShortNar = Inv.chequeNo + "|" + Inv.ChequeDt;
        //                    }
        //                    ID.VchType = ORD.VchType;

        //                    ORD.AccEntries.Add(ID);

        //                    ORD.PendingBillDetails = new List<BillDetail>();
        //                    if (Inv.BillByBill.Count > 0)
        //                    {
        //                        RefSrNo = 0;
        //                        BillDetail billDT = new BillDetail();

        //                        billDT.MasterName1 = Inv.PartyName;
        //                        billDT.tmpMasterCode1 = BVch.GetMasterNameToCode(Provider, ConStr, Inv.PartyName, 2);
        //                        billDT.BillRefDT = new List<BillRefs>();
        //                        foreach (var item in Inv.BillByBill)
        //                        {
        //                            RefSrNo = RefSrNo + 1;
        //                            BillRefs billRefs = new BillRefs();
        //                            billRefs.ItemSrNo = 1;
        //                            billRefs.SrNo = RefSrNo;
        //                            billRefs.Method = 2;
        //                            billRefs.RefNo = item.RefNo;
        //                            billRefs.Date = ORD.Date;
        //                            billRefs.DueDate = item.DueDate;
        //                            billRefs.Value1 = item.Amount;
        //                            billRefs.tmpRefCode = item.RefCode;
        //                            billRefs.tmpRecType = 1;
        //                            billRefs.tmpMasterCode1 = billDT.tmpMasterCode1;
        //                            billDT.BillRefDT.Add(billRefs);
        //                        }
        //                        ORD.PendingBillDetails.Add(billDT);

        //                    }
        //                    XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "").Replace("<BillRefDT>", "").Replace("</BillRefDT>", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }

        //                return XMLStr;
        //            }


        //            public string GetExpenseVoucherXML(int VchType, ExpenseVch Inv, ExpVchConfigDT VConDT, string ConStr)
        //            {
        //                string XMLStr = "";
        //                try
        //                {
        //                    int SrNo = 0;

        //                    BusyVoucher BVch = new BusyVoucher();
        //                    BusyVoucher.Journal ORD = new BusyVoucher.Journal();

        //                    int SalesmanAcc = GetSalesmanConfigAccount(Inv.SalesmanCode, ConStr);

        //                    ORD.VchSeriesName = BVch.GetMasterCodeToName(Provider, ConStr, VConDT.SeriesCode).Replace("16", "");
        //                    ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                    ORD.VchNo = "";
        //                    ORD.VchType = VchType;
        //                    ORD.StockUpdationDate = ORD.Date;

        //                    ORD.TranCurName = "Rs.";
        //                    ORD.tmpVchCode = 0;
        //                    ORD.tmpVchSeriesCode = VConDT.SeriesCode;

        //                    ORD.AccEntries = new List<BusyVoucher.AccDetail>();

        //                    ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();
        //                    ORD.TranType = 0;

        //                    ORD.TranType = 0;
        //                    ORD.PDCDate = "";

        //                    ORD.VchOtherInfoDetails.Narration1 = "";//Inv.Remarks;
        //                    SrNo = 0;

        //                    SrNo = SrNo + 1;
        //                    BusyVoucher.AccDetail ID = new BusyVoucher.AccDetail();

        //                    ID.SrNo = SrNo;
        //                    ID.AccountName = BVch.GetMasterCodeToName(Provider, ConStr, SalesmanAcc);
        //                    ID.AmountType = 1;
        //                    ID.AmtMainCur = Inv.ExpAmount;
        //                    ID.CashFlow = Inv.ExpAmount;
        //                    ID.ShortNar = "";
        //                    ID.Date = ORD.Date;
        //                    ID.ShortNar = "";

        //                    ID.VchType = ORD.VchType;

        //                    ORD.AccEntries.Add(ID);

        //                    foreach (var item in Inv.Expenses)
        //                    {
        //                        SrNo = SrNo + 1;
        //                        ID = new BusyVoucher.AccDetail();
        //                        ID.SrNo = SrNo;
        //                        int AccCode = GetExpenseHeadAccount(item.ExpenseH, ConStr);
        //                        ID.AccountName = BVch.GetMasterCodeToName(Provider, ConStr, AccCode);//BVch.GetMasterCodeToName(ConStr, AccCode);

        //                        ID.AmountType = 2;
        //                        ID.AmtMainCur = item.Amount;
        //                        ID.CashFlow = item.Amount;

        //                        ID.Date = ORD.Date;
        //                        if (item.Description.Length > 40)
        //                        {
        //                            ID.ShortNar = item.Description.Substring(1, 40).Trim();
        //                        }
        //                        else
        //                        {
        //                            ID.ShortNar = item.Description;
        //                        }
        //                        ID.VchType = ORD.VchType;
        //                        ORD.AccEntries.Add(ID);
        //                    }


        //                    ////ORD.PendingBillDetails = new List<BillDetail>();
        //                    //if (Inv.BillByBill.Count > 0)
        //                    //{
        //                    //    RefSrNo = 0;
        //                    //    BillDetail billDT = new BillDetail();

        //                    //    billDT.MasterName1 = Inv.PartyName;
        //                    //    billDT.tmpMasterCode1 = BVch.GetMasterNameToCode(ConStr, Inv.PartyName, 2);
        //                    //    billDT.BillRefDT = new List<BillRefs>();
        //                    //    foreach (var item in Inv.BillByBill)
        //                    //    {
        //                    //        RefSrNo = RefSrNo + 1;
        //                    //        BillRefs billRefs = new BillRefs();
        //                    //        billRefs.ItemSrNo = 1;
        //                    //        billRefs.SrNo = RefSrNo;
        //                    //        billRefs.Method = 2;
        //                    //        billRefs.RefNo = item.RefNo;
        //                    //        billRefs.Date = ORD.Date;
        //                    //        billRefs.DueDate = item.DueDate;
        //                    //        billRefs.Value1 = item.Amount;
        //                    //        billRefs.tmpRefCode = item.RefCode;
        //                    //        billRefs.tmpRecType = 1;
        //                    //        billRefs.tmpMasterCode1 = billDT.tmpMasterCode1;
        //                    //        billDT.BillRefDT.Add(billRefs);
        //                    //    }
        //                    //    ORD.PendingBillDetails.Add(billDT);
        //                    //}
        //                    XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "").Replace("<BillRefDT>", "").Replace("</BillRefDT>", "");
        //                }
        //                catch (Exception EX)
        //                {
        //                    return "";
        //                }

        //                return XMLStr;
        //            }
        //            [HttpGet]
        //            public dynamic ValidateItem(string CompCode, string FY, int GCode, int IType, int Param1, int Param2, int Param3, int Param4, int Param5)
        //            {

        //                List<RItem> ObjList = new List<RItem>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    string OFName = "";
        //                    string OF2 = "";
        //                    string OF3 = "";
        //                    string OF4 = "";
        //                    string OF5 = "";
        //                    string sql = "";
        //                    DataTable dt = new DataTable();
        //                    OFName = GetOFDeta(ConnectionString, IType, ref OF2, ref OF3, ref OF4, ref OF5);
        //                    if (Provider == 1)
        //                    {
        //                        sql = "Select * From (Select M1.Code From Master1 M1 Left Join MasterAddressInfo MAI On M1.Code = MAI.MasterCode where M1.MasterType = 6 And M1.ParentGrp  = " + GCode + " and Mai." + OFName + " = " + Param1 + " and Mai." + OF2 + " = " + Param2 + " and Mai." + OF3 + " = " + Param3 + " and  Mai." + OF4 + " = " + Param4 + " ANd Mai." + OF5 + " = " + Param5 + ") T1 inner Join ((Select A.Code,A.Name,H.NameAlias,IIF(IsNull(A.D3),0,A.D3) as Price,IIF(IsNull(B.D10),0,B.D10) as MinPrice,IIF(IsNull(B.Name),'',B.Name) as MainUnit,IIF(IsNull(C.Name),'',C.Name) as AltUnit,IIF(IsNull(A.I9),1,A.I9) as CFMode,IIF(IsNull(A.D1),1,A.D1) as ConFactor,((SElect IIF(IsNull(D1),0,D1) From Folio1 Where MasterCode = A.Code) + (Select IIF(IsNull(Sum(Value1)),0,Sum(Value1)) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And [Date] <= Date())) as Stock,IIF(IsNull(A.D16),0,A.D16) as DiscPer From (((Master1 A Inner Join Help1 H On A.Code = H.Code) Left Join Master1 B On A.CM1 = B.Code) Left Join Master1 C On A.CM2 = C.Code) Where A.MasterType = 6 And H.MasterSeries = 0) on T1.Code = D.Code )";
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        if (IType == 1)
        //                        {
        //                            sql = "Select * From (Select m1.Code From Master1 M1 Left Join MasterAddressInfo MAI On M1.Code = MAI.MasterCode where M1.MasterType = 6 And M1.ParentGrp  = " + GCode + " and Mai." + OFName + " = '" + Param1 + "' and Mai." + OF2 + " = '" + Param2 + "' and Mai." + OF3 + " = '" + Param3 + "' and  Mai." + OF4 + " ='" + Param4 + "' ANd Mai." + OF5 + " = '" + Param5 + "') T1 inner Join (Select A.Code,A.Name,H.NameAlias,IsNull(A.D3, 0) as Price,IsNull(B.D10, 0) as MinPrice,IsNull(B.Name, '') as MainUnit,IsNull(C.Name, '') as AltUnit,IsNull(A.I9, 1) as CFMode,IsNull(A.D1, 1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From(SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16, 0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.nameoralias  = 1 And H.MasterSeries = 0) D on T1.Code = D.Code ";

        //                        }
        //                        else
        //                        {
        //                            sql = "Select * From (Select m1.Code From Master1 M1 Left Join MasterAddressInfo MAI On M1.Code = MAI.MasterCode where M1.MasterType = 6 And M1.ParentGrp  = " + GCode + " and Mai.OF6 = '" + Param1 + "' and Mai.OF7 = '" + Param2 + "' and Mai.OF8 = '" + Param3 + "' and  Mai.OF9 ='" + Param4 + "' ANd Mai.OF10 = '" + Param5 + "') T1 inner Join (Select A.Code,A.Name,H.NameAlias,IsNull(A.D3, 0) as Price,IsNull(B.D10, 0) as MinPrice,IsNull(B.Name, '') as MainUnit,IsNull(C.Name, '') as AltUnit,IsNull(A.I9, 1) as CFMode,IsNull(A.D1, 1) as ConFactor,IsNull((Select Sum(A.Qty) as Stock From(SElect D1 as Qty From Folio1 Where MasterCode = A.Code Union All Select Sum(Value1) as Qty From Tran2 Where MasterCode1 = A.Code And RecType = 2 And Date <= getDate()) A),0) as Stock,IsNull(A.D16, 0) as DiscPer From Master1 A Inner Join Help1 H On A.Code = H.Code Left Join Master1 B On A.CM1 = B.Code Left Join Master1 C On A.CM2 = C.Code Where A.MasterType = 6 And H.nameoralias  = 1 And H.MasterSeries = 0) D on T1.Code = D.Code ";

        //                        }
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ObjList.Add(new RItem
        //                        {
        //                            ReVali = 1,
        //                            Code = clsMain.MyInt(dt.Rows[0]["Code"]),
        //                            Name = clsMain.MyString(dt.Rows[0]["Name"]),
        //                            NameAlias = clsMain.MyString(dt.Rows[0]["NameAlias"]),
        //                            Price = clsMain.MyDouble(dt.Rows[0]["Price"]),
        //                            MinPrice = clsMain.MyDouble(dt.Rows[0]["MinPrice"]),
        //                            MainUnit = clsMain.MyString(dt.Rows[0]["MainUnit"]),
        //                            AltUnit = clsMain.MyString(dt.Rows[0]["AltUnit"]),
        //                            CFMode = clsMain.MyInt(dt.Rows[0]["CFMode"]),
        //                            Confactor = clsMain.MyDouble(dt.Rows[0]["ConFactor"]),
        //                            Stock = clsMain.MyDouble(dt.Rows[0]["Stock"]),
        //                            DiscPer = clsMain.MyDouble(dt.Rows[0]["DiscPer"]),

        //                        });

        //                    }
        //                    else
        //                    {
        //                        ObjList.Add(new RItem
        //                        {
        //                            ReVali = 0,
        //                            Code = 0,
        //                            Name = "",
        //                            NameAlias = "",
        //                            Price = 0,
        //                            MinPrice = 0,
        //                            MainUnit = "",
        //                            AltUnit = "",
        //                            CFMode = 0,
        //                            Confactor = 0,
        //                            Stock = 0,
        //                            DiscPer = 0,
        //                        });
        //                    }

        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }

        //            [HttpGet]
        //            public dynamic ReValidateCheckinSFA(int Scode, int PCode, string CompCode, string FY)
        //            {
        //                List<ReValidate> ObjList = new List<ReValidate>();
        //                try
        //                {

        //                    string ConnectionString = GetConnectionString(Provider, CompCode, FY);
        //                    string queryStr = "";
        //                    DataTable dt = new DataTable();
        //                    string sql = "Select * From ESRepData where SalesManId= " + Scode + " and PartyCode = " + PCode + " and CheckIn = 1";

        //                    if (Provider == 1)
        //                    {
        //                        dt = new OLEDBHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    else
        //                    {
        //                        dt = new SQLHELPER(ConnectionString).getTable(sql);
        //                    }
        //                    if (dt != null && dt.Rows.Count > 0)
        //                    {
        //                        ObjList.Add(new ReValidate
        //                        {
        //                            ReVali = 1

        //                        });

        //                    }
        //                    else
        //                    {
        //                        ObjList.Add(new ReValidate
        //                        {
        //                            ReVali = 0

        //                        });
        //                    }

        //                }
        //                catch (Exception ex)
        //                {
        //                    return new { Status = 0, Msg = "Failed", Data = ObjList };
        //                }
        //                return new { Status = 1, Msg = "Success", Data = ObjList };
        //            }


        //            public string GetSRInvoiceXML(int VchType, VchInvoice Inv, ref double InvAmount, string ConnectionString)
        //            {
        //                string XMLStr = "";
        //                double TaxableAmount = 0;
        //                int CompoundDiscount = 0;

        //                try
        //                {

        //                    double Disc1 = 0;
        //                    double Disc2 = 0;
        //                    CompoundDiscount = GetCompoundDiscountStatus(ConnectionString);
        //                    BusyVoucher BVch = new BusyVoucher();
        //                    BusyVoucher.STPTData stptdata = BVch.GetSTPTData(Provider, ConnectionString, Inv.StPtName, 13);
        //                    int MCCode = BVch.GetMasterNameToCode(Provider, ConnectionString, Inv.MCName, 11);

        //                    BusyVoucher.SaleReturn ORD = new BusyVoucher.SaleReturn();
        //                    ORD.VchSeriesName = Inv.SeriesName; //BVch.GetMasterCodeToName(ConnStr, SeriesCode).Replace("12", "");
        //                    ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
        //                    ORD.VchNo = "";
        //                    ORD.VchType = VchType;
        //                    ORD.StockUpdationDate = ORD.Date;
        //                    ORD.STPTName = Inv.StPtName; //BVch.GetMasterCodeToName(ConnStr,Inv.StPtCode,pCmpCode,pFY);
        //                    ORD.MasterName1 = Inv.AccName; //BVch.GetMasterCodeToName(ConnStr, clsMain.MyInt(PartyId));
        //                    ORD.MasterName2 = Inv.MCName; //BVch.GetMasterCodeToName(ConnStr, MCCode);
        //                    if (Inv.Salesman.Length > 0)
        //                    {
        //                        ORD.BrokerInvolved = true;
        //                        ORD.BrokerName = Inv.Salesman;
        //                    }
        //                    ORD.TranCurName = "";
        //                    ORD.TmpVchCode = 0;
        //                    ORD.TmpVchSeriesCode = Inv.SeriesCode;

        //                    ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
        //                    ORD.BillSundries = new List<BusyVoucher.BSDetail>();
        //                    ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();

        //                    ORD.VchOtherInfoDetails.Narration1 = clsMain.MyString(Inv.Remarks);
        //                    ORD.VchOtherInfoDetails.Transport = clsMain.MyString(Inv.Transport);
        //                    ORD.VchOtherInfoDetails.Station = clsMain.MyString(Inv.Station);

        //                    int SrNo = 0;
        //                    int ISSrNo = 0;
        //                    foreach (var item in Inv.ItemDT)
        //                    {
        //                        BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
        //                        SrNo = SrNo + 1;
        //                        ID.SrNo = SrNo;
        //                        ID.VchType = ORD.VchType;
        //                        ID.Date = ORD.Date;
        //                        ID.VchNo = ORD.VchNo;
        //                        ID.ItemName = item.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));

        //                        ID.ConFactor = 1;
        //                        if (item.BillingUnit == 1)
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 1);
        //                            ID.Qty = clsMain.MyDouble(item.Qty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                        }
        //                        else
        //                        {
        //                            ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 2);
        //                            ID.Qty = clsMain.MyDouble(item.AltQty);
        //                            ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
        //                            ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
        //                        }
        //                        ID.ConFactor = clsMain.MyDouble(item.ConFactor);
        //                        ID.ListPrice = clsMain.MyDouble(item.ListPrice);
        //                        ID.Amt = clsMain.MyDouble(ID.ListPrice * ID.Qty);
        //                        if (CompoundDiscount == 1)
        //                        {
        //                            ID.CompoundDiscount = clsMain.MyDouble(item.DiscPerent) + "+" + clsMain.MyDouble(item.AddDiscount);// "10+5";
        //                            Disc1 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.DiscPerent)) / 100).ToString("0.00"));
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - Disc1);
        //                            Disc2 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.AddDiscount)) / 100).ToString("0.00"));
        //                            ID.Discount = Disc1 + Disc2;
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - Disc2);
        //                        }
        //                        else
        //                        {
        //                            ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
        //                            ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                            ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                        }
        //                        //ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
        //                        //ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
        //                        //ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
        //                        ID.Price = clsMain.MyDouble(item.Price);
        //                        ID.PriceAltUnit = 0;
        //                        if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
        //                        ID.STPercent = 0;
        //                        ID.STPercent1 = 0;
        //                        ID.STAmount = 0;
        //                        if (stptdata.MultiTax == true)
        //                        {
        //                            BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, item.ItemCode);
        //                            if (stptdata.GSTType == 1)
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(0);
        //                            }
        //                            else
        //                            {
        //                                ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
        //                                ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
        //                            }
        //                            if (stptdata.TaxType == true)
        //                            {
        //                                TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
        //                            }
        //                            else
        //                            {
        //                                TaxableAmount = ID.Amt;
        //                            }
        //                            ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
        //                            ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
        //                            if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
        //                        }
        //                        InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);
        //                        ID.TmpVchCode = 0;
        //                        ID.MC = ORD.MasterName2;
        //                        ID.AF = item.IRemarks;
        //                        ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
        //                        ID.ItemDescInfo.Description1 = item.IDescription1;
        //                        ID.ItemDescInfo.Description2 = item.IDescription2;
        //                        ID.ItemDescInfo.Description3 = item.IDescription3;
        //                        ID.ItemDescInfo.Description4 = item.IDescription4;
        //                        ID.ItemDescInfo.tmpSrNo = SrNo;
        //                        ID.ItemSerialNoEntries = new List<BusyVoucher.ItemSerialNoDetail>();
        //                        ISSrNo = 0;
        //                        foreach (var SerialItem in item.ItemSerailDT)
        //                        {
        //                            ISSrNo = ISSrNo + 1;
        //                            BusyVoucher.ItemSerialNoDetail serialNoDetail = new BusyVoucher.ItemSerialNoDetail();
        //                            serialNoDetail.ItemCode = item.ItemCode;
        //                            serialNoDetail.MCCode = MCCode;
        //                            serialNoDetail.VchItemSN = ID.SrNo;
        //                            serialNoDetail.GridSN = ISSrNo;
        //                            serialNoDetail.SerialNo = SerialItem.SerailNo;
        //                            serialNoDetail.MainQty = -1;
        //                            serialNoDetail.AltQty = -1;
        //                            serialNoDetail.MainUnitPrice = ID.Price;
        //                            serialNoDetail.AltUnitPrice = ID.Price;
        //                            ID.ItemSerialNoEntries.Add(serialNoDetail);
        //                        }
        //                        ORD.ItemEntries.Add(ID);
        //                    }
        //                    XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
        //                }
        //                catch
        //                {
        //                    return "";
        //                }

        //                return XMLStr;
        //            }

        public string GetInvoiceXML(int VchType, VchInvoice Inv, ref double InvAmount, string ConnectionString)
        {
            string XMLStr = "";
            double TaxableAmount = 0;
            int CompoundDiscount = 0;
            try
            {
                int SN = 0;
                double Disc1 = 0;
                double Disc2 = 0;
                BusyVoucher BVch = new BusyVoucher();
                BusyVoucher.STPTData stptdata = BVch.GetSTPTData(Provider, ConnectionString, Inv.StPtName, 13);
                int MCCode = BVch.GetMasterNameToCode(Provider, ConnectionString, Inv.MCName, 11);
                CompoundDiscount = GetCompoundDiscountStatus(ConnectionString);
                BusyVoucher.Sale ORD = new BusyVoucher.Sale();
                ORD.VchSeriesName = Inv.SeriesName; //BVch.GetMasterCodeToName(ConnStr, SeriesCode).Replace("12", "");
                ORD.Date = DateTime.UtcNow.ToString("dd-MM-yyyy");
                ORD.VchNo = "";
                ORD.VchType = VchType;
                ORD.StockUpdationDate = ORD.Date;
                ORD.STPTName = Inv.StPtName; //BVch.GetMasterCodeToName(ConnStr,Inv.StPtCode,pCmpCode,pFY);
                ORD.MasterName1 = Inv.AccName; //BVch.GetMasterCodeToName(ConnStr, clsMain.MyInt(PartyId));
                ORD.MasterName2 = Inv.MCName; //BVch.GetMasterCodeToName(ConnStr, MCCode);
                if (Inv.Salesman.Length > 0)
                {
                    ORD.BrokerInvolved = true;
                    ORD.BrokerName = Inv.Salesman;
                }
                ORD.TranCurName = "";
                ORD.TmpVchCode = 0;
                ORD.TmpVchSeriesCode = Inv.SeriesCode;

                ORD.ItemEntries = new List<BusyVoucher.ItemDetail>();
                ORD.BillSundries = new List<BusyVoucher.BSDetail>();
                ORD.VchOtherInfoDetails = new BusyVoucher.VchOtherInfoDetails();

                ORD.VchOtherInfoDetails.Narration1 = clsMain.MyString(Inv.Remarks);
                ORD.VchOtherInfoDetails.Transport = clsMain.MyString(Inv.Transport);
                ORD.VchOtherInfoDetails.Station = clsMain.MyString(Inv.Station);


                BusyVoucher.ItemDetail ID = new BusyVoucher.ItemDetail();
                int SrNo = 0;
                int ISSrNo = 0;
                foreach (var item in Inv.ItemDT)
                {
                    ID = new BusyVoucher.ItemDetail();
                    SrNo = SrNo + 1;
                    SN = SrNo;
                    ID.SrNo = SrNo;
                    ID.VchType = ORD.VchType;
                    ID.Date = ORD.Date;
                    ID.VchNo = ORD.VchNo;
                    ID.ItemName = item.ItemName; //BVch.GetMasterCodeToName(ConnectionString, clsMain.MyInt(ItemId[i]));

                    ID.ConFactor = 1;
                    if (item.BillingUnit == 1)
                    {
                        ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 1);
                        ID.Qty = clsMain.MyDouble(item.Qty);
                        ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
                        ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);
                    }
                    else
                    {
                        ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.ItemCode), 2);
                        ID.Qty = clsMain.MyDouble(item.AltQty);
                        ID.QtyMainUnit = clsMain.MyDouble(item.Qty);
                        ID.QtyAltUnit = clsMain.MyDouble(item.AltQty);

                    }
                    ID.ConFactor = clsMain.MyDouble(item.ConFactor);
                    ID.ListPrice = clsMain.MyDouble(item.ListPrice);
                    ID.Amt = clsMain.MyDouble(ID.ListPrice * ID.Qty);
                    if (CompoundDiscount == 1)
                    {
                        ID.CompoundDiscount = clsMain.MyDouble(item.DiscPerent) + "+" + clsMain.MyDouble(item.AddDiscount);// "10+5";
                        Disc1 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.DiscPerent)) / 100).ToString("0.00"));
                        ID.Amt = clsMain.MyDouble(ID.Amt - Disc1);
                        Disc2 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.AddDiscount)) / 100).ToString("0.00"));
                        ID.Discount = Disc1 + Disc2;
                        ID.Amt = clsMain.MyDouble(ID.Amt - Disc2);
                    }
                    else
                    {
                        ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
                        ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
                        ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
                    }

                    ID.Price = clsMain.MyDouble(item.Price);
                    ID.PriceAltUnit = 0;
                    if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
                    if (item.SchemeCode > 0)
                    {
                        ID.SchemeName = BVch.GetMasterCodeToName(Provider, ConnectionString, item.SchemeCode);
                        ID.SchemeType = item.SchemeType;
                        ID.SchemeParentRowNo = 0;
                    }
                    else
                    {
                        ID.SchemeName = null;
                        ID.SchemeType = 0;
                        ID.SchemeParentRowNo = 0;

                    }
                    ID.STPercent = 0;
                    ID.STPercent1 = 0;
                    ID.STAmount = 0;
                    if (stptdata.MultiTax == true)
                    {
                        BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, item.ItemCode);
                        if (stptdata.GSTType == 1)
                        {
                            ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
                            ID.STPercent1 = clsMain.MyDouble(0);
                        }
                        else
                        {
                            ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
                            ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
                        }
                        if (stptdata.TaxType == true)
                        {
                            TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
                        }
                        else
                        {
                            TaxableAmount = ID.Amt;
                        }
                        ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
                        ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
                        if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
                    }
                    InvAmount = InvAmount + clsMain.MyDouble(ID.Amt);
                    ID.TmpVchCode = 0;
                    ID.MC = ORD.MasterName2;
                    ID.AF = item.IRemarks;
                    ID.ItemDescInfo = new BusyVoucher.ItemDescInfo();
                    ID.ItemDescInfo.Description1 = item.IDescription1;
                    ID.ItemDescInfo.Description2 = item.IDescription2;
                    ID.ItemDescInfo.Description3 = item.IDescription3;
                    ID.ItemDescInfo.Description4 = item.IDescription4;
                    ID.ItemDescInfo.tmpSrNo = SrNo;
                    ID.ItemSerialNoEntries = new List<BusyVoucher.ItemSerialNoDetail>();
                    ISSrNo = 0;
                    foreach (var SerialItem in item.ItemSerailDT)
                    {
                        ISSrNo = ISSrNo + 1;
                        BusyVoucher.ItemSerialNoDetail serialNoDetail = new BusyVoucher.ItemSerialNoDetail();
                        serialNoDetail.ItemCode = item.ItemCode;
                        serialNoDetail.MCCode = MCCode;
                        serialNoDetail.VchItemSN = ID.SrNo;
                        serialNoDetail.GridSN = ISSrNo;
                        serialNoDetail.SerialNo = SerialItem.SerailNo;
                        serialNoDetail.MainQty = -1;
                        serialNoDetail.AltQty = -1;
                        serialNoDetail.MainUnitPrice = ID.Price;
                        serialNoDetail.AltUnitPrice = ID.Price;
                        ID.ItemSerialNoEntries.Add(serialNoDetail);
                    }

                    ORD.ItemEntries.Add(ID);
                    if (item.FItemCode > 0 || item.FreeQty > 0)
                    {
                        ID = new BusyVoucher.ItemDetail();
                        SrNo = SrNo + 1;
                        ID.SrNo = SrNo;
                        ID.VchType = ORD.VchType;
                        ID.Date = ORD.Date;
                        ID.VchNo = ORD.VchNo;
                        ID.ItemName = BVch.GetMasterCodeToName(Provider, ConnectionString, item.FItemCode);

                        ID.ConFactor = 1;
                        //if (item.BillingUnit == 1)
                        //{
                        ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.FItemCode), 1);
                        ID.Qty = clsMain.MyDouble(item.FreeQty);
                        ID.QtyMainUnit = clsMain.MyDouble(item.FreeQty);
                        ID.QtyAltUnit = clsMain.MyDouble(item.FreeQty);
                        //}
                        //else
                        //{
                        //    ID.UnitName = BVch.GetItemMainUnitName(Provider, ConnectionString, clsMain.MyInt(item.FItemCode), 2);
                        //    ID.Qty = clsMain.MyDouble(item.FreeQty);
                        //    ID.QtyMainUnit = clsMain.MyDouble(item.FreeQty);
                        //    ID.QtyAltUnit = clsMain.MyDouble(item.FreeQty);

                        //}
                        ID.ConFactor = clsMain.MyDouble(item.ConFactor);
                        ID.ListPrice = clsMain.MyDouble(item.ListPrice);
                        ID.Amt = clsMain.MyDouble(ID.ListPrice * ID.Qty);
                        //if (CompoundDiscount == 1)
                        //{
                        //    ID.CompoundDiscount = clsMain.MyDouble(item.DiscPerent) + "+" + clsMain.MyDouble(item.AddDiscount);// "10+5";
                        //    Disc1 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.DiscPerent)) / 100).ToString("0.00"));
                        //    ID.Amt = clsMain.MyDouble(ID.Amt - Disc1);
                        //    Disc2 = clsMain.MyDouble(((ID.Amt * clsMain.MyDouble(item.AddDiscount)) / 100).ToString("0.00"));
                        //    ID.Discount = Disc1 + Disc2;
                        //    ID.Amt = clsMain.MyDouble(ID.Amt - Disc2);
                        //}
                        //else
                        //{
                        ID.DiscountPercent = 0;
                        ID.Discount = 0;//clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
                                        //ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
                                        //}
                                        //ID.DiscountPercent = clsMain.MyDouble(item.DiscPerent);
                                        //ID.Discount = clsMain.MyDouble(((ID.Amt * ID.DiscountPercent) / 100).ToString("0.00"));
                                        //ID.Amt = clsMain.MyDouble(ID.Amt - ID.Discount);
                        ID.Price = clsMain.MyDouble(item.Price);
                        ID.PriceAltUnit = 0;
                        if (ID.QtyAltUnit != 0) { ID.PriceAltUnit = clsMain.MyDouble((clsMain.MyDouble(ID.Amt) / clsMain.MyDouble(ID.QtyAltUnit)).ToString("0.00")); }
                        if (item.SchemeCode != 0)
                        {
                            ID.SchemeName = BVch.GetMasterCodeToName(Provider, ConnectionString, item.SchemeCode);
                            ID.SchemeType = item.SchemeType;
                            ID.SchemeParentRowNo = SN;
                        }
                        ID.STPercent = 0;
                        ID.STPercent1 = 0;
                        ID.STAmount = 0;
                        if (stptdata.MultiTax == true)
                        {
                            BusyVoucher.TaxCData taxcdata = BVch.GetTaxCategoryData(Provider, ConnectionString, item.FItemCode);
                            if (stptdata.GSTType == 1)
                            {
                                ID.STPercent = clsMain.MyDouble(taxcdata.IGSTPer);
                                ID.STPercent1 = clsMain.MyDouble(0);
                            }
                            else
                            {
                                ID.STPercent = clsMain.MyDouble(taxcdata.CGSTPer);
                                ID.STPercent1 = clsMain.MyDouble(taxcdata.SGSTPer);
                            }
                            if (stptdata.TaxType == true)
                            {
                                TaxableAmount = ((ID.Amt * 100) / (100 + (ID.STPercent + ID.STPercent1)));
                            }
                            else
                            {
                                TaxableAmount = ID.Amt;
                            }
                            ID.STAmount = clsMain.MyDouble(((TaxableAmount * ID.STPercent) / 100).ToString("0.00"));
                            ID.STAmount = ID.STAmount + clsMain.MyDouble(((TaxableAmount * ID.STPercent1) / 100).ToString("0.00"));
                            if (stptdata.TaxType == false) { ID.Amt = clsMain.MyDouble(ID.Amt + ID.STAmount); }
                        }
                        ORD.ItemEntries.Add(ID);
                    }
                }
                SrNo = 0;

                foreach (var BS in Inv.BSDetail)
                {
                    SrNo = SrNo + 1;
                    BusyVoucher.BSDetail BSDet = new BusyVoucher.BSDetail();
                    BSDet.BSName = BS.BSName;
                    BSDet.SrNo = SrNo;
                    BSDet.tmpBSCode = BS.BSCode;
                    BSDet.PercentVal = BS.BSPer;
                    BSDet.PercentOperatedOn = BS.PercentOperatedOn;
                    BSDet.Amt = BS.Amount;
                    ORD.BillSundries.Add(BSDet);

                }
                XMLStr = CreateXML(ORD).Replace("<?xml version=\"1.0\"?>", "").Replace(" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
            }
            catch
            {
                return "";
            }

            return XMLStr;
        }

        public int GetDefaultMaterialCenter(string constr, int ItemCode)
        {
            try
            {
                string sql = $"Select [CM6] As MCCode From Master1 Where Code = {ItemCode} And MasterType = 6 ";
                DataTable DT1 = new SQLHELPER(constr).getTable(sql);

                return DT1 != null ? clsMain.MyInt(DT1.Rows[0]["MCCode"]) : 0 ;
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching Item Default Material Center:" + ex.Message.ToString());
            }
        }

        [HttpGet]
        public string GetVchNo(string constr, int vchtype, int tranType, out int autoNo)
        {
            int autoVchNo = GetAutoVchNo(constr, vchtype); autoNo = Convert.ToInt32(autoVchNo);
#pragma warning disable IDE0018 // Inline variable declaration
            string prefix, suffix, padStr;
#pragma warning restore IDE0018 // Inline variable declaration
            LoadSuffixPrefix(constr, tranType, out prefix, out suffix, out padStr, ref autoVchNo);

            return $"{prefix}{padStr}{autoVchNo}{suffix}";
        }

        private int GetAutoVchNo(string constr, int Vchtype)
        {
            SQLHELPER obj = new SQLHELPER(constr);

            string sql = Vchtype == 110 ? $"Select IsNull(Max(AutoVchNo),0) as AutoVchNo From ESJSLPacking Where VchType = {Vchtype}" : $"Select IsNull(Max(AutoVchNo),0) as AutoVchNo From ESJSLTran1 Where VchType = {Vchtype}";
            DataTable DT1 = obj.getTable(sql);

            if (DT1 != null && DT1.Rows.Count > 0)
            {
                return Convert.ToInt32(DT1.Rows[0]["AutoVchNo"]) + 1;
            }
            return 1;
        }

        private void LoadSuffixPrefix(string constr, int tranType, out string prefix, out string suffix, out string padStr, ref int vchNo)
        {
            prefix = string.Empty;
            suffix = string.Empty;
            padStr = string.Empty;
            SQLHELPER obj = new SQLHELPER(constr);

            string sql = $"SELECT * FROM ESJSLVchConfig WHERE TranType = {tranType}";
            DataTable DT1 = obj.getTable(sql);

            if (DT1 != null && DT1.Rows.Count > 0)
            {
                prefix = DT1.Rows[0]["Prefix"]?.ToString().Trim() ?? string.Empty;
                suffix = DT1.Rows[0]["Suffix"]?.ToString().Trim() ?? string.Empty;

                if (!DBNull.Value.Equals(DT1.Rows[0]["StartNo"]) && Convert.ToInt32(DT1.Rows[0]["StartNo"]) > vchNo)
                {
                    vchNo = Convert.ToInt32(DT1.Rows[0]["StartNo"]);
                }

                string vchStr = vchNo.ToString();
                if (!DBNull.Value.Equals(DT1.Rows[0]["Padding"]) && Convert.ToInt32(DT1.Rows[0]["Padding"]) != 0)
                {
                    int padLength = DT1.Rows[0]["PaddLength"] != DBNull.Value ? Convert.ToInt32(DT1.Rows[0]["PaddLength"]) : 0;
                    char padChar = DT1.Rows[0]["PaddChar"] != DBNull.Value ? Convert.ToChar(DT1.Rows[0]["PaddChar"]) : ' ';

                    if (padLength > vchStr.Length)
                    {
                        padStr = new string(padChar, padLength - vchStr.Length);
                    }
                }
            }
        }

        public string GetBusyMasterCode2NameIfExist(string Constr, int Code, int MasterType)
        {
            try
            {
                string sql = $"Select IsNull([Name], '') as Name From Master1 Where Code = {Code} And MasterType = {MasterType}";
                DataTable dt1 = new SQLHELPER(Constr).getTable(sql);

                if (dt1 != null && dt1.Rows.Count > 0)
                {
                    return clsMain.MyString(dt1.Rows[0]["Name"]).Trim();
                }
                else
                {
                    return "";
                }
            }
            catch
            {
                return "";
            }
        }

        private SeriesConfigDt GetSeriesConfigDetails(string constr)
        {
            SeriesConfigDt seriesDt = new SeriesConfigDt();
            try
            {
                SQLHELPER obj = new SQLHELPER(constr);
                string sql = $"Select Top 1 ISNULL(A.[MasterCode1], 0) as SeriesCode, IsNull(SUBSTRING(B.[Name], 3, 25), '') as SeriesName, ISNULL(A.[MasterCode2], 0) as TMCCode,  ISNULL(C.[Name], '') as TMCName From ESJSLSeriesConfig A Left Join Master1 B ON A.MasterCode1 = B.Code Left Join Master1 C ON A.MasterCode2 = C.Code Where A.RecType = 1";
                DataTable DT1 = obj.getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    seriesDt.SeriesCode = Convert.ToInt32(DT1.Rows[0]["SeriesCode"]);
                    seriesDt.SeriesName = clsMain.MyString(DT1.Rows[0]["SeriesName"]).Trim();
                    seriesDt.TMCCode = Convert.ToInt32(DT1.Rows[0]["TMCCode"]);
                    seriesDt.TMCName = clsMain.MyString(DT1.Rows[0]["TMCName"]).Trim();
                }
                else
                {
                    throw new Exception("Voucher Can't Save, Due to Series And Material Center Not Configure");
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching Configuration Series Details" + ex.Message.ToString());
            }
            return seriesDt;
        }

        private string GetConfigeOptionalField(string constr, int RecType)
        {
            try
            {
                string sql = $"Select IsNull(Code, 0) as OptFld From ESJSLOFConfig Where RecType = {RecType}";
                DataTable DT1 = new SQLHELPER(constr).getTable(sql);

                if (DT1 != null && DT1.Rows.Count > 0)
                {
                    return "OF" + Convert.ToInt32(DT1.Rows[0]["OptFld"]);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error fetching Configuration Item Optional Filed:" + ex.Message.ToString());
            }
            return "";
        }
    }
}